
bluetooth_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aec  08009aec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af4  08009af4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000b00  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d153  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d66  00000000  00000000  0003d236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019e0  00000000  00000000  00040fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001451  00000000  00000000  00042980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002976c  00000000  00000000  00043dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f8cc  00000000  00000000  0006d53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa9f8  00000000  00000000  0008ce09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000792c  00000000  00000000  00187804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0018f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800986c 	.word	0x0800986c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800986c 	.word	0x0800986c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <I2C_Scan>:
extern I2C_HandleTypeDef hi2c1;

extern UART_HandleTypeDef huart3;


void I2C_Scan() {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b098      	sub	sp, #96	; 0x60
 80005a0:	af00      	add	r7, sp, #0
    char info[] = "Scanning I2C bus...\r\n";
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <I2C_Scan+0xc0>)
 80005a4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b2:	6020      	str	r0, [r4, #0]
 80005b4:	3404      	adds	r4, #4
 80005b6:	8021      	strh	r1, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80005b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe17 	bl	80001f0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	4824      	ldr	r0, [pc, #144]	; (8000660 <I2C_Scan+0xc4>)
 80005d0:	f006 fce5 	bl	8006f9e <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80005da:	e02f      	b.n	800063c <I2C_Scan+0xa0>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80005dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	b299      	uxth	r1, r3
 80005e4:	230a      	movs	r3, #10
 80005e6:	2201      	movs	r2, #1
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <I2C_Scan+0xc8>)
 80005ea:	f004 f9e3 	bl	80049b4 <HAL_I2C_IsDeviceReady>
 80005ee:	4603      	mov	r3, r0
 80005f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 80005f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d113      	bne.n	8000624 <I2C_Scan+0x88>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	4a19      	ldr	r2, [pc, #100]	; (8000668 <I2C_Scan+0xcc>)
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	f008 f8c3 	bl	8008790 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff fdef 	bl	80001f0 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <I2C_Scan+0xc4>)
 800061e:	f006 fcbe 	bl	8006f9e <HAL_UART_Transmit>
 8000622:	e006      	b.n	8000632 <I2C_Scan+0x96>
        } else {
            HAL_UART_Transmit(&huart3, (uint8_t*)".", 1, HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	2201      	movs	r2, #1
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <I2C_Scan+0xd0>)
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <I2C_Scan+0xc4>)
 800062e:	f006 fcb6 	bl	8006f9e <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8000632:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000636:	3301      	adds	r3, #1
 8000638:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800063c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000640:	2b7f      	cmp	r3, #127	; 0x7f
 8000642:	d9cb      	bls.n	80005dc <I2C_Scan+0x40>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2202      	movs	r2, #2
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <I2C_Scan+0xd4>)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <I2C_Scan+0xc4>)
 800064e:	f006 fca6 	bl	8006f9e <HAL_UART_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bdb0      	pop	{r4, r5, r7, pc}
 800065a:	bf00      	nop
 800065c:	08009894 	.word	0x08009894
 8000660:	20000420 	.word	0x20000420
 8000664:	20000364 	.word	0x20000364
 8000668:	08009884 	.word	0x08009884
 800066c:	0800988c 	.word	0x0800988c
 8000670:	08009890 	.word	0x08009890

08000674 <LCD_SendInternal>:

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	460b      	mov	r3, r1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	4613      	mov	r3, r2
 8000684:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef res;
    for(;;) {
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b299      	uxth	r1, r3
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	2201      	movs	r2, #1
 8000690:	4822      	ldr	r0, [pc, #136]	; (800071c <LCD_SendInternal+0xa8>)
 8000692:	f004 f98f 	bl	80049b4 <HAL_I2C_IsDeviceReady>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
        if(res == HAL_OK)
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d000      	beq.n	80006a2 <LCD_SendInternal+0x2e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, lcd_addr, 1, HAL_MAX_DELAY);
 80006a0:	e7f1      	b.n	8000686 <LCD_SendInternal+0x12>
            break;
 80006a2:	bf00      	nop
    }

    uint8_t up = data & 0xF0;
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	f023 030f 	bic.w	r3, r3, #15
 80006aa:	73bb      	strb	r3, [r7, #14]
    uint8_t lo = (data << 4) & 0xF0;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|BACKLIGHT|PIN_EN;
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 030c 	orr.w	r3, r3, #12
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|BACKLIGHT;
 80006c2:	7bba      	ldrb	r2, [r7, #14]
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0308 	orr.w	r3, r3, #8
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|BACKLIGHT|PIN_EN;
 80006d2:	7b7a      	ldrb	r2, [r7, #13]
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|BACKLIGHT;
 80006e2:	7b7a      	ldrb	r2, [r7, #13]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	72fb      	strb	r3, [r7, #11]

    res = HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	b299      	uxth	r1, r3
 80006f6:	f107 0208 	add.w	r2, r7, #8
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2304      	movs	r3, #4
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <LCD_SendInternal+0xa8>)
 8000704:	f004 f858 	bl	80047b8 <HAL_I2C_Master_Transmit>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(LCD_DELAY_MS);
 800070c:	2005      	movs	r0, #5
 800070e:	f001 fc53 	bl	8001fb8 <HAL_Delay>
    return res;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000364 	.word	0x20000364

08000720 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, cmd, 0);
 8000730:	79b9      	ldrb	r1, [r7, #6]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2200      	movs	r2, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff9c 	bl	8000674 <LCD_SendInternal>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LCD_SendData>:

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
    LCD_SendInternal(lcd_addr, data, PIN_RS);
 8000754:	79b9      	ldrb	r1, [r7, #6]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2201      	movs	r2, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8a 	bl	8000674 <LCD_SendInternal>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <LCD_Init>:

void LCD_Init(uint8_t lcd_addr) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // 4-bit mode, 2 lines, 5x7 format
    LCD_SendCommand(lcd_addr, 0b00110000);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2130      	movs	r1, #48	; 0x30
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ffd2 	bl	8000720 <LCD_SendCommand>
    // display & cursor home (keep this!)
    LCD_SendCommand(lcd_addr, 0b00000010);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffcd 	bl	8000720 <LCD_SendCommand>
    // display on, right shift, underline off, blink off
    LCD_SendCommand(lcd_addr, 0b00001100);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	210c      	movs	r1, #12
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc8 	bl	8000720 <LCD_SendCommand>
    // clear display (optional here)
    LCD_SendCommand(lcd_addr, 0b00000001);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffc3 	bl	8000720 <LCD_SendCommand>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LCD_SendString>:

void LCD_SendString(uint8_t lcd_addr, char *str) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	6039      	str	r1, [r7, #0]
 80007ac:	71fb      	strb	r3, [r7, #7]
    while(*str) {
 80007ae:	e009      	b.n	80007c4 <LCD_SendString+0x22>
        LCD_SendData(lcd_addr, (uint8_t)(*str));
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffc3 	bl	8000744 <LCD_SendData>
        str++;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <LCD_SendString+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <init>:

void init() {
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
    I2C_Scan();
 80007da:	f7ff fedf 	bl	800059c <I2C_Scan>
    LCD_Init(LCD_ADDR);
 80007de:	204e      	movs	r0, #78	; 0x4e
 80007e0:	f7ff ffc2 	bl	8000768 <LCD_Init>
//    LCD_SendString(LCD_ADDR, "   Bluetooth   ");
//
//    // set address to 0x40
//    LCD_SendCommand(LCD_ADDR, 0b11000000);
//    LCD_SendString(LCD_ADDR, "  Alarm Clock ");
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
enum CLOCK_BUTTON joyStick_btn_chk();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 500);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <_write+0x28>)
 8000800:	f006 fbcd 	bl	8006f9e <HAL_UART_Transmit>
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000420 	.word	0x20000420

08000814 <get_time>:

RTC_DateTypeDef sDate;
RTC_TimeTypeDef RTC_Time;

void get_time(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 800081a:	2200      	movs	r2, #0
 800081c:	4911      	ldr	r1, [pc, #68]	; (8000864 <get_time+0x50>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <get_time+0x54>)
 8000820:	f005 fd00 	bl	8006224 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000824:	2200      	movs	r2, #0
 8000826:	4911      	ldr	r1, [pc, #68]	; (800086c <get_time+0x58>)
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <get_time+0x54>)
 800082a:	f005 fddd 	bl	80063e8 <HAL_RTC_GetDate>
//	RTC_Time.Seconds = readFlash(FLASH_USER_START_ADDR + 2);
//
//	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);

	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <get_time+0x50>)
 8000830:	78db      	ldrb	r3, [r3, #3]
 8000832:	461a      	mov	r2, r3
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <get_time+0x5c>)
 800083c:	441a      	add	r2, r3
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <get_time+0x50>)
 8000840:	781b      	ldrb	r3, [r3, #0]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 8000842:	4618      	mov	r0, r3
			ampm[RTC_Time.TimeFormat], RTC_Time.Hours, RTC_Time.Minutes,
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <get_time+0x50>)
 8000846:	785b      	ldrb	r3, [r3, #1]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 8000848:	4619      	mov	r1, r3
			RTC_Time.Seconds);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <get_time+0x50>)
 800084c:	789b      	ldrb	r3, [r3, #2]
	sprintf((char*) temp_time_buf, "%s %02d: %02d: %02d",
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	9100      	str	r1, [sp, #0]
 8000852:	4603      	mov	r3, r0
 8000854:	4907      	ldr	r1, [pc, #28]	; (8000874 <get_time+0x60>)
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <get_time+0x64>)
 8000858:	f007 ffce 	bl	80087f8 <siprintf>
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200009e0 	.word	0x200009e0
 8000868:	200003b8 	.word	0x200003b8
 800086c:	200009dc 	.word	0x200009dc
 8000870:	20000000 	.word	0x20000000
 8000874:	080098ac 	.word	0x080098ac
 8000878:	200009ac 	.word	0x200009ac

0800087c <showCurrentTime>:

void showCurrentTime() {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

	LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	204e      	movs	r0, #78	; 0x4e
 8000884:	f7ff ff4c 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, "Current Time");
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <showCurrentTime+0x28>)
 800088a:	204e      	movs	r0, #78	; 0x4e
 800088c:	f7ff ff89 	bl	80007a2 <LCD_SendString>

	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000890:	21c0      	movs	r1, #192	; 0xc0
 8000892:	204e      	movs	r0, #78	; 0x4e
 8000894:	f7ff ff44 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, temp_time_buf);
 8000898:	4903      	ldr	r1, [pc, #12]	; (80008a8 <showCurrentTime+0x2c>)
 800089a:	204e      	movs	r0, #78	; 0x4e
 800089c:	f7ff ff81 	bl	80007a2 <LCD_SendString>

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	080098c0 	.word	0x080098c0
 80008a8:	200009ac 	.word	0x200009ac

080008ac <lcd_clear>:

void lcd_clear() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	LCD_SendCommand(LCD_ADDR, 0b00000001);
 80008b0:	2101      	movs	r1, #1
 80008b2:	204e      	movs	r0, #78	; 0x4e
 80008b4:	f7ff ff34 	bl	8000720 <LCD_SendCommand>
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <readFlash>:

uint8_t readFlash(uint32_t addr) {
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t value = *(uint8_t*) addr;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	73fb      	strb	r3, [r7, #15]

//	printf("flash value=%d\r\n", value);

	return value;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <update_nvitems>:

HAL_StatusTypeDef update_nvitems(void) {
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
	uint32_t FirstSector, NbOfSectors, SECTORError;
	FLASH_EraseInitTypeDef EraseInitStruct;
	HAL_StatusTypeDef error = HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint32_t Address, i;
	uint64_t Data;
	uint8_t *ptr;

	HAL_FLASH_Unlock();
 80008e4:	f003 f962 	bl	8003bac <HAL_FLASH_Unlock>

	FirstSector = ADDR_FLASH_SECTOR_22;
 80008e8:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <update_nvitems+0xc8>)
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	NbOfSectors = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Sector = FirstSector;
 80008f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008fa:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.NbSectors = NbOfSectors;
 80008fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fe:	60fb      	str	r3, [r7, #12]

	//	printf("\r\n--------------erase-----------\r\n");
	//error = HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) == HAL_OK) {
 8000900:	f107 0214 	add.w	r2, r7, #20
 8000904:	463b      	mov	r3, r7
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f003 fac1 	bl	8003e90 <HAL_FLASHEx_Erase>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d107      	bne.n	8000924 <update_nvitems+0x4c>
		printf("\r\n--------------erase complete-----------\r\n");
 8000914:	4823      	ldr	r0, [pc, #140]	; (80009a4 <update_nvitems+0xcc>)
 8000916:	f007 ff33 	bl	8008780 <puts>
	} else {
		printf("\r\n--------------erase error-----------\r\n");
		return error;
	}

	ptr = (uint8_t*) &default_nvitem;
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <update_nvitems+0xd0>)
 800091c:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
 8000922:	e030      	b.n	8000986 <update_nvitems+0xae>
		printf("\r\n--------------erase error-----------\r\n");
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <update_nvitems+0xd4>)
 8000926:	f007 ff2b 	bl	8008780 <puts>
		return error;
 800092a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092e:	e032      	b.n	8000996 <update_nvitems+0xbe>
		Address = (uint8_t*) nv_items + i;
 8000930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000932:	f103 6301 	add.w	r3, r3, #135266304	; 0x8100000
 8000936:	f503 2340 	add.w	r3, r3, #786432	; 0xc0000
 800093a:	623b      	str	r3, [r7, #32]
		Data = *((uint8_t*) ptr + i);
 800093c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2200      	movs	r2, #0
 8000948:	461c      	mov	r4, r3
 800094a:	4615      	mov	r5, r2
 800094c:	e9c7 4506 	strd	r4, r5, [r7, #24]
		error = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, Data);
 8000950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000954:	6a39      	ldr	r1, [r7, #32]
 8000956:	2000      	movs	r0, #0
 8000958:	f003 f8d4 	bl	8003b04 <HAL_FLASH_Program>
 800095c:	4603      	mov	r3, r0
 800095e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		printf("DATA: %ld\r\n", Data);
 8000962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000966:	4812      	ldr	r0, [pc, #72]	; (80009b0 <update_nvitems+0xd8>)
 8000968:	f007 fea4 	bl	80086b4 <iprintf>

		if (error != HAL_OK) {
 800096c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000970:	2b00      	cmp	r3, #0
 8000972:	d005      	beq.n	8000980 <update_nvitems+0xa8>
		printf("\r\n--------------overwrite error-----------\r\n");
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <update_nvitems+0xdc>)
 8000976:	f007 ff03 	bl	8008780 <puts>
			return error;
 800097a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800097e:	e00a      	b.n	8000996 <update_nvitems+0xbe>
	for (i = 0; i < sizeof(NVitemTypeDef); i++) {
 8000980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000982:	3301      	adds	r3, #1
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
 8000986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000988:	2b06      	cmp	r3, #6
 800098a:	d9d1      	bls.n	8000930 <update_nvitems+0x58>
		}
	}
	printf("\r\n--------------overwrite complete-----------\r\n");
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <update_nvitems+0xe0>)
 800098e:	f007 fef7 	bl	8008780 <puts>
	HAL_FLASH_Lock();
 8000992:	f003 f92d 	bl	8003bf0 <HAL_FLASH_Lock>
}
 8000996:	4618      	mov	r0, r3
 8000998:	3738      	adds	r7, #56	; 0x38
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	bf00      	nop
 80009a0:	081c0000 	.word	0x081c0000
 80009a4:	080098d0 	.word	0x080098d0
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	080098fc 	.word	0x080098fc
 80009b0:	08009924 	.word	0x08009924
 80009b4:	08009930 	.word	0x08009930
 80009b8:	0800995c 	.word	0x0800995c

080009bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM3) {
	}

}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <timeDisplay>:

void timeDisplay() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af02      	add	r7, sp, #8
	uint8_t hours;
	uint8_t minutes;
	uint8_t seconds;

	if (current_state.mode == TIME_SETTING) {
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <timeDisplay+0xd8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d114      	bne.n	8000a08 <timeDisplay+0x38>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	204e      	movs	r0, #78	; 0x4e
 80009e2:	f7ff fe9d 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Time Setting");
 80009e6:	4931      	ldr	r1, [pc, #196]	; (8000aac <timeDisplay+0xdc>)
 80009e8:	204e      	movs	r0, #78	; 0x4e
 80009ea:	f7ff feda 	bl	80007a2 <LCD_SendString>

		hours = stime.hours;
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <timeDisplay+0xe0>)
 80009f0:	f993 3000 	ldrsb.w	r3, [r3]
 80009f4:	71fb      	strb	r3, [r7, #7]
		minutes = stime.minutes;
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <timeDisplay+0xe0>)
 80009f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009fc:	71bb      	strb	r3, [r7, #6]
		seconds = stime.seconds;
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <timeDisplay+0xe0>)
 8000a00:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a04:	717b      	strb	r3, [r7, #5]
 8000a06:	e017      	b.n	8000a38 <timeDisplay+0x68>
	} else if (current_state.mode == ALARM_TIME_SETTING) {
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <timeDisplay+0xd8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d113      	bne.n	8000a38 <timeDisplay+0x68>
		LCD_SendCommand(LCD_ADDR, 0b10000000);
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	204e      	movs	r0, #78	; 0x4e
 8000a14:	f7ff fe84 	bl	8000720 <LCD_SendCommand>
		LCD_SendString(LCD_ADDR, "Alarm Setting");
 8000a18:	4926      	ldr	r1, [pc, #152]	; (8000ab4 <timeDisplay+0xe4>)
 8000a1a:	204e      	movs	r0, #78	; 0x4e
 8000a1c:	f7ff fec1 	bl	80007a2 <LCD_SendString>

		hours = atime.hours;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <timeDisplay+0xe8>)
 8000a22:	f993 3000 	ldrsb.w	r3, [r3]
 8000a26:	71fb      	strb	r3, [r7, #7]
		minutes = atime.minutes;
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <timeDisplay+0xe8>)
 8000a2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000a2e:	71bb      	strb	r3, [r7, #6]
		seconds = atime.seconds;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <timeDisplay+0xe8>)
 8000a32:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000a36:	717b      	strb	r3, [r7, #5]
	}

	if (hours >= 12) {
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b0b      	cmp	r3, #11
 8000a3c:	d915      	bls.n	8000a6a <timeDisplay+0x9a>
		sprintf(timeStr, "%s %02d: %02d: %02d", ampm[RTC_Time.TimeFormat],
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <timeDisplay+0xec>)
 8000a40:	78db      	ldrb	r3, [r3, #3]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <timeDisplay+0xf0>)
 8000a4c:	1899      	adds	r1, r3, r2
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f1a3 000c 	sub.w	r0, r3, #12
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	797a      	ldrb	r2, [r7, #5]
 8000a58:	9201      	str	r2, [sp, #4]
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	460a      	mov	r2, r1
 8000a60:	4918      	ldr	r1, [pc, #96]	; (8000ac4 <timeDisplay+0xf4>)
 8000a62:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <timeDisplay+0xf8>)
 8000a64:	f007 fec8 	bl	80087f8 <siprintf>
 8000a68:	e012      	b.n	8000a90 <timeDisplay+0xc0>
				hours - 12, minutes, seconds);
	} else {
		sprintf(timeStr, "%s %02d: %02d: %02d", ampm[RTC_Time.TimeFormat],
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <timeDisplay+0xec>)
 8000a6c:	78db      	ldrb	r3, [r3, #3]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <timeDisplay+0xf0>)
 8000a78:	1899      	adds	r1, r3, r2
 8000a7a:	79f8      	ldrb	r0, [r7, #7]
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	797a      	ldrb	r2, [r7, #5]
 8000a80:	9201      	str	r2, [sp, #4]
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4603      	mov	r3, r0
 8000a86:	460a      	mov	r2, r1
 8000a88:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <timeDisplay+0xf4>)
 8000a8a:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <timeDisplay+0xf8>)
 8000a8c:	f007 feb4 	bl	80087f8 <siprintf>
				hours, minutes, seconds);
	}

//		lcd_clear();
	LCD_SendCommand(LCD_ADDR, 0b11000000);
 8000a90:	21c0      	movs	r1, #192	; 0xc0
 8000a92:	204e      	movs	r0, #78	; 0x4e
 8000a94:	f7ff fe44 	bl	8000720 <LCD_SendCommand>
	LCD_SendString(LCD_ADDR, timeStr);
 8000a98:	490b      	ldr	r1, [pc, #44]	; (8000ac8 <timeDisplay+0xf8>)
 8000a9a:	204e      	movs	r0, #78	; 0x4e
 8000a9c:	f7ff fe81 	bl	80007a2 <LCD_SendString>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200009cc 	.word	0x200009cc
 8000aac:	0800998c 	.word	0x0800998c
 8000ab0:	200009d4 	.word	0x200009d4
 8000ab4:	0800999c 	.word	0x0800999c
 8000ab8:	200009d8 	.word	0x200009d8
 8000abc:	200009e0 	.word	0x200009e0
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	080098ac 	.word	0x080098ac
 8000ac8:	2000098c 	.word	0x2000098c

08000acc <joyStick_btn_chk>:

enum CLOCK_BUTTON joyStick_btn_chk() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

//	printf("xy[0]=%d xy[1]=%d\r\n", xy[0], xy[1]);

	if (xy[1] > 4000) {
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <joyStick_btn_chk+0x58>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ad8:	d904      	bls.n	8000ae4 <joyStick_btn_chk+0x18>
		printf("up\r\n");
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <joyStick_btn_chk+0x5c>)
 8000adc:	f007 fe50 	bl	8008780 <puts>
		return UP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e01d      	b.n	8000b20 <joyStick_btn_chk+0x54>
	}
	if (xy[0] > 4000) {
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <joyStick_btn_chk+0x58>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000aec:	d904      	bls.n	8000af8 <joyStick_btn_chk+0x2c>
		printf("left\r\n");
 8000aee:	480f      	ldr	r0, [pc, #60]	; (8000b2c <joyStick_btn_chk+0x60>)
 8000af0:	f007 fe46 	bl	8008780 <puts>
		return LEFT;
 8000af4:	2304      	movs	r3, #4
 8000af6:	e013      	b.n	8000b20 <joyStick_btn_chk+0x54>
	}
	if (xy[0] < 500) {
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <joyStick_btn_chk+0x58>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b00:	d204      	bcs.n	8000b0c <joyStick_btn_chk+0x40>
		printf("right\r\n");
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <joyStick_btn_chk+0x64>)
 8000b04:	f007 fe3c 	bl	8008780 <puts>
		return RIGHT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e009      	b.n	8000b20 <joyStick_btn_chk+0x54>
	}
	if (xy[1] < 500) {
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <joyStick_btn_chk+0x58>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b14:	d204      	bcs.n	8000b20 <joyStick_btn_chk+0x54>
		printf("down\r\n");
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <joyStick_btn_chk+0x68>)
 8000b18:	f007 fe32 	bl	8008780 <puts>
		return DOWN;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	e7ff      	b.n	8000b20 <joyStick_btn_chk+0x54>
	}

}
 8000b20:	4618      	mov	r0, r3
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000970 	.word	0x20000970
 8000b28:	080099ac 	.word	0x080099ac
 8000b2c:	080099b0 	.word	0x080099b0
 8000b30:	080099b8 	.word	0x080099b8
 8000b34:	080099c0 	.word	0x080099c0

08000b38 <time_set_mode>:

void time_set_mode() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

	enum CLOCK_BUTTON t_button;

	t_button = joyStick_btn_chk();
 8000b3e:	f7ff ffc5 	bl	8000acc <joyStick_btn_chk>
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]

	if (t_position == 0) {
 8000b46:	4bab      	ldr	r3, [pc, #684]	; (8000df4 <time_set_mode+0x2bc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d134      	bne.n	8000bb8 <time_set_mode+0x80>
		printf("t_position 0 \r\n");
 8000b4e:	48aa      	ldr	r0, [pc, #680]	; (8000df8 <time_set_mode+0x2c0>)
 8000b50:	f007 fe16 	bl	8008780 <puts>
		switch (t_button) {
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d02a      	beq.n	8000bb0 <time_set_mode+0x78>
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	f300 8140 	bgt.w	8000de0 <time_set_mode+0x2a8>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d002      	beq.n	8000b6a <time_set_mode+0x32>
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d01f      	beq.n	8000ba8 <time_set_mode+0x70>
			break;
		case LEFT:
			t_position = 3;
			break;
		default:
			break;
 8000b68:	e13a      	b.n	8000de0 <time_set_mode+0x2a8>
			if (stime.hours >= 12) {
 8000b6a:	4ba4      	ldr	r3, [pc, #656]	; (8000dfc <time_set_mode+0x2c4>)
 8000b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b70:	2b0b      	cmp	r3, #11
 8000b72:	dd0c      	ble.n	8000b8e <time_set_mode+0x56>
				stime.hours -= 12;
 8000b74:	4ba1      	ldr	r3, [pc, #644]	; (8000dfc <time_set_mode+0x2c4>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3b0c      	subs	r3, #12
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	4b9e      	ldr	r3, [pc, #632]	; (8000dfc <time_set_mode+0x2c4>)
 8000b84:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 0;
 8000b86:	4b9e      	ldr	r3, [pc, #632]	; (8000e00 <time_set_mode+0x2c8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	70da      	strb	r2, [r3, #3]
			break;
 8000b8c:	e14d      	b.n	8000e2a <time_set_mode+0x2f2>
				stime.hours += 12;
 8000b8e:	4b9b      	ldr	r3, [pc, #620]	; (8000dfc <time_set_mode+0x2c4>)
 8000b90:	f993 3000 	ldrsb.w	r3, [r3]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	330c      	adds	r3, #12
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	b25a      	sxtb	r2, r3
 8000b9c:	4b97      	ldr	r3, [pc, #604]	; (8000dfc <time_set_mode+0x2c4>)
 8000b9e:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 1;
 8000ba0:	4b97      	ldr	r3, [pc, #604]	; (8000e00 <time_set_mode+0x2c8>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	70da      	strb	r2, [r3, #3]
			break;
 8000ba6:	e140      	b.n	8000e2a <time_set_mode+0x2f2>
			t_position = 1;
 8000ba8:	4b92      	ldr	r3, [pc, #584]	; (8000df4 <time_set_mode+0x2bc>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
			break;
 8000bae:	e13c      	b.n	8000e2a <time_set_mode+0x2f2>
			t_position = 3;
 8000bb0:	4b90      	ldr	r3, [pc, #576]	; (8000df4 <time_set_mode+0x2bc>)
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	601a      	str	r2, [r3, #0]
			break;
 8000bb6:	e138      	b.n	8000e2a <time_set_mode+0x2f2>
		}
	} else if (t_position == 1) {
 8000bb8:	4b8e      	ldr	r3, [pc, #568]	; (8000df4 <time_set_mode+0x2bc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d144      	bne.n	8000c4a <time_set_mode+0x112>
		printf("t_position 1 \r\n");
 8000bc0:	4890      	ldr	r0, [pc, #576]	; (8000e04 <time_set_mode+0x2cc>)
 8000bc2:	f007 fddd 	bl	8008780 <puts>
		switch (t_button) {
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	f200 810a 	bhi.w	8000de4 <time_set_mode+0x2ac>
 8000bd0:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <time_set_mode+0xa0>)
 8000bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd6:	bf00      	nop
 8000bd8:	08000bf9 	.word	0x08000bf9
 8000bdc:	08000c25 	.word	0x08000c25
 8000be0:	08000be9 	.word	0x08000be9
 8000be4:	08000bf1 	.word	0x08000bf1
		case RIGHT:
			t_position = 2;
 8000be8:	4b82      	ldr	r3, [pc, #520]	; (8000df4 <time_set_mode+0x2bc>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	601a      	str	r2, [r3, #0]
			break;
 8000bee:	e11c      	b.n	8000e2a <time_set_mode+0x2f2>
		case LEFT:
			t_position = 0;
 8000bf0:	4b80      	ldr	r3, [pc, #512]	; (8000df4 <time_set_mode+0x2bc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
			break;
 8000bf6:	e118      	b.n	8000e2a <time_set_mode+0x2f2>
		case UP:
			stime.hours++;
 8000bf8:	4b80      	ldr	r3, [pc, #512]	; (8000dfc <time_set_mode+0x2c4>)
 8000bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	3301      	adds	r3, #1
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	b25a      	sxtb	r2, r3
 8000c06:	4b7d      	ldr	r3, [pc, #500]	; (8000dfc <time_set_mode+0x2c4>)
 8000c08:	701a      	strb	r2, [r3, #0]
			if (stime.hours >= 12) {
 8000c0a:	4b7c      	ldr	r3, [pc, #496]	; (8000dfc <time_set_mode+0x2c4>)
 8000c0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c10:	2b0b      	cmp	r3, #11
 8000c12:	f340 80e9 	ble.w	8000de8 <time_set_mode+0x2b0>
				stime.hours = 0;
 8000c16:	4b79      	ldr	r3, [pc, #484]	; (8000dfc <time_set_mode+0x2c4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
				RTC_Time.TimeFormat = 0;
 8000c1c:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <time_set_mode+0x2c8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	70da      	strb	r2, [r3, #3]
			}
			break;
 8000c22:	e0e1      	b.n	8000de8 <time_set_mode+0x2b0>
		case DOWN:
			stime.hours--;
 8000c24:	4b75      	ldr	r3, [pc, #468]	; (8000dfc <time_set_mode+0x2c4>)
 8000c26:	f993 3000 	ldrsb.w	r3, [r3]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	b25a      	sxtb	r2, r3
 8000c32:	4b72      	ldr	r3, [pc, #456]	; (8000dfc <time_set_mode+0x2c4>)
 8000c34:	701a      	strb	r2, [r3, #0]
			if (stime.hours < 0) {
 8000c36:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <time_set_mode+0x2c4>)
 8000c38:	f993 3000 	ldrsb.w	r3, [r3]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f280 80d1 	bge.w	8000de4 <time_set_mode+0x2ac>
				stime.hours = 11;
 8000c42:	4b6e      	ldr	r3, [pc, #440]	; (8000dfc <time_set_mode+0x2c4>)
 8000c44:	220b      	movs	r2, #11
 8000c46:	701a      	strb	r2, [r3, #0]
			}
		default:
			break;
 8000c48:	e0cc      	b.n	8000de4 <time_set_mode+0x2ac>
		}

	} else if (t_position == 2) {
 8000c4a:	4b6a      	ldr	r3, [pc, #424]	; (8000df4 <time_set_mode+0x2bc>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d13f      	bne.n	8000cd2 <time_set_mode+0x19a>
		printf("t_position 2 \r\n");
 8000c52:	486d      	ldr	r0, [pc, #436]	; (8000e08 <time_set_mode+0x2d0>)
 8000c54:	f007 fd94 	bl	8008780 <puts>
		switch (t_button) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	f200 80c5 	bhi.w	8000dec <time_set_mode+0x2b4>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <time_set_mode+0x130>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c87 	.word	0x08000c87
 8000c6c:	08000cad 	.word	0x08000cad
 8000c70:	08000c79 	.word	0x08000c79
 8000c74:	08000c81 	.word	0x08000c81
		case RIGHT:
			t_position = 3;
 8000c78:	4b5e      	ldr	r3, [pc, #376]	; (8000df4 <time_set_mode+0x2bc>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	601a      	str	r2, [r3, #0]
			break;
 8000c7e:	e0d4      	b.n	8000e2a <time_set_mode+0x2f2>
		case LEFT:
			t_position = 1;
 8000c80:	4b5c      	ldr	r3, [pc, #368]	; (8000df4 <time_set_mode+0x2bc>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
		case UP:
			stime.minutes++;
 8000c86:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <time_set_mode+0x2c4>)
 8000c88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	3301      	adds	r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <time_set_mode+0x2c4>)
 8000c96:	705a      	strb	r2, [r3, #1]
			if (stime.minutes >= 60) {
 8000c98:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <time_set_mode+0x2c4>)
 8000c9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c9e:	2b3b      	cmp	r3, #59	; 0x3b
 8000ca0:	f340 80a6 	ble.w	8000df0 <time_set_mode+0x2b8>
				stime.minutes = 0;
 8000ca4:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <time_set_mode+0x2c4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	705a      	strb	r2, [r3, #1]
			}
			break;
 8000caa:	e0a1      	b.n	8000df0 <time_set_mode+0x2b8>
		case DOWN:
			stime.minutes--;
 8000cac:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <time_set_mode+0x2c4>)
 8000cae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	b25a      	sxtb	r2, r3
 8000cba:	4b50      	ldr	r3, [pc, #320]	; (8000dfc <time_set_mode+0x2c4>)
 8000cbc:	705a      	strb	r2, [r3, #1]
			if (stime.minutes < 0) {
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	; (8000dfc <time_set_mode+0x2c4>)
 8000cc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f280 8091 	bge.w	8000dec <time_set_mode+0x2b4>
				stime.minutes = 59;
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <time_set_mode+0x2c4>)
 8000ccc:	223b      	movs	r2, #59	; 0x3b
 8000cce:	705a      	strb	r2, [r3, #1]
			}
		default:
			break;
 8000cd0:	e08c      	b.n	8000dec <time_set_mode+0x2b4>
		}
	} else if (t_position == 3) {
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <time_set_mode+0x2bc>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	f040 80a7 	bne.w	8000e2a <time_set_mode+0x2f2>
		printf("t_position 3 \r\n");
 8000cdc:	484b      	ldr	r0, [pc, #300]	; (8000e0c <time_set_mode+0x2d4>)
 8000cde:	f007 fd4f 	bl	8008780 <puts>
		switch (t_button) {
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	f200 809a 	bhi.w	8000e20 <time_set_mode+0x2e8>
 8000cec:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <time_set_mode+0x1bc>)
 8000cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf2:	bf00      	nop
 8000cf4:	08000d99 	.word	0x08000d99
 8000cf8:	08000dbd 	.word	0x08000dbd
 8000cfc:	08000d05 	.word	0x08000d05
 8000d00:	08000d91 	.word	0x08000d91
		case RIGHT:
			ctime.hours = stime.hours;
 8000d04:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <time_set_mode+0x2c4>)
 8000d06:	f993 2000 	ldrsb.w	r2, [r3]
 8000d0a:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <time_set_mode+0x2d8>)
 8000d0c:	701a      	strb	r2, [r3, #0]
			ctime.minutes = stime.minutes;
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <time_set_mode+0x2c4>)
 8000d10:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000d14:	4b3e      	ldr	r3, [pc, #248]	; (8000e10 <time_set_mode+0x2d8>)
 8000d16:	705a      	strb	r2, [r3, #1]
			ctime.seconds = stime.seconds;
 8000d18:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <time_set_mode+0x2c4>)
 8000d1a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000d1e:	4b3c      	ldr	r3, [pc, #240]	; (8000e10 <time_set_mode+0x2d8>)
 8000d20:	709a      	strb	r2, [r3, #2]

			default_nvitem.setting_time.hours = stime.hours;
 8000d22:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <time_set_mode+0x2c4>)
 8000d24:	f993 2000 	ldrsb.w	r2, [r3]
 8000d28:	4b3a      	ldr	r3, [pc, #232]	; (8000e14 <time_set_mode+0x2dc>)
 8000d2a:	701a      	strb	r2, [r3, #0]
			default_nvitem.setting_time.minutes = stime.minutes;
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <time_set_mode+0x2c4>)
 8000d2e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8000d32:	4b38      	ldr	r3, [pc, #224]	; (8000e14 <time_set_mode+0x2dc>)
 8000d34:	705a      	strb	r2, [r3, #1]
			default_nvitem.setting_time.seconds = stime.seconds;
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <time_set_mode+0x2c4>)
 8000d38:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8000d3c:	4b35      	ldr	r3, [pc, #212]	; (8000e14 <time_set_mode+0x2dc>)
 8000d3e:	709a      	strb	r2, [r3, #2]

//			RTC_Time.Hours = ctime.hours;
//			RTC_Time.Minutes = ctime.minutes;
//			RTC_Time.Seconds = ctime.seconds;

			RTC_Time.Hours = default_nvitem.setting_time.hours;
 8000d40:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <time_set_mode+0x2dc>)
 8000d42:	f993 3000 	ldrsb.w	r3, [r3]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <time_set_mode+0x2c8>)
 8000d4a:	701a      	strb	r2, [r3, #0]
			RTC_Time.Minutes = default_nvitem.setting_time.minutes;
 8000d4c:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <time_set_mode+0x2dc>)
 8000d4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <time_set_mode+0x2c8>)
 8000d56:	705a      	strb	r2, [r3, #1]
			RTC_Time.Seconds = default_nvitem.setting_time.seconds;
 8000d58:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <time_set_mode+0x2dc>)
 8000d5a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <time_set_mode+0x2c8>)
 8000d62:	709a      	strb	r2, [r3, #2]
			RTC_Time.Hours %= 12;
 8000d64:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <time_set_mode+0x2c8>)
 8000d66:	781a      	ldrb	r2, [r3, #0]
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <time_set_mode+0x2e0>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	08d9      	lsrs	r1, r3, #3
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <time_set_mode+0x2c8>)
 8000d7e:	701a      	strb	r2, [r3, #0]

			update_nvitems();
 8000d80:	f7ff fdaa 	bl	80008d8 <update_nvitems>

			lcd_clear();
 8000d84:	f7ff fd92 	bl	80008ac <lcd_clear>
			current_state.mode = NORMAL_STATE;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <time_set_mode+0x2e4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
			break;
 8000d8e:	e04c      	b.n	8000e2a <time_set_mode+0x2f2>
		case LEFT:
			t_position = 2;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <time_set_mode+0x2bc>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	601a      	str	r2, [r3, #0]
			break;
 8000d96:	e048      	b.n	8000e2a <time_set_mode+0x2f2>
		case UP:
			stime.seconds++;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <time_set_mode+0x2c4>)
 8000d9a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	3301      	adds	r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	b25a      	sxtb	r2, r3
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <time_set_mode+0x2c4>)
 8000da8:	709a      	strb	r2, [r3, #2]
			if (stime.seconds >= 60) {
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <time_set_mode+0x2c4>)
 8000dac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000db0:	2b3b      	cmp	r3, #59	; 0x3b
 8000db2:	dd37      	ble.n	8000e24 <time_set_mode+0x2ec>
				stime.seconds = 0;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <time_set_mode+0x2c4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000dba:	e033      	b.n	8000e24 <time_set_mode+0x2ec>
		case DOWN:
			stime.seconds--;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <time_set_mode+0x2c4>)
 8000dbe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <time_set_mode+0x2c4>)
 8000dcc:	709a      	strb	r2, [r3, #2]
			if (stime.seconds < 0) {
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <time_set_mode+0x2c4>)
 8000dd0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	da27      	bge.n	8000e28 <time_set_mode+0x2f0>
				stime.seconds = 59;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <time_set_mode+0x2c4>)
 8000dda:	223b      	movs	r2, #59	; 0x3b
 8000ddc:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000dde:	e023      	b.n	8000e28 <time_set_mode+0x2f0>
			break;
 8000de0:	bf00      	nop
 8000de2:	e022      	b.n	8000e2a <time_set_mode+0x2f2>
			break;
 8000de4:	bf00      	nop
 8000de6:	e020      	b.n	8000e2a <time_set_mode+0x2f2>
			break;
 8000de8:	bf00      	nop
 8000dea:	e01e      	b.n	8000e2a <time_set_mode+0x2f2>
			break;
 8000dec:	bf00      	nop
 8000dee:	e01c      	b.n	8000e2a <time_set_mode+0x2f2>
			break;
 8000df0:	bf00      	nop
 8000df2:	e01a      	b.n	8000e2a <time_set_mode+0x2f2>
 8000df4:	20000988 	.word	0x20000988
 8000df8:	080099c8 	.word	0x080099c8
 8000dfc:	200009d4 	.word	0x200009d4
 8000e00:	200009e0 	.word	0x200009e0
 8000e04:	080099d8 	.word	0x080099d8
 8000e08:	080099e8 	.word	0x080099e8
 8000e0c:	080099f8 	.word	0x080099f8
 8000e10:	200009d0 	.word	0x200009d0
 8000e14:	2000008c 	.word	0x2000008c
 8000e18:	aaaaaaab 	.word	0xaaaaaaab
 8000e1c:	200009cc 	.word	0x200009cc
		default:
			break;
 8000e20:	bf00      	nop
 8000e22:	e002      	b.n	8000e2a <time_set_mode+0x2f2>
			break;
 8000e24:	bf00      	nop
 8000e26:	e000      	b.n	8000e2a <time_set_mode+0x2f2>
			break;
 8000e28:	bf00      	nop

		}
	}
	timeDisplay();
 8000e2a:	f7ff fdd1 	bl	80009d0 <timeDisplay>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop

08000e38 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e3e:	f001 f849 	bl	8001ed4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e42:	f000 f86f 	bl	8000f24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e46:	f000 fb0d 	bl	8001464 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e4a:	f000 faeb 	bl	8001424 <MX_DMA_Init>
	MX_ETH_Init();
 8000e4e:	f000 f959 	bl	8001104 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000e52:	f000 fa8f 	bl	8001374 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000e56:	f000 fab7 	bl	80013c8 <MX_USB_OTG_FS_PCD_Init>
	MX_ADC1_Init();
 8000e5a:	f000 f8f3 	bl	8001044 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000e5e:	f000 f99f 	bl	80011a0 <MX_I2C1_Init>
	MX_RTC_Init();
 8000e62:	f000 f9dd 	bl	8001220 <MX_RTC_Init>
	MX_TIM3_Init();
 8000e66:	f000 fa37 	bl	80012d8 <MX_TIM3_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000e6a:	f000 f8c7 	bl	8000ffc <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, xy, 2);
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4922      	ldr	r1, [pc, #136]	; (8000efc <main+0xc4>)
 8000e72:	4823      	ldr	r0, [pc, #140]	; (8000f00 <main+0xc8>)
 8000e74:	f001 fa18 	bl	80022a8 <HAL_ADC_Start_DMA>
	//	HAL_ADC_Start_IT(&hadc1);
	HAL_TIM_Base_Start_IT(&htim3);
 8000e78:	4822      	ldr	r0, [pc, #136]	; (8000f04 <main+0xcc>)
 8000e7a:	f005 fc11 	bl	80066a0 <HAL_TIM_Base_Start_IT>
	init();
 8000e7e:	f7ff fcaa 	bl	80007d6 <init>

	current_state.mode = NORMAL_STATE;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <main+0xd0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]


	RTC_Time.Hours = readFlash(FLASH_USER_START_ADDR);
 8000e88:	4820      	ldr	r0, [pc, #128]	; (8000f0c <main+0xd4>)
 8000e8a:	f7ff fd17 	bl	80008bc <readFlash>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <main+0xd8>)
 8000e94:	701a      	strb	r2, [r3, #0]
	RTC_Time.Minutes = readFlash(FLASH_USER_START_ADDR + 1);
 8000e96:	481f      	ldr	r0, [pc, #124]	; (8000f14 <main+0xdc>)
 8000e98:	f7ff fd10 	bl	80008bc <readFlash>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <main+0xd8>)
 8000ea2:	705a      	strb	r2, [r3, #1]
	RTC_Time.Seconds = readFlash(FLASH_USER_START_ADDR + 2);
 8000ea4:	481c      	ldr	r0, [pc, #112]	; (8000f18 <main+0xe0>)
 8000ea6:	f7ff fd09 	bl	80008bc <readFlash>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <main+0xd8>)
 8000eb0:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4916      	ldr	r1, [pc, #88]	; (8000f10 <main+0xd8>)
 8000eb6:	4819      	ldr	r0, [pc, #100]	; (8000f1c <main+0xe4>)
 8000eb8:	f005 f91a 	bl	80060f0 <HAL_RTC_SetTime>

	printf("first time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Hours,
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <main+0xd8>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <main+0xd8>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
			RTC_Time.Hours);
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <main+0xd8>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
	printf("first time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Hours,
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <main+0xe8>)
 8000ece:	f007 fbf1 	bl	80086b4 <iprintf>
#if 1

//		printf("Second time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Hours,
//				RTC_Time.Hours);

		if (current_state.mode == NORMAL_STATE) {
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <main+0xd0>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d104      	bne.n	8000ee4 <main+0xac>
			get_time();
 8000eda:	f7ff fc9b 	bl	8000814 <get_time>
			showCurrentTime();
 8000ede:	f7ff fccd 	bl	800087c <showCurrentTime>
 8000ee2:	e7f6      	b.n	8000ed2 <main+0x9a>
//			printf("in normal time: %d : %d : %d \r\n", RTC_Time.Hours, RTC_Time.Minutes, RTC_Time.Seconds);
		} else if (current_state.mode == TIME_SETTING) {
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <main+0xd0>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d1f2      	bne.n	8000ed2 <main+0x9a>
			time_set_mode();// after time setting, writing the time set at flash
 8000eec:	f7ff fe24 	bl	8000b38 <time_set_mode>
//			RTC_Time.Minutes = readFlash(FLASH_USER_START_ADDR + 1);
//			RTC_Time.Seconds = readFlash(FLASH_USER_START_ADDR + 2);
//
//			printf("second rtc time: %d : %d : %d \r\n", RTC_Time.Hours,
//					RTC_Time.Minutes, RTC_Time.Seconds);
			HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BIN);		// RTC reset
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4907      	ldr	r1, [pc, #28]	; (8000f10 <main+0xd8>)
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <main+0xe4>)
 8000ef6:	f005 f8fb 	bl	80060f0 <HAL_RTC_SetTime>
		if (current_state.mode == NORMAL_STATE) {
 8000efa:	e7ea      	b.n	8000ed2 <main+0x9a>
 8000efc:	20000970 	.word	0x20000970
 8000f00:	2000020c 	.word	0x2000020c
 8000f04:	200003d8 	.word	0x200003d8
 8000f08:	200009cc 	.word	0x200009cc
 8000f0c:	081c0000 	.word	0x081c0000
 8000f10:	200009e0 	.word	0x200009e0
 8000f14:	081c0001 	.word	0x081c0001
 8000f18:	081c0002 	.word	0x081c0002
 8000f1c:	200003b8 	.word	0x200003b8
 8000f20:	08009a08 	.word	0x08009a08

08000f24 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b094      	sub	sp, #80	; 0x50
 8000f28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	2230      	movs	r2, #48	; 0x30
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f007 fd58 	bl	80089e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a28      	ldr	r2, [pc, #160]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <SystemClock_Config+0xd0>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <SystemClock_Config+0xd4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <SystemClock_Config+0xd4>)
 8000f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <SystemClock_Config+0xd4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 8000f80:	2305      	movs	r3, #5
 8000f82:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f96:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000f9c:	23a8      	movs	r3, #168	; 0xa8
 8000f9e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fa8:	f107 0320 	add.w	r3, r7, #32
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 f9d1 	bl	8005354 <HAL_RCC_OscConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0x98>
		Error_Handler();
 8000fb8:	f000 fba8 	bl	800170c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fcc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2105      	movs	r1, #5
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f004 fc32 	bl	8005844 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0xc6>
		Error_Handler();
 8000fe6:	f000 fb91 	bl	800170c <Error_Handler>
	}
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* USART3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2027      	movs	r0, #39	; 0x27
 8001006:	f001 fe1c 	bl	8002c42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 800100a:	2027      	movs	r0, #39	; 0x27
 800100c:	f001 fe35 	bl	8002c7a <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	2028      	movs	r0, #40	; 0x28
 8001016:	f001 fe14 	bl	8002c42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800101a:	2028      	movs	r0, #40	; 0x28
 800101c:	f001 fe2d 	bl	8002c7a <HAL_NVIC_EnableIRQ>
	/* TIM3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	201d      	movs	r0, #29
 8001026:	f001 fe0c 	bl	8002c42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800102a:	201d      	movs	r0, #29
 800102c:	f001 fe25 	bl	8002c7a <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2012      	movs	r0, #18
 8001036:	f001 fe04 	bl	8002c42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800103a:	2012      	movs	r0, #18
 800103c:	f001 fe1d 	bl	8002c7a <HAL_NVIC_EnableIRQ>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001058:	4a29      	ldr	r2, [pc, #164]	; (8001100 <MX_ADC1_Init+0xbc>)
 800105a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_ADC1_Init+0xb8>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_ADC1_Init+0xb8>)
 800106c:	2201      	movs	r2, #1
 800106e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001072:	2201      	movs	r2, #1
 8001074:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC1_Init+0xb8>)
 8001096:	2202      	movs	r2, #2
 8001098:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_ADC1_Init+0xb8>)
 800109c:	2201      	movs	r2, #1
 800109e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010aa:	f000 ffa9 	bl	8002000 <HAL_ADC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0x74>
		Error_Handler();
 80010b4:	f000 fb2a 	bl	800170c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80010b8:	230a      	movs	r3, #10
 80010ba:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80010c0:	2304      	movs	r3, #4
 80010c2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010ca:	f001 fa25 	bl	8002518 <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0x94>
		Error_Handler();
 80010d4:	f000 fb1a 	bl	800170c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80010d8:	230d      	movs	r3, #13
 80010da:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80010dc:	2302      	movs	r3, #2
 80010de:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_ADC1_Init+0xb8>)
 80010e6:	f001 fa17 	bl	8002518 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0xb0>
		Error_Handler();
 80010f0:	f000 fb0c 	bl	800170c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000020c 	.word	0x2000020c
 8001100:	40012000 	.word	0x40012000

08001104 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_ETH_Init+0x84>)
 800110a:	4a20      	ldr	r2, [pc, #128]	; (800118c <MX_ETH_Init+0x88>)
 800110c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_ETH_Init+0x8c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_ETH_Init+0x8c>)
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_ETH_Init+0x8c>)
 800111c:	22e1      	movs	r2, #225	; 0xe1
 800111e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_ETH_Init+0x8c>)
 8001122:	2200      	movs	r2, #0
 8001124:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_ETH_Init+0x8c>)
 8001128:	2200      	movs	r2, #0
 800112a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_ETH_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_ETH_Init+0x84>)
 8001134:	4a16      	ldr	r2, [pc, #88]	; (8001190 <MX_ETH_Init+0x8c>)
 8001136:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_ETH_Init+0x84>)
 800113a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800113e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_ETH_Init+0x84>)
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <MX_ETH_Init+0x90>)
 8001144:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_ETH_Init+0x84>)
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <MX_ETH_Init+0x94>)
 800114a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_ETH_Init+0x84>)
 800114e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001152:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <MX_ETH_Init+0x84>)
 8001156:	f002 f9ad 	bl	80034b4 <HAL_ETH_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ETH_Init+0x60>
		Error_Handler();
 8001160:	f000 fad4 	bl	800170c <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001164:	2238      	movs	r2, #56	; 0x38
 8001166:	2100      	movs	r1, #0
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_ETH_Init+0x98>)
 800116a:	f007 fc3d 	bl	80089e8 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_ETH_Init+0x98>)
 8001170:	2221      	movs	r2, #33	; 0x21
 8001172:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_ETH_Init+0x98>)
 8001176:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800117a:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <MX_ETH_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200002b4 	.word	0x200002b4
 800118c:	40028000 	.word	0x40028000
 8001190:	200009f4 	.word	0x200009f4
 8001194:	2000016c 	.word	0x2000016c
 8001198:	200000cc 	.word	0x200000cc
 800119c:	20000094 	.word	0x20000094

080011a0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <MX_I2C1_Init+0x74>)
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <MX_I2C1_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_I2C1_Init+0x74>)
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <MX_I2C1_Init+0x7c>)
 80011ae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_I2C1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_I2C1_Init+0x74>)
 80011be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_I2C1_Init+0x74>)
 80011de:	f003 f9a7 	bl	8004530 <HAL_I2C_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011e8:	f000 fa90 	bl	800170c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80011ec:	2100      	movs	r1, #0
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <MX_I2C1_Init+0x74>)
 80011f0:	f003 ff17 	bl	8005022 <HAL_I2CEx_ConfigAnalogFilter>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80011fa:	f000 fa87 	bl	800170c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80011fe:	2100      	movs	r1, #0
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2C1_Init+0x74>)
 8001202:	f003 ff4a 	bl	800509a <HAL_I2CEx_ConfigDigitalFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x70>
		Error_Handler();
 800120c:	f000 fa7e 	bl	800170c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000364 	.word	0x20000364
 8001218:	40005400 	.word	0x40005400
 800121c:	000186a0 	.word	0x000186a0

08001220 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <MX_RTC_Init+0xb0>)
 800123a:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <MX_RTC_Init+0xb4>)
 800123c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <MX_RTC_Init+0xb0>)
 8001240:	2240      	movs	r2, #64	; 0x40
 8001242:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <MX_RTC_Init+0xb0>)
 8001246:	227f      	movs	r2, #127	; 0x7f
 8001248:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_RTC_Init+0xb0>)
 800124c:	22ff      	movs	r2, #255	; 0xff
 800124e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_RTC_Init+0xb0>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_RTC_Init+0xb0>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_RTC_Init+0xb0>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001262:	481b      	ldr	r0, [pc, #108]	; (80012d0 <MX_RTC_Init+0xb0>)
 8001264:	f004 fece 	bl	8006004 <HAL_RTC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_RTC_Init+0x52>
		Error_Handler();
 800126e:	f000 fa4d 	bl	800170c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001276:	2300      	movs	r3, #0
 8001278:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800127a:	2300      	movs	r3, #0
 800127c:	71bb      	strb	r3, [r7, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2201      	movs	r2, #1
 800128e:	4619      	mov	r1, r3
 8001290:	480f      	ldr	r0, [pc, #60]	; (80012d0 <MX_RTC_Init+0xb0>)
 8001292:	f004 ff2d 	bl	80060f0 <HAL_RTC_SetTime>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_RTC_Init+0x80>
		Error_Handler();
 800129c:	f000 fa36 	bl	800170c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80012a0:	2305      	movs	r3, #5
 80012a2:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_NOVEMBER;
 80012a4:	2311      	movs	r3, #17
 80012a6:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x10;
 80012a8:	2310      	movs	r3, #16
 80012aa:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 80012ac:	2323      	movs	r3, #35	; 0x23
 80012ae:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80012b0:	463b      	mov	r3, r7
 80012b2:	2201      	movs	r2, #1
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_RTC_Init+0xb0>)
 80012b8:	f005 f812 	bl	80062e0 <HAL_RTC_SetDate>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_RTC_Init+0xa6>
		Error_Handler();
 80012c2:	f000 fa23 	bl	800170c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200003b8 	.word	0x200003b8
 80012d4:	40002800 	.word	0x40002800

080012d8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM3_Init+0x94>)
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <MX_TIM3_Init+0x98>)
 80012f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10000;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_TIM3_Init+0x94>)
 80012fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001300:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM3_Init+0x94>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 900;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM3_Init+0x94>)
 800130a:	f44f 7261 	mov.w	r2, #900	; 0x384
 800130e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM3_Init+0x94>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM3_Init+0x94>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM3_Init+0x94>)
 800131e:	f005 f96f 	bl	8006600 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x54>
		Error_Handler();
 8001328:	f000 f9f0 	bl	800170c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001330:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <MX_TIM3_Init+0x94>)
 800133a:	f005 fb29 	bl	8006990 <HAL_TIM_ConfigClockSource>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001344:	f000 f9e2 	bl	800170c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001348:	2320      	movs	r3, #32
 800134a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_TIM3_Init+0x94>)
 8001356:	f005 fd45 	bl	8006de4 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001360:	f000 f9d4 	bl	800170c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003d8 	.word	0x200003d8
 8001370:	40000400 	.word	0x40000400

08001374 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_USART3_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013ac:	f005 fdaa 	bl	8006f04 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80013b6:	f000 f9a9 	bl	800170c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000420 	.word	0x20000420
 80013c4:	40004800 	.word	0x40004800

080013c8 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013d2:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d6:	2204      	movs	r2, #4
 80013d8:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013dc:	2202      	movs	r2, #2
 80013de:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001400:	2201      	movs	r2, #1
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140c:	f003 fe84 	bl	8005118 <HAL_PCD_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 8001416:	f000 f979 	bl	800170c <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000464 	.word	0x20000464

08001424 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_DMA_Init+0x3c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <MX_DMA_Init+0x3c>)
 8001434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_DMA_Init+0x3c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2038      	movs	r0, #56	; 0x38
 800144c:	f001 fbf9 	bl	8002c42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001450:	2038      	movs	r0, #56	; 0x38
 8001452:	f001 fc12 	bl	8002c7a <HAL_NVIC_EnableIRQ>

}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <MX_GPIO_Init+0x190>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <MX_GPIO_Init+0x190>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <MX_GPIO_Init+0x190>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	4b56      	ldr	r3, [pc, #344]	; (80015f4 <MX_GPIO_Init+0x190>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a40      	ldr	r2, [pc, #256]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <MX_GPIO_Init+0x190>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <MX_GPIO_Init+0x190>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a39      	ldr	r2, [pc, #228]	; (80015f4 <MX_GPIO_Init+0x190>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <MX_GPIO_Init+0x190>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <MX_GPIO_Init+0x190>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <MX_GPIO_Init+0x190>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <MX_GPIO_Init+0x190>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f244 0181 	movw	r1, #16513	; 0x4081
 8001544:	482c      	ldr	r0, [pc, #176]	; (80015f8 <MX_GPIO_Init+0x194>)
 8001546:	f002 ffa7 	bl	8004498 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800154a:	2200      	movs	r2, #0
 800154c:	2140      	movs	r1, #64	; 0x40
 800154e:	482b      	ldr	r0, [pc, #172]	; (80015fc <MX_GPIO_Init+0x198>)
 8001550:	f002 ffa2 	bl	8004498 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800155a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800155e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4825      	ldr	r0, [pc, #148]	; (8001600 <MX_GPIO_Init+0x19c>)
 800156c:	f002 fdd0 	bl	8004110 <HAL_GPIO_Init>

	/*Configure GPIO pin : Joy_btn_Pin */
	GPIO_InitStruct.Pin = Joy_btn_Pin;
 8001570:	2308      	movs	r3, #8
 8001572:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001574:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001578:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	2301      	movs	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Joy_btn_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	481f      	ldr	r0, [pc, #124]	; (8001604 <MX_GPIO_Init+0x1a0>)
 8001586:	f002 fdc3 	bl	8004110 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800158a:	f244 0381 	movw	r3, #16513	; 0x4081
 800158e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4815      	ldr	r0, [pc, #84]	; (80015f8 <MX_GPIO_Init+0x194>)
 80015a4:	f002 fdb4 	bl	8004110 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015a8:	2340      	movs	r3, #64	; 0x40
 80015aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	480f      	ldr	r0, [pc, #60]	; (80015fc <MX_GPIO_Init+0x198>)
 80015c0:	f002 fda6 	bl	8004110 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4809      	ldr	r0, [pc, #36]	; (80015fc <MX_GPIO_Init+0x198>)
 80015d8:	f002 fd9a 	bl	8004110 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2009      	movs	r0, #9
 80015e2:	f001 fb2e 	bl	8002c42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015e6:	2009      	movs	r0, #9
 80015e8:	f001 fb47 	bl	8002c7a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80015ec:	bf00      	nop
 80015ee:	3730      	adds	r7, #48	; 0x30
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400
 80015fc:	40021800 	.word	0x40021800
 8001600:	40020800 	.word	0x40020800
 8001604:	40021400 	.word	0x40021400

08001608 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d161      	bne.n	80016dc <HAL_GPIO_EXTI_Callback+0xd4>
		// joystick sw test OK!
		//	  btn_cnt++;
		//	  printf("cnt = %d\r\n", btn_cnt);
		//		printf("test interval=%d\r\n", interval);
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001618:	2101      	movs	r1, #1
 800161a:	4832      	ldr	r0, [pc, #200]	; (80016e4 <HAL_GPIO_EXTI_Callback+0xdc>)
 800161c:	f002 ff55 	bl	80044ca <HAL_GPIO_TogglePin>
		current_time = HAL_GetTick();
 8001620:	f000 fcbe 	bl	8001fa0 <HAL_GetTick>
 8001624:	4603      	mov	r3, r0
 8001626:	4a30      	ldr	r2, [pc, #192]	; (80016e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001628:	6013      	str	r3, [r2, #0]
		interval = current_time - last_time;
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_GPIO_EXTI_Callback+0xe4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001636:	6013      	str	r3, [r2, #0]
		last_time = current_time;
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a2b      	ldr	r2, [pc, #172]	; (80016ec <HAL_GPIO_EXTI_Callback+0xe4>)
 800163e:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3) == 1) {
 8001640:	2108      	movs	r1, #8
 8001642:	482c      	ldr	r0, [pc, #176]	; (80016f4 <HAL_GPIO_EXTI_Callback+0xec>)
 8001644:	f002 ff10 	bl	8004468 <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	2b01      	cmp	r3, #1
 800164c:	d146      	bne.n	80016dc <HAL_GPIO_EXTI_Callback+0xd4>
			if (interval < 130) {
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b81      	cmp	r3, #129	; 0x81
 8001654:	d805      	bhi.n	8001662 <HAL_GPIO_EXTI_Callback+0x5a>
				btn_cnt += 3;
 8001656:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3303      	adds	r3, #3
 800165c:	4a26      	ldr	r2, [pc, #152]	; (80016f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	e02a      	b.n	80016b8 <HAL_GPIO_EXTI_Callback+0xb0>
			} else if (interval >= 130 && interval < 200) {
 8001662:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b81      	cmp	r3, #129	; 0x81
 8001668:	d910      	bls.n	800168c <HAL_GPIO_EXTI_Callback+0x84>
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2bc7      	cmp	r3, #199	; 0xc7
 8001670:	d80c      	bhi.n	800168c <HAL_GPIO_EXTI_Callback+0x84>
				printf("One click!!  interval = %u\r\n",
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4820      	ldr	r0, [pc, #128]	; (80016fc <HAL_GPIO_EXTI_Callback+0xf4>)
 800167a:	f007 f81b 	bl	80086b4 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
				current_state.mode = TIME_SETTING;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e015      	b.n	80016b8 <HAL_GPIO_EXTI_Callback+0xb0>
				//				time_set_mode();
			} else if (interval >= 300 && interval <= 1000) {
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001694:	d310      	bcc.n	80016b8 <HAL_GPIO_EXTI_Callback+0xb0>
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169e:	d80b      	bhi.n	80016b8 <HAL_GPIO_EXTI_Callback+0xb0>
				printf("Long click!!  interval = %u\r\n",
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4817      	ldr	r0, [pc, #92]	; (8001704 <HAL_GPIO_EXTI_Callback+0xfc>)
 80016a8:	f007 f804 	bl	80086b4 <iprintf>
						(unsigned int) interval);
				btn_cnt = 0;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
				current_state.mode = ALARM_TIME_SETTING;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_GPIO_EXTI_Callback+0xf8>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
				//				alarm_set_mode();
			}
			if (btn_cnt >= 5) {
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	dd0d      	ble.n	80016dc <HAL_GPIO_EXTI_Callback+0xd4>
				printf("Double click!!  interval = %u   btn_cnt = %d  \r\n",
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_GPIO_EXTI_Callback+0xe8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0c      	ldr	r2, [pc, #48]	; (80016f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <HAL_GPIO_EXTI_Callback+0x100>)
 80016cc:	f006 fff2 	bl	80086b4 <iprintf>
						(unsigned int) interval, btn_cnt);
				btn_cnt = 0;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_GPIO_EXTI_Callback+0xf0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
				current_state.mode = MUSIC_SELECT;
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_GPIO_EXTI_Callback+0xf8>)
 80016d8:	2203      	movs	r2, #3
 80016da:	701a      	strb	r2, [r3, #0]
			}
		}

	}

}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40020400 	.word	0x40020400
 80016e8:	20000978 	.word	0x20000978
 80016ec:	2000097c 	.word	0x2000097c
 80016f0:	20000980 	.word	0x20000980
 80016f4:	40021400 	.word	0x40021400
 80016f8:	20000984 	.word	0x20000984
 80016fc:	08009a24 	.word	0x08009a24
 8001700:	200009cc 	.word	0x200009cc
 8001704:	08009a44 	.word	0x08009a44
 8001708:	08009a64 	.word	0x08009a64

0800170c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_MspInit+0x4c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6453      	str	r3, [r2, #68]	; 0x44
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_MspInit+0x4c>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3c      	ldr	r2, [pc, #240]	; (8001878 <HAL_ADC_MspInit+0x110>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d171      	bne.n	800186e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_ADC_MspInit+0x114>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a3a      	ldr	r2, [pc, #232]	; (800187c <HAL_ADC_MspInit+0x114>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <HAL_ADC_MspInit+0x114>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_ADC_MspInit+0x114>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a33      	ldr	r2, [pc, #204]	; (800187c <HAL_ADC_MspInit+0x114>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_ADC_MspInit+0x114>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_ADC_MspInit+0x114>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a2c      	ldr	r2, [pc, #176]	; (800187c <HAL_ADC_MspInit+0x114>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_ADC_MspInit+0x114>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80017de:	2309      	movs	r3, #9
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e2:	2303      	movs	r3, #3
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <HAL_ADC_MspInit+0x118>)
 80017f2:	f002 fc8d 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f6:	2308      	movs	r3, #8
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fa:	2303      	movs	r3, #3
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	481e      	ldr	r0, [pc, #120]	; (8001884 <HAL_ADC_MspInit+0x11c>)
 800180a:	f002 fc81 	bl	8004110 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001810:	4a1e      	ldr	r2, [pc, #120]	; (800188c <HAL_ADC_MspInit+0x124>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_ADC_MspInit+0x120>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001834:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001838:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001844:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_ADC_MspInit+0x120>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001852:	480d      	ldr	r0, [pc, #52]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001854:	f001 fa2c 	bl	8002cb0 <HAL_DMA_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800185e:	f7ff ff55 	bl	800170c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a08      	ldr	r2, [pc, #32]	; (8001888 <HAL_ADC_MspInit+0x120>)
 8001866:	639a      	str	r2, [r3, #56]	; 0x38
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_ADC_MspInit+0x120>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40012000 	.word	0x40012000
 800187c:	40023800 	.word	0x40023800
 8001880:	40020800 	.word	0x40020800
 8001884:	40020000 	.word	0x40020000
 8001888:	20000254 	.word	0x20000254
 800188c:	40026410 	.word	0x40026410

08001890 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	; 0x38
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a55      	ldr	r2, [pc, #340]	; (8001a04 <HAL_ETH_MspInit+0x174>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	f040 80a4 	bne.w	80019fc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a44      	ldr	r2, [pc, #272]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a36      	ldr	r2, [pc, #216]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	6313      	str	r3, [r2, #48]	; 0x30
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 8001966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_ETH_MspInit+0x178>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001978:	2332      	movs	r3, #50	; 0x32
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001988:	230b      	movs	r3, #11
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001990:	4619      	mov	r1, r3
 8001992:	481e      	ldr	r0, [pc, #120]	; (8001a0c <HAL_ETH_MspInit+0x17c>)
 8001994:	f002 fbbc 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001998:	2386      	movs	r3, #134	; 0x86
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a8:	230b      	movs	r3, #11
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	4619      	mov	r1, r3
 80019b2:	4817      	ldr	r0, [pc, #92]	; (8001a10 <HAL_ETH_MspInit+0x180>)
 80019b4:	f002 fbac 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ca:	230b      	movs	r3, #11
 80019cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <HAL_ETH_MspInit+0x184>)
 80019d6:	f002 fb9b 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ec:	230b      	movs	r3, #11
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	4808      	ldr	r0, [pc, #32]	; (8001a18 <HAL_ETH_MspInit+0x188>)
 80019f8:	f002 fb8a 	bl	8004110 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3738      	adds	r7, #56	; 0x38
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40028000 	.word	0x40028000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40021800 	.word	0x40021800

08001a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_I2C_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12c      	bne.n	8001a98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_I2C_MspInit+0x88>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_I2C_MspInit+0x88>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_I2C_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <HAL_I2C_MspInit+0x8c>)
 8001a78:	f002 fb4a 	bl	8004110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_I2C_MspInit+0x88>)
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_I2C_MspInit+0x88>)
 8001a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_I2C_MspInit+0x88>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40005400 	.word	0x40005400
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020400 	.word	0x40020400

08001aac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	; 0x38
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	2230      	movs	r2, #48	; 0x30
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f006 ff93 	bl	80089e8 <memset>
  if(hrtc->Instance==RTC)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_RTC_MspInit+0x4c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001acc:	2320      	movs	r3, #32
 8001ace:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 f8d2 	bl	8005c84 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ae6:	f7ff fe11 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RTC_MspInit+0x50>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001af0:	bf00      	nop
 8001af2:	3738      	adds	r7, #56	; 0x38
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40002800 	.word	0x40002800
 8001afc:	42470e3c 	.word	0x42470e3c

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_TIM_Base_MspInit+0x3c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10d      	bne.n	8001b2e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_TIM_Base_MspInit+0x40>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a09      	ldr	r2, [pc, #36]	; (8001b40 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <HAL_TIM_Base_MspInit+0x40>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_UART_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12c      	bne.n	8001bc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_UART_MspInit+0x8c>)
 8001bbc:	f002 faa8 	bl	8004110 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	; 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40004800 	.word	0x40004800
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020c00 	.word	0x40020c00

08001bd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf4:	d13f      	bne.n	8001c76 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c24:	230a      	movs	r3, #10
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4815      	ldr	r0, [pc, #84]	; (8001c84 <HAL_PCD_MspInit+0xb0>)
 8001c30:	f002 fa6e 	bl	8004110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	480e      	ldr	r0, [pc, #56]	; (8001c84 <HAL_PCD_MspInit+0xb0>)
 8001c4a:	f002 fa61 	bl	8004110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c58:	6353      	str	r3, [r2, #52]	; 0x34
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_PCD_MspInit+0xac>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <NMI_Handler+0x4>

08001c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f000 f950 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Joy_btn_Pin);
 8001ce0:	2008      	movs	r0, #8
 8001ce2:	f002 fc0d 	bl	8004500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <ADC_IRQHandler+0x10>)
 8001cf2:	f000 f9c8 	bl	8002086 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000020c 	.word	0x2000020c

08001d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM3_IRQHandler+0x10>)
 8001d06:	f004 fd3b 	bl	8006780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200003d8 	.word	0x200003d8

08001d14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <USART3_IRQHandler+0x10>)
 8001d1a:	f005 f9d3 	bl	80070c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000420 	.word	0x20000420

08001d28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001d2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d30:	f002 fbe6 	bl	8004500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA2_Stream0_IRQHandler+0x10>)
 8001d3e:	f001 f94f 	bl	8002fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000254 	.word	0x20000254

08001d4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e00a      	b.n	8001d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d5e:	f3af 8000 	nop.w
 8001d62:	4601      	mov	r1, r0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	60ba      	str	r2, [r7, #8]
 8001d6a:	b2ca      	uxtb	r2, r1
 8001d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbf0      	blt.n	8001d5e <_read+0x12>
  }

  return len;
 8001d7c:	687b      	ldr	r3, [r7, #4]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dae:	605a      	str	r2, [r3, #4]
  return 0;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_isatty>:

int _isatty(int file)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df8:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <_sbrk+0x5c>)
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <_sbrk+0x60>)
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e04:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <_sbrk+0x64>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <_sbrk+0x68>)
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d207      	bcs.n	8001e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e20:	f006 fe30 	bl	8008a84 <__errno>
 8001e24:	4603      	mov	r3, r0
 8001e26:	220c      	movs	r2, #12
 8001e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e009      	b.n	8001e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <_sbrk+0x64>)
 8001e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20030000 	.word	0x20030000
 8001e50:	00000400 	.word	0x00000400
 8001e54:	200009fc 	.word	0x200009fc
 8001e58:	20000b70 	.word	0x20000b70

08001e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <SystemInit+0x20>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <SystemInit+0x20>)
 8001e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e86:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e88:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e9c:	4c0b      	ldr	r4, [pc, #44]	; (8001ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eaa:	f7ff ffd7 	bl	8001e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eae:	f006 fdef 	bl	8008a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb2:	f7fe ffc1 	bl	8000e38 <main>
  bx  lr    
 8001eb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001eb8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ec4:	08009afc 	.word	0x08009afc
  ldr r2, =_sbss
 8001ec8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ecc:	20000b70 	.word	0x20000b70

08001ed0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <CAN1_RX0_IRQHandler>
	...

08001ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <HAL_Init+0x40>)
 8001ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_Init+0x40>)
 8001eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_Init+0x40>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001efc:	2003      	movs	r0, #3
 8001efe:	f000 fe95 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f000 f808 	bl	8001f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f08:	f7ff fc06 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023c00 	.word	0x40023c00

08001f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_InitTick+0x54>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_InitTick+0x58>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fead 	bl	8002c96 <HAL_SYSTICK_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00e      	b.n	8001f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b0f      	cmp	r3, #15
 8001f4a:	d80a      	bhi.n	8001f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f000 fe75 	bl	8002c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <HAL_InitTick+0x5c>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000010 	.word	0x20000010
 8001f74:	2000000c 	.word	0x2000000c

08001f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_IncTick+0x20>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_IncTick+0x24>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_IncTick+0x24>)
 8001f8a:	6013      	str	r3, [r2, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000010 	.word	0x20000010
 8001f9c:	20000a00 	.word	0x20000a00

08001fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_GetTick+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000a00 	.word	0x20000a00

08001fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff ffee 	bl	8001fa0 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd0:	d005      	beq.n	8001fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_Delay+0x44>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4413      	add	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fde:	bf00      	nop
 8001fe0:	f7ff ffde 	bl	8001fa0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d8f7      	bhi.n	8001fe0 <HAL_Delay+0x28>
  {
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000010 	.word	0x20000010

08002000 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e033      	b.n	800207e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d109      	bne.n	8002032 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fba2 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	f043 0202 	orr.w	r2, r3, #2
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fb92 	bl	800277c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f023 0303 	bic.w	r3, r3, #3
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
 800206e:	e001      	b.n	8002074 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d049      	beq.n	8002150 <HAL_ADC_IRQHandler+0xca>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d046      	beq.n	8002150 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d12b      	bne.n	8002140 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d127      	bne.n	8002140 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002108:	2b00      	cmp	r3, #0
 800210a:	d119      	bne.n	8002140 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0220 	bic.w	r2, r2, #32
 800211a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f9c1 	bl	80024c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f06f 0212 	mvn.w	r2, #18
 800214e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d057      	beq.n	8002216 <HAL_ADC_IRQHandler+0x190>
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d054      	beq.n	8002216 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d139      	bne.n	8002206 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d12b      	bne.n	8002206 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d124      	bne.n	8002206 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11d      	bne.n	8002206 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d119      	bne.n	8002206 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fc36 	bl	8002a78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 020c 	mvn.w	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002224:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d017      	beq.n	800225c <HAL_ADC_IRQHandler+0x1d6>
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d014      	beq.n	800225c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10d      	bne.n	800225c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f94f 	bl	80024f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f06f 0201 	mvn.w	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800226a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d015      	beq.n	800229e <HAL_ADC_IRQHandler+0x218>
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	f043 0202 	orr.w	r2, r3, #2
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0220 	mvn.w	r2, #32
 800228c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f938 	bl	8002504 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0220 	mvn.w	r2, #32
 800229c:	601a      	str	r2, [r3, #0]
  }
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x1e>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0e9      	b.n	800249a <HAL_ADC_Start_DMA+0x1f2>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d018      	beq.n	800230e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ec:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <HAL_ADC_Start_DMA+0x1fc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6d      	ldr	r2, [pc, #436]	; (80024a8 <HAL_ADC_Start_DMA+0x200>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0c9a      	lsrs	r2, r3, #18
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002300:	e002      	b.n	8002308 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	3b01      	subs	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800231c:	d107      	bne.n	800232e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800232c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	f040 80a1 	bne.w	8002480 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002368:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237c:	d106      	bne.n	800238c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f023 0206 	bic.w	r2, r3, #6
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
 800238a:	e002      	b.n	8002392 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800239a:	4b44      	ldr	r3, [pc, #272]	; (80024ac <HAL_ADC_Start_DMA+0x204>)
 800239c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <HAL_ADC_Start_DMA+0x208>)
 80023a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_ADC_Start_DMA+0x20c>)
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	4a41      	ldr	r2, [pc, #260]	; (80024b8 <HAL_ADC_Start_DMA+0x210>)
 80023b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	334c      	adds	r3, #76	; 0x4c
 80023ea:	4619      	mov	r1, r3
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f000 fd0c 	bl	8002e0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d12a      	bne.n	8002456 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2d      	ldr	r2, [pc, #180]	; (80024bc <HAL_ADC_Start_DMA+0x214>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d015      	beq.n	8002436 <HAL_ADC_Start_DMA+0x18e>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <HAL_ADC_Start_DMA+0x218>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d105      	bne.n	8002420 <HAL_ADC_Start_DMA+0x178>
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_ADC_Start_DMA+0x204>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_ADC_Start_DMA+0x21c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d136      	bne.n	8002498 <HAL_ADC_Start_DMA+0x1f0>
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_ADC_Start_DMA+0x204>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d130      	bne.n	8002498 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d129      	bne.n	8002498 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	e020      	b.n	8002498 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_ADC_Start_DMA+0x214>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d11b      	bne.n	8002498 <HAL_ADC_Start_DMA+0x1f0>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d114      	bne.n	8002498 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	e00b      	b.n	8002498 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000008 	.word	0x20000008
 80024a8:	431bde83 	.word	0x431bde83
 80024ac:	40012300 	.word	0x40012300
 80024b0:	08002975 	.word	0x08002975
 80024b4:	08002a2f 	.word	0x08002a2f
 80024b8:	08002a4b 	.word	0x08002a4b
 80024bc:	40012000 	.word	0x40012000
 80024c0:	40012100 	.word	0x40012100
 80024c4:	40012200 	.word	0x40012200

080024c8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1c>
 8002530:	2302      	movs	r3, #2
 8002532:	e113      	b.n	800275c <HAL_ADC_ConfigChannel+0x244>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b09      	cmp	r3, #9
 8002542:	d925      	bls.n	8002590 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68d9      	ldr	r1, [r3, #12]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	3b1e      	subs	r3, #30
 800255a:	2207      	movs	r2, #7
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43da      	mvns	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	400a      	ands	r2, r1
 8002568:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68d9      	ldr	r1, [r3, #12]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4618      	mov	r0, r3
 800257c:	4603      	mov	r3, r0
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4403      	add	r3, r0
 8002582:	3b1e      	subs	r3, #30
 8002584:	409a      	lsls	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	e022      	b.n	80025d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6919      	ldr	r1, [r3, #16]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	2207      	movs	r2, #7
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	400a      	ands	r2, r1
 80025b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6919      	ldr	r1, [r3, #16]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	4618      	mov	r0, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4403      	add	r3, r0
 80025cc:	409a      	lsls	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d824      	bhi.n	8002628 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	3b05      	subs	r3, #5
 80025f0:	221f      	movs	r2, #31
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	400a      	ands	r2, r1
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	4618      	mov	r0, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b05      	subs	r3, #5
 800261a:	fa00 f203 	lsl.w	r2, r0, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	635a      	str	r2, [r3, #52]	; 0x34
 8002626:	e04c      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	d824      	bhi.n	800267a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	3b23      	subs	r3, #35	; 0x23
 8002642:	221f      	movs	r2, #31
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43da      	mvns	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	400a      	ands	r2, r1
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	3b23      	subs	r3, #35	; 0x23
 800266c:	fa00 f203 	lsl.w	r2, r0, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
 8002678:	e023      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	3b41      	subs	r3, #65	; 0x41
 800268c:	221f      	movs	r2, #31
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	400a      	ands	r2, r1
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	3b41      	subs	r3, #65	; 0x41
 80026b6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_ADC_ConfigChannel+0x250>)
 80026c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_ADC_ConfigChannel+0x254>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d10f      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1d8>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b12      	cmp	r3, #18
 80026d6:	d10b      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_ADC_ConfigChannel+0x254>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d12b      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x23a>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <HAL_ADC_ConfigChannel+0x258>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <HAL_ADC_ConfigChannel+0x1f4>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b11      	cmp	r3, #17
 800270a:	d122      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a11      	ldr	r2, [pc, #68]	; (8002770 <HAL_ADC_ConfigChannel+0x258>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d111      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_ADC_ConfigChannel+0x25c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a11      	ldr	r2, [pc, #68]	; (8002778 <HAL_ADC_ConfigChannel+0x260>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	0c9a      	lsrs	r2, r3, #18
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002744:	e002      	b.n	800274c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3b01      	subs	r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f9      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40012300 	.word	0x40012300
 800276c:	40012000 	.word	0x40012000
 8002770:	10000012 	.word	0x10000012
 8002774:	20000008 	.word	0x20000008
 8002778:	431bde83 	.word	0x431bde83

0800277c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002784:	4b79      	ldr	r3, [pc, #484]	; (800296c <ADC_Init+0x1f0>)
 8002786:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	4a58      	ldr	r2, [pc, #352]	; (8002970 <ADC_Init+0x1f4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e00f      	b.n	800287a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002878:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0202 	bic.w	r2, r2, #2
 8002888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7e1b      	ldrb	r3, [r3, #24]
 8002894:	005a      	lsls	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	3b01      	subs	r3, #1
 80028d4:	035a      	lsls	r2, r3, #13
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	e007      	b.n	80028f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	3b01      	subs	r3, #1
 800290c:	051a      	lsls	r2, r3, #20
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002932:	025a      	lsls	r2, r3, #9
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800294a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	029a      	lsls	r2, r3, #10
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40012300 	.word	0x40012300
 8002970:	0f000001 	.word	0x0f000001

08002974 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13c      	bne.n	8002a08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d12b      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d127      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d119      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0220 	bic.w	r2, r2, #32
 80029da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff fd61 	bl	80024c8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a06:	e00e      	b.n	8002a26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff fd75 	bl	8002504 <HAL_ADC_ErrorCallback>
}
 8002a1a:	e004      	b.n	8002a26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7ff fd4d 	bl	80024dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0204 	orr.w	r2, r3, #4
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fd4a 	bl	8002504 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4907      	ldr	r1, [pc, #28]	; (8002b28 <__NVIC_EnableIRQ+0x38>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf8:	d301      	bcc.n	8002bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00f      	b.n	8002c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <SysTick_Config+0x40>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c06:	210f      	movs	r1, #15
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	f7ff ff8e 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <SysTick_Config+0x40>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <SysTick_Config+0x40>)
 8002c18:	2207      	movs	r2, #7
 8002c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff29 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c54:	f7ff ff3e 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7ff ff8e 	bl	8002b80 <NVIC_EncodePriority>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff5d 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff31 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffa2 	bl	8002be8 <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff f970 	bl	8001fa0 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e099      	b.n	8002e00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cec:	e00f      	b.n	8002d0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cee:	f7ff f957 	bl	8001fa0 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d908      	bls.n	8002d0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e078      	b.n	8002e00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e8      	bne.n	8002cee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_DMA_Init+0x158>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d107      	bne.n	8002d78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4313      	orrs	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0307 	bic.w	r3, r3, #7
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d117      	bne.n	8002dd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fb01 	bl	80033bc <DMA_CheckFifoParam>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e016      	b.n	8002e00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fab8 	bl	8003350 <DMA_CalcBaseAndBitshift>
 8002de0:	4603      	mov	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	223f      	movs	r2, #63	; 0x3f
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	f010803f 	.word	0xf010803f

08002e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_DMA_Start_IT+0x26>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e040      	b.n	8002eb4 <HAL_DMA_Start_IT+0xa8>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d12f      	bne.n	8002ea6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa4a 	bl	80032f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	223f      	movs	r2, #63	; 0x3f
 8002e66:	409a      	lsls	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0216 	orr.w	r2, r2, #22
 8002e7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0208 	orr.w	r2, r2, #8
 8002e92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e005      	b.n	8002eb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eca:	f7ff f869 	bl	8001fa0 <HAL_GetTick>
 8002ece:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d008      	beq.n	8002eee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e052      	b.n	8002f94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0216 	bic.w	r2, r2, #22
 8002efc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <HAL_DMA_Abort+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0208 	bic.w	r2, r2, #8
 8002f2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3e:	e013      	b.n	8002f68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f40:	f7ff f82e 	bl	8001fa0 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d90c      	bls.n	8002f68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2203      	movs	r2, #3
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e015      	b.n	8002f94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e4      	bne.n	8002f40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	223f      	movs	r2, #63	; 0x3f
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d004      	beq.n	8002fba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00c      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fec:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <HAL_DMA_IRQHandler+0x248>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a8e      	ldr	r2, [pc, #568]	; (800322c <HAL_DMA_IRQHandler+0x24c>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0a9b      	lsrs	r3, r3, #10
 8002ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300a:	2208      	movs	r2, #8
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01a      	beq.n	800304c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	2208      	movs	r2, #8
 800303a:	409a      	lsls	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4013      	ands	r3, r2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	2201      	movs	r2, #1
 8003070:	409a      	lsls	r2, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	2204      	movs	r2, #4
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	2204      	movs	r2, #4
 80030a6:	409a      	lsls	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	f043 0204 	orr.w	r2, r3, #4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	2210      	movs	r2, #16
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d043      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03c      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030da:	2210      	movs	r2, #16
 80030dc:	409a      	lsls	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d018      	beq.n	8003122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d024      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
 800310e:	e01f      	b.n	8003150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e016      	b.n	8003150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0208 	bic.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	2220      	movs	r2, #32
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 808f 	beq.w	8003280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8087 	beq.w	8003280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	2220      	movs	r2, #32
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b05      	cmp	r3, #5
 8003188:	d136      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0216 	bic.w	r2, r2, #22
 8003198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <HAL_DMA_IRQHandler+0x1da>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0208 	bic.w	r2, r2, #8
 80031c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ce:	223f      	movs	r2, #63	; 0x3f
 80031d0:	409a      	lsls	r2, r3
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d07e      	beq.n	80032ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
        }
        return;
 80031f6:	e079      	b.n	80032ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	2b00      	cmp	r3, #0
 800321a:	d031      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
 8003224:	e02c      	b.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
 8003226:	bf00      	nop
 8003228:	20000008 	.word	0x20000008
 800322c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d023      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e01e      	b.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10f      	bne.n	8003270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0210 	bic.w	r2, r2, #16
 800325e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	2b00      	cmp	r3, #0
 8003286:	d032      	beq.n	80032ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d022      	beq.n	80032da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2205      	movs	r2, #5
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d307      	bcc.n	80032c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f2      	bne.n	80032ac <HAL_DMA_IRQHandler+0x2cc>
 80032c6:	e000      	b.n	80032ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
 80032ea:	e000      	b.n	80032ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80032ec:	bf00      	nop
    }
  }
}
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003310:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d108      	bne.n	8003334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003332:	e007      	b.n	8003344 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3b10      	subs	r3, #16
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800336a:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <DMA_CalcBaseAndBitshift+0x68>)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d909      	bls.n	8003392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	659a      	str	r2, [r3, #88]	; 0x58
 8003390:	e007      	b.n	80033a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	aaaaaaab 	.word	0xaaaaaaab
 80033b8:	08009ab0 	.word	0x08009ab0

080033bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11f      	bne.n	8003416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d856      	bhi.n	800348a <DMA_CheckFifoParam+0xce>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <DMA_CheckFifoParam+0x28>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003407 	.word	0x08003407
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800348b 	.word	0x0800348b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d046      	beq.n	800348e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e043      	b.n	800348e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800340e:	d140      	bne.n	8003492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003414:	e03d      	b.n	8003492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	d121      	bne.n	8003464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d837      	bhi.n	8003496 <DMA_CheckFifoParam+0xda>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <DMA_CheckFifoParam+0x70>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800343d 	.word	0x0800343d
 8003430:	08003443 	.word	0x08003443
 8003434:	0800343d 	.word	0x0800343d
 8003438:	08003455 	.word	0x08003455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      break;
 8003440:	e030      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d025      	beq.n	800349a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003452:	e022      	b.n	800349a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800345c:	d11f      	bne.n	800349e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003462:	e01c      	b.n	800349e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d903      	bls.n	8003472 <DMA_CheckFifoParam+0xb6>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d003      	beq.n	8003478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003470:	e018      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      break;
 8003476:	e015      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e00b      	b.n	80034a2 <DMA_CheckFifoParam+0xe6>
      break;
 800348a:	bf00      	nop
 800348c:	e00a      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800348e:	bf00      	nop
 8003490:	e008      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003492:	bf00      	nop
 8003494:	e006      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
 8003498:	e004      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
    }
  } 
  
  return status; 
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06c      	b.n	80035a0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2223      	movs	r2, #35	; 0x23
 80034d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7fe f9d9 	bl	8001890 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <HAL_ETH_Init+0xf4>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <HAL_ETH_Init+0xf4>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <HAL_ETH_Init+0xf4>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <HAL_ETH_Init+0xf8>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <HAL_ETH_Init+0xf8>)
 8003500:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003504:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_ETH_Init+0xf8>)
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4927      	ldr	r1, [pc, #156]	; (80035ac <HAL_ETH_Init+0xf8>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003514:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_ETH_Init+0xf8>)
 8003516:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800352e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003530:	f7fe fd36 	bl	8001fa0 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003536:	e011      	b.n	800355c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003538:	f7fe fd32 	bl	8001fa0 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003546:	d909      	bls.n	800355c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2204      	movs	r2, #4
 800354c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	22e0      	movs	r2, #224	; 0xe0
 8003554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e021      	b.n	80035a0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e4      	bne.n	8003538 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f958 	bl	8003824 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f9ff 	bl	8003978 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa55 	bl	8003a2a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	461a      	mov	r2, r3
 8003586:	2100      	movs	r1, #0
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f9bd 	bl	8003908 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2210      	movs	r2, #16
 800359a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40013800 	.word	0x40013800

080035b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4b51      	ldr	r3, [pc, #324]	; (800370c <ETH_SetMACConfig+0x15c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	7c1b      	ldrb	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d102      	bne.n	80035d8 <ETH_SetMACConfig+0x28>
 80035d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035d6:	e000      	b.n	80035da <ETH_SetMACConfig+0x2a>
 80035d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	7c5b      	ldrb	r3, [r3, #17]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <ETH_SetMACConfig+0x38>
 80035e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035e6:	e000      	b.n	80035ea <ETH_SetMACConfig+0x3a>
 80035e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80035f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	7fdb      	ldrb	r3, [r3, #31]
 80035f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80035f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	7f92      	ldrb	r2, [r2, #30]
 8003604:	2a00      	cmp	r2, #0
 8003606:	d102      	bne.n	800360e <ETH_SetMACConfig+0x5e>
 8003608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800360c:	e000      	b.n	8003610 <ETH_SetMACConfig+0x60>
 800360e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003610:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	7f1b      	ldrb	r3, [r3, #28]
 8003616:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003618:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800361e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003626:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800362e:	2a00      	cmp	r2, #0
 8003630:	d102      	bne.n	8003638 <ETH_SetMACConfig+0x88>
 8003632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003636:	e000      	b.n	800363a <ETH_SetMACConfig+0x8a>
 8003638:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800363a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	7bdb      	ldrb	r3, [r3, #15]
 8003640:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003642:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003648:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003650:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003652:	4313      	orrs	r3, r2
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800366a:	2001      	movs	r0, #1
 800366c:	f7fe fca4 	bl	8001fb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003686:	4013      	ands	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003696:	2a00      	cmp	r2, #0
 8003698:	d101      	bne.n	800369e <ETH_SetMACConfig+0xee>
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	e000      	b.n	80036a0 <ETH_SetMACConfig+0xf0>
 800369e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80036a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80036ae:	2a01      	cmp	r2, #1
 80036b0:	d101      	bne.n	80036b6 <ETH_SetMACConfig+0x106>
 80036b2:	2208      	movs	r2, #8
 80036b4:	e000      	b.n	80036b8 <ETH_SetMACConfig+0x108>
 80036b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80036b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80036c0:	2a01      	cmp	r2, #1
 80036c2:	d101      	bne.n	80036c8 <ETH_SetMACConfig+0x118>
 80036c4:	2204      	movs	r2, #4
 80036c6:	e000      	b.n	80036ca <ETH_SetMACConfig+0x11a>
 80036c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80036d2:	2a01      	cmp	r2, #1
 80036d4:	d101      	bne.n	80036da <ETH_SetMACConfig+0x12a>
 80036d6:	2202      	movs	r2, #2
 80036d8:	e000      	b.n	80036dc <ETH_SetMACConfig+0x12c>
 80036da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036dc:	4313      	orrs	r3, r2
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7fe fc5f 	bl	8001fb8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	619a      	str	r2, [r3, #24]
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	ff20810f 	.word	0xff20810f

08003710 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <ETH_SetDMAConfig+0x110>)
 800372a:	4013      	ands	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	7b1b      	ldrb	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <ETH_SetDMAConfig+0x2c>
 8003736:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800373a:	e000      	b.n	800373e <ETH_SetDMAConfig+0x2e>
 800373c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	7b5b      	ldrb	r3, [r3, #13]
 8003742:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003744:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	7f52      	ldrb	r2, [r2, #29]
 800374a:	2a00      	cmp	r2, #0
 800374c:	d102      	bne.n	8003754 <ETH_SetDMAConfig+0x44>
 800374e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003752:	e000      	b.n	8003756 <ETH_SetDMAConfig+0x46>
 8003754:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003756:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	7b9b      	ldrb	r3, [r3, #14]
 800375c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800375e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003764:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	7f1b      	ldrb	r3, [r3, #28]
 800376a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800376c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	7f9b      	ldrb	r3, [r3, #30]
 8003772:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003774:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800377a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003782:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003784:	4313      	orrs	r3, r2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f7fe fc06 	bl	8001fb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	791b      	ldrb	r3, [r3, #4]
 80037be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80037ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80037d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80037da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80037e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003804:	2001      	movs	r0, #1
 8003806:	f7fe fbd7 	bl	8001fb8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003812:	461a      	mov	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	f8de3f23 	.word	0xf8de3f23

08003824 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b0a6      	sub	sp, #152	; 0x98
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003838:	2300      	movs	r3, #0
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003860:	2300      	movs	r3, #0
 8003862:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003864:	2300      	movs	r3, #0
 8003866:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800386a:	2300      	movs	r3, #0
 800386c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003874:	2300      	movs	r3, #0
 8003876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003886:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800388a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800388c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003890:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003898:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fe86 	bl	80035b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80038c6:	2300      	movs	r3, #0
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80038d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80038da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80038e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80038f4:	f107 0308 	add.w	r3, r7, #8
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff08 	bl	8003710 <ETH_SetDMAConfig>
}
 8003900:	bf00      	nop
 8003902:	3798      	adds	r7, #152	; 0x98
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3305      	adds	r3, #5
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	3204      	adds	r2, #4
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <ETH_MACAddressConfig+0x68>)
 800392a:	4413      	add	r3, r2
 800392c:	461a      	mov	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3303      	adds	r3, #3
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	061a      	lsls	r2, r3, #24
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3302      	adds	r3, #2
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3301      	adds	r3, #1
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	4313      	orrs	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <ETH_MACAddressConfig+0x6c>)
 800395a:	4413      	add	r3, r2
 800395c:	461a      	mov	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	6013      	str	r3, [r2, #0]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40028040 	.word	0x40028040
 8003974:	40028044 	.word	0x40028044

08003978 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e03e      	b.n	8003a04 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68d9      	ldr	r1, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2200      	movs	r2, #0
 80039ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	3206      	adds	r2, #6
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d80c      	bhi.n	80039e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68d9      	ldr	r1, [r3, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	e004      	b.n	80039f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d9bd      	bls.n	8003986 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1c:	611a      	str	r2, [r3, #16]
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b085      	sub	sp, #20
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e046      	b.n	8003ac6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6919      	ldr	r1, [r3, #16]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	440b      	add	r3, r1
 8003a48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2200      	movs	r2, #0
 8003a54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2200      	movs	r2, #0
 8003a66:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a74:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003a7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	3212      	adds	r2, #18
 8003a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d80c      	bhi.n	8003ab6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6919      	ldr	r1, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	e004      	b.n	8003ac0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d9b5      	bls.n	8003a38 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af6:	60da      	str	r2, [r3, #12]
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b16:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <HAL_FLASH_Program+0xa0>)
 8003b18:	7e1b      	ldrb	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_FLASH_Program+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e03b      	b.n	8003b9a <HAL_FLASH_Program+0x96>
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_FLASH_Program+0xa0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b2c:	f000 f870 	bl	8003c10 <FLASH_WaitForLastOperation>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d12b      	bne.n	8003b92 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003b40:	783b      	ldrb	r3, [r7, #0]
 8003b42:	4619      	mov	r1, r3
 8003b44:	68b8      	ldr	r0, [r7, #8]
 8003b46:	f000 f91b 	bl	8003d80 <FLASH_Program_Byte>
 8003b4a:	e016      	b.n	8003b7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d105      	bne.n	8003b5e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003b52:	883b      	ldrh	r3, [r7, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	68b8      	ldr	r0, [r7, #8]
 8003b58:	f000 f8ee 	bl	8003d38 <FLASH_Program_HalfWord>
 8003b5c:	e00d      	b.n	8003b7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d105      	bne.n	8003b70 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4619      	mov	r1, r3
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f000 f8c3 	bl	8003cf4 <FLASH_Program_Word>
 8003b6e:	e004      	b.n	8003b7a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b74:	68b8      	ldr	r0, [r7, #8]
 8003b76:	f000 f88b 	bl	8003c90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b7e:	f000 f847 	bl	8003c10 <FLASH_WaitForLastOperation>
 8003b82:	4603      	mov	r3, r0
 8003b84:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <HAL_FLASH_Program+0xa4>)
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_FLASH_Program+0xa4>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <HAL_FLASH_Program+0xa0>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000a04 	.word	0x20000a04
 8003ba8:	40023c00 	.word	0x40023c00

08003bac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_FLASH_Unlock+0x38>)
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da0b      	bge.n	8003bd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_FLASH_Unlock+0x38>)
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_FLASH_Unlock+0x3c>)
 8003bc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_FLASH_Unlock+0x38>)
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_FLASH_Unlock+0x40>)
 8003bc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_FLASH_Unlock+0x38>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	da01      	bge.n	8003bd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40023c00 	.word	0x40023c00
 8003be8:	45670123 	.word	0x45670123
 8003bec:	cdef89ab 	.word	0xcdef89ab

08003bf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_FLASH_Lock+0x1c>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_FLASH_Lock+0x1c>)
 8003bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bfe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40023c00 	.word	0x40023c00

08003c10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <FLASH_WaitForLastOperation+0x78>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c22:	f7fe f9bd 	bl	8001fa0 <HAL_GetTick>
 8003c26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003c28:	e010      	b.n	8003c4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d00c      	beq.n	8003c4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <FLASH_WaitForLastOperation+0x38>
 8003c38:	f7fe f9b2 	bl	8001fa0 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d201      	bcs.n	8003c4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e019      	b.n	8003c80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <FLASH_WaitForLastOperation+0x7c>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e8      	bne.n	8003c2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <FLASH_WaitForLastOperation+0x7c>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <FLASH_WaitForLastOperation+0x7c>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <FLASH_WaitForLastOperation+0x7c>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003c76:	f000 f8a5 	bl	8003dc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
  
}  
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000a04 	.word	0x20000a04
 8003c8c:	40023c00 	.word	0x40023c00

08003c90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <FLASH_Program_DoubleWord+0x60>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <FLASH_Program_DoubleWord+0x60>)
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <FLASH_Program_DoubleWord+0x60>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <FLASH_Program_DoubleWord+0x60>)
 8003cae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <FLASH_Program_DoubleWord+0x60>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <FLASH_Program_DoubleWord+0x60>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003cc6:	f3bf 8f6f 	isb	sy
}
 8003cca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	000a      	movs	r2, r1
 8003cda:	2300      	movs	r3, #0
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	3104      	adds	r1, #4
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	40023c00 	.word	0x40023c00

08003cf4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <FLASH_Program_Word+0x40>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <FLASH_Program_Word+0x40>)
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <FLASH_Program_Word+0x40>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <FLASH_Program_Word+0x40>)
 8003d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <FLASH_Program_Word+0x40>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	4a06      	ldr	r2, [pc, #24]	; (8003d34 <FLASH_Program_Word+0x40>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40023c00 	.word	0x40023c00

08003d38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d44:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <FLASH_Program_HalfWord+0x44>)
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	4a0c      	ldr	r2, [pc, #48]	; (8003d7c <FLASH_Program_HalfWord+0x44>)
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <FLASH_Program_HalfWord+0x44>)
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4a09      	ldr	r2, [pc, #36]	; (8003d7c <FLASH_Program_HalfWord+0x44>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003d5c:	4b07      	ldr	r3, [pc, #28]	; (8003d7c <FLASH_Program_HalfWord+0x44>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4a06      	ldr	r2, [pc, #24]	; (8003d7c <FLASH_Program_HalfWord+0x44>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	801a      	strh	r2, [r3, #0]
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00

08003d80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <FLASH_Program_Byte+0x40>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	4a0b      	ldr	r2, [pc, #44]	; (8003dc0 <FLASH_Program_Byte+0x40>)
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <FLASH_Program_Byte+0x40>)
 8003d9a:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <FLASH_Program_Byte+0x40>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <FLASH_Program_Byte+0x40>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <FLASH_Program_Byte+0x40>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	701a      	strb	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023c00 	.word	0x40023c00

08003dc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003dc8:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	f043 0310 	orr.w	r3, r3, #16
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003dde:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003de0:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003de2:	2210      	movs	r2, #16
 8003de4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003de6:	4b28      	ldr	r3, [pc, #160]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003df2:	4b26      	ldr	r3, [pc, #152]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f043 0308 	orr.w	r3, r3, #8
 8003dfa:	4a24      	ldr	r2, [pc, #144]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003dfc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003dfe:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e00:	2220      	movs	r2, #32
 8003e02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003e04:	4b20      	ldr	r3, [pc, #128]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003e10:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e1e:	2240      	movs	r2, #64	; 0x40
 8003e20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003e22:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f043 0320 	orr.w	r3, r3, #32
 8003e74:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <FLASH_SetErrorCode+0xc8>)
 8003e76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <FLASH_SetErrorCode+0xc4>)
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	60da      	str	r2, [r3, #12]
  }
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	40023c00 	.word	0x40023c00
 8003e8c:	20000a04 	.word	0x20000a04

08003e90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_FLASHEx_Erase+0xdc>)
 8003ea4:	7e1b      	ldrb	r3, [r3, #24]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_FLASHEx_Erase+0x1e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e05a      	b.n	8003f64 <HAL_FLASHEx_Erase+0xd4>
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_FLASHEx_Erase+0xdc>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eb8:	f7ff feaa 	bl	8003c10 <FLASH_WaitForLastOperation>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d14a      	bne.n	8003f5c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d117      	bne.n	8003f06 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 f846 	bl	8003f74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ee8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eec:	f7ff fe90 	bl	8003c10 <FLASH_WaitForLastOperation>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <HAL_FLASHEx_Erase+0xe0>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_FLASHEx_Erase+0xe0>)
 8003efa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003efe:	f023 0304 	bic.w	r3, r3, #4
 8003f02:	6113      	str	r3, [r2, #16]
 8003f04:	e028      	b.n	8003f58 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	e01c      	b.n	8003f48 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f000 f866 	bl	8003fe8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f20:	f7ff fe76 	bl	8003c10 <FLASH_WaitForLastOperation>
 8003f24:	4603      	mov	r3, r0
 8003f26:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_FLASHEx_Erase+0xe0>)
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <HAL_FLASHEx_Erase+0xe0>)
 8003f2e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8003f32:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	601a      	str	r2, [r3, #0]
          break;
 8003f40:	e00a      	b.n	8003f58 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4413      	add	r3, r2
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3da      	bcc.n	8003f0e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f58:	f000 f894 	bl	8004084 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_FLASHEx_Erase+0xdc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	761a      	strb	r2, [r3, #24]

  return status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000a04 	.word	0x20000a04
 8003f70:	40023c00 	.word	0x40023c00

08003f74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d108      	bne.n	8003fa4 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	6113      	str	r3, [r2, #16]
 8003fa2:	e00f      	b.n	8003fc4 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d106      	bne.n	8003fb8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	4a0d      	ldr	r2, [pc, #52]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	6113      	str	r3, [r2, #16]
 8003fb6:	e005      	b.n	8003fc4 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <FLASH_MassErase+0x70>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	6113      	str	r3, [r2, #16]
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40023c00 	.word	0x40023c00

08003fe8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	e010      	b.n	8004026 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d103      	bne.n	8004012 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800400a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e009      	b.n	8004026 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d103      	bne.n	8004020 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e002      	b.n	8004026 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004020:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b0b      	cmp	r3, #11
 800402a:	d902      	bls.n	8004032 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <FLASH_Erase_Sector+0x98>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <FLASH_Erase_Sector+0x98>)
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <FLASH_Erase_Sector+0x98>)
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	490f      	ldr	r1, [pc, #60]	; (8004080 <FLASH_Erase_Sector+0x98>)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <FLASH_Erase_Sector+0x98>)
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	4a0c      	ldr	r2, [pc, #48]	; (8004080 <FLASH_Erase_Sector+0x98>)
 8004050:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004054:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <FLASH_Erase_Sector+0x98>)
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4313      	orrs	r3, r2
 8004060:	4a07      	ldr	r2, [pc, #28]	; (8004080 <FLASH_Erase_Sector+0x98>)
 8004062:	f043 0302 	orr.w	r3, r3, #2
 8004066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <FLASH_Erase_Sector+0x98>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <FLASH_Erase_Sector+0x98>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	6113      	str	r3, [r2, #16]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40023c00 	.word	0x40023c00

08004084 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004088:	4b20      	ldr	r3, [pc, #128]	; (800410c <FLASH_FlushCaches+0x88>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004090:	2b00      	cmp	r3, #0
 8004092:	d017      	beq.n	80040c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004094:	4b1d      	ldr	r3, [pc, #116]	; (800410c <FLASH_FlushCaches+0x88>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	; (800410c <FLASH_FlushCaches+0x88>)
 800409a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800409e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <FLASH_FlushCaches+0x88>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a19      	ldr	r2, [pc, #100]	; (800410c <FLASH_FlushCaches+0x88>)
 80040a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <FLASH_FlushCaches+0x88>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <FLASH_FlushCaches+0x88>)
 80040b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <FLASH_FlushCaches+0x88>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <FLASH_FlushCaches+0x88>)
 80040be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <FLASH_FlushCaches+0x88>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d017      	beq.n	8004100 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <FLASH_FlushCaches+0x88>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0d      	ldr	r2, [pc, #52]	; (800410c <FLASH_FlushCaches+0x88>)
 80040d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <FLASH_FlushCaches+0x88>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	; (800410c <FLASH_FlushCaches+0x88>)
 80040e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <FLASH_FlushCaches+0x88>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <FLASH_FlushCaches+0x88>)
 80040ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <FLASH_FlushCaches+0x88>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <FLASH_FlushCaches+0x88>)
 80040fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040fe:	6013      	str	r3, [r2, #0]
  }
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00

08004110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004110:	b480      	push	{r7}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004122:	2300      	movs	r3, #0
 8004124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	e177      	b.n	800441c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800412c:	2201      	movs	r2, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	429a      	cmp	r2, r3
 8004146:	f040 8166 	bne.w	8004416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d005      	beq.n	8004162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415e:	2b02      	cmp	r3, #2
 8004160:	d130      	bne.n	80041c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fa02 f303 	lsl.w	r3, r2, r3
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004198:	2201      	movs	r2, #1
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0201 	and.w	r2, r3, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d017      	beq.n	8004200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	2203      	movs	r2, #3
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d123      	bne.n	8004254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	08da      	lsrs	r2, r3, #3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3208      	adds	r2, #8
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	220f      	movs	r2, #15
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	08da      	lsrs	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3208      	adds	r2, #8
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2203      	movs	r2, #3
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0203 	and.w	r2, r3, #3
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 80c0 	beq.w	8004416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	4b66      	ldr	r3, [pc, #408]	; (8004434 <HAL_GPIO_Init+0x324>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	4a65      	ldr	r2, [pc, #404]	; (8004434 <HAL_GPIO_Init+0x324>)
 80042a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042a4:	6453      	str	r3, [r2, #68]	; 0x44
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_GPIO_Init+0x324>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042b2:	4a61      	ldr	r2, [pc, #388]	; (8004438 <HAL_GPIO_Init+0x328>)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	3302      	adds	r3, #2
 80042ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	220f      	movs	r2, #15
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a58      	ldr	r2, [pc, #352]	; (800443c <HAL_GPIO_Init+0x32c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d037      	beq.n	800434e <HAL_GPIO_Init+0x23e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a57      	ldr	r2, [pc, #348]	; (8004440 <HAL_GPIO_Init+0x330>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d031      	beq.n	800434a <HAL_GPIO_Init+0x23a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a56      	ldr	r2, [pc, #344]	; (8004444 <HAL_GPIO_Init+0x334>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d02b      	beq.n	8004346 <HAL_GPIO_Init+0x236>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a55      	ldr	r2, [pc, #340]	; (8004448 <HAL_GPIO_Init+0x338>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d025      	beq.n	8004342 <HAL_GPIO_Init+0x232>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a54      	ldr	r2, [pc, #336]	; (800444c <HAL_GPIO_Init+0x33c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01f      	beq.n	800433e <HAL_GPIO_Init+0x22e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a53      	ldr	r2, [pc, #332]	; (8004450 <HAL_GPIO_Init+0x340>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d019      	beq.n	800433a <HAL_GPIO_Init+0x22a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_GPIO_Init+0x344>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_GPIO_Init+0x226>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a51      	ldr	r2, [pc, #324]	; (8004458 <HAL_GPIO_Init+0x348>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00d      	beq.n	8004332 <HAL_GPIO_Init+0x222>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a50      	ldr	r2, [pc, #320]	; (800445c <HAL_GPIO_Init+0x34c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <HAL_GPIO_Init+0x21e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a4f      	ldr	r2, [pc, #316]	; (8004460 <HAL_GPIO_Init+0x350>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_GPIO_Init+0x21a>
 8004326:	2309      	movs	r3, #9
 8004328:	e012      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800432a:	230a      	movs	r3, #10
 800432c:	e010      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800432e:	2308      	movs	r3, #8
 8004330:	e00e      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004332:	2307      	movs	r3, #7
 8004334:	e00c      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004336:	2306      	movs	r3, #6
 8004338:	e00a      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800433a:	2305      	movs	r3, #5
 800433c:	e008      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800433e:	2304      	movs	r3, #4
 8004340:	e006      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004342:	2303      	movs	r3, #3
 8004344:	e004      	b.n	8004350 <HAL_GPIO_Init+0x240>
 8004346:	2302      	movs	r3, #2
 8004348:	e002      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_GPIO_Init+0x240>
 800434e:	2300      	movs	r3, #0
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	f002 0203 	and.w	r2, r2, #3
 8004356:	0092      	lsls	r2, r2, #2
 8004358:	4093      	lsls	r3, r2
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004360:	4935      	ldr	r1, [pc, #212]	; (8004438 <HAL_GPIO_Init+0x328>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	3302      	adds	r3, #2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436e:	4b3d      	ldr	r3, [pc, #244]	; (8004464 <HAL_GPIO_Init+0x354>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004392:	4a34      	ldr	r2, [pc, #208]	; (8004464 <HAL_GPIO_Init+0x354>)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004398:	4b32      	ldr	r3, [pc, #200]	; (8004464 <HAL_GPIO_Init+0x354>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043bc:	4a29      	ldr	r2, [pc, #164]	; (8004464 <HAL_GPIO_Init+0x354>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043c2:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_GPIO_Init+0x354>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e6:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <HAL_GPIO_Init+0x354>)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_GPIO_Init+0x354>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <HAL_GPIO_Init+0x354>)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3301      	adds	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b0f      	cmp	r3, #15
 8004420:	f67f ae84 	bls.w	800412c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3724      	adds	r7, #36	; 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	40013800 	.word	0x40013800
 800443c:	40020000 	.word	0x40020000
 8004440:	40020400 	.word	0x40020400
 8004444:	40020800 	.word	0x40020800
 8004448:	40020c00 	.word	0x40020c00
 800444c:	40021000 	.word	0x40021000
 8004450:	40021400 	.word	0x40021400
 8004454:	40021800 	.word	0x40021800
 8004458:	40021c00 	.word	0x40021c00
 800445c:	40022000 	.word	0x40022000
 8004460:	40022400 	.word	0x40022400
 8004464:	40013c00 	.word	0x40013c00

08004468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	e001      	b.n	800448a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	807b      	strh	r3, [r7, #2]
 80044a4:	4613      	mov	r3, r2
 80044a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044a8:	787b      	ldrb	r3, [r7, #1]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044b4:	e003      	b.n	80044be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044b6:	887b      	ldrh	r3, [r7, #2]
 80044b8:	041a      	lsls	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	619a      	str	r2, [r3, #24]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044dc:	887a      	ldrh	r2, [r7, #2]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4013      	ands	r3, r2
 80044e2:	041a      	lsls	r2, r3, #16
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	43d9      	mvns	r1, r3
 80044e8:	887b      	ldrh	r3, [r7, #2]
 80044ea:	400b      	ands	r3, r1
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	619a      	str	r2, [r3, #24]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800450a:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004516:	4a05      	ldr	r2, [pc, #20]	; (800452c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd f872 	bl	8001608 <HAL_GPIO_EXTI_Callback>
  }
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40013c00 	.word	0x40013c00

08004530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e12b      	b.n	800479a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fd fa60 	bl	8001a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004594:	f001 fb4e 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8004598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4a81      	ldr	r2, [pc, #516]	; (80047a4 <HAL_I2C_Init+0x274>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d807      	bhi.n	80045b4 <HAL_I2C_Init+0x84>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a80      	ldr	r2, [pc, #512]	; (80047a8 <HAL_I2C_Init+0x278>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bf94      	ite	ls
 80045ac:	2301      	movls	r3, #1
 80045ae:	2300      	movhi	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e006      	b.n	80045c2 <HAL_I2C_Init+0x92>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a7d      	ldr	r2, [pc, #500]	; (80047ac <HAL_I2C_Init+0x27c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	bf94      	ite	ls
 80045bc:	2301      	movls	r3, #1
 80045be:	2300      	movhi	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0e7      	b.n	800479a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a78      	ldr	r2, [pc, #480]	; (80047b0 <HAL_I2C_Init+0x280>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	0c9b      	lsrs	r3, r3, #18
 80045d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a6a      	ldr	r2, [pc, #424]	; (80047a4 <HAL_I2C_Init+0x274>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d802      	bhi.n	8004604 <HAL_I2C_Init+0xd4>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3301      	adds	r3, #1
 8004602:	e009      	b.n	8004618 <HAL_I2C_Init+0xe8>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	4a69      	ldr	r2, [pc, #420]	; (80047b4 <HAL_I2C_Init+0x284>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	3301      	adds	r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	430b      	orrs	r3, r1
 800461e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800462a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	495c      	ldr	r1, [pc, #368]	; (80047a4 <HAL_I2C_Init+0x274>)
 8004634:	428b      	cmp	r3, r1
 8004636:	d819      	bhi.n	800466c <HAL_I2C_Init+0x13c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e59      	subs	r1, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fbb1 f3f3 	udiv	r3, r1, r3
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	f640 73fc 	movw	r3, #4092	; 0xffc
 800464c:	400b      	ands	r3, r1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_I2C_Init+0x138>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1e59      	subs	r1, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004660:	3301      	adds	r3, #1
 8004662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004666:	e051      	b.n	800470c <HAL_I2C_Init+0x1dc>
 8004668:	2304      	movs	r3, #4
 800466a:	e04f      	b.n	800470c <HAL_I2C_Init+0x1dc>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d111      	bne.n	8004698 <HAL_I2C_Init+0x168>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e58      	subs	r0, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	440b      	add	r3, r1
 8004682:	fbb0 f3f3 	udiv	r3, r0, r3
 8004686:	3301      	adds	r3, #1
 8004688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e012      	b.n	80046be <HAL_I2C_Init+0x18e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	0099      	lsls	r1, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Init+0x196>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e022      	b.n	800470c <HAL_I2C_Init+0x1dc>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10e      	bne.n	80046ec <HAL_I2C_Init+0x1bc>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1e58      	subs	r0, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	440b      	add	r3, r1
 80046dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	e00f      	b.n	800470c <HAL_I2C_Init+0x1dc>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e58      	subs	r0, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	0099      	lsls	r1, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	6809      	ldr	r1, [r1, #0]
 8004710:	4313      	orrs	r3, r2
 8004712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800473a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6911      	ldr	r1, [r2, #16]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	430b      	orrs	r3, r1
 800474e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	000186a0 	.word	0x000186a0
 80047a8:	001e847f 	.word	0x001e847f
 80047ac:	003d08ff 	.word	0x003d08ff
 80047b0:	431bde83 	.word	0x431bde83
 80047b4:	10624dd3 	.word	0x10624dd3

080047b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	461a      	mov	r2, r3
 80047c4:	460b      	mov	r3, r1
 80047c6:	817b      	strh	r3, [r7, #10]
 80047c8:	4613      	mov	r3, r2
 80047ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047cc:	f7fd fbe8 	bl	8001fa0 <HAL_GetTick>
 80047d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b20      	cmp	r3, #32
 80047dc:	f040 80e0 	bne.w	80049a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2319      	movs	r3, #25
 80047e6:	2201      	movs	r2, #1
 80047e8:	4970      	ldr	r1, [pc, #448]	; (80049ac <HAL_I2C_Master_Transmit+0x1f4>)
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa92 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	e0d3      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_I2C_Master_Transmit+0x50>
 8004804:	2302      	movs	r3, #2
 8004806:	e0cc      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d007      	beq.n	800482e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2221      	movs	r2, #33	; 0x21
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2210      	movs	r2, #16
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	893a      	ldrh	r2, [r7, #8]
 800485e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a50      	ldr	r2, [pc, #320]	; (80049b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004870:	8979      	ldrh	r1, [r7, #10]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f9ca 	bl	8004c10 <I2C_MasterRequestWrite>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e08d      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800489c:	e066      	b.n	800496c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fb0c 	bl	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06b      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11b      	bne.n	8004940 <HAL_I2C_Master_Transmit+0x188>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	6a39      	ldr	r1, [r7, #32]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fafc 	bl	8004f42 <I2C_WaitOnBTFFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	2b04      	cmp	r3, #4
 8004956:	d107      	bne.n	8004968 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004966:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e01a      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	2b00      	cmp	r3, #0
 8004972:	d194      	bne.n	800489e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	00100002 	.word	0x00100002
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	; 0x28
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	460b      	mov	r3, r1
 80049c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80049c4:	f7fd faec 	bl	8001fa0 <HAL_GetTick>
 80049c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	f040 8111 	bne.w	8004bfe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2319      	movs	r3, #25
 80049e2:	2201      	movs	r2, #1
 80049e4:	4988      	ldr	r1, [pc, #544]	; (8004c08 <HAL_I2C_IsDeviceReady+0x254>)
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 f994 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
 80049f4:	e104      	b.n	8004c00 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_I2C_IsDeviceReady+0x50>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e0fd      	b.n	8004c00 <HAL_I2C_IsDeviceReady+0x24c>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d007      	beq.n	8004a2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2224      	movs	r2, #36	; 0x24
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a70      	ldr	r2, [pc, #448]	; (8004c0c <HAL_I2C_IsDeviceReady+0x258>)
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f952 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a84:	d103      	bne.n	8004a8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0b6      	b.n	8004c00 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fd fa7d 	bl	8001fa0 <HAL_GetTick>
 8004aa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	2300      	movne	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ad6:	e025      	b.n	8004b24 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ad8:	f7fd fa62 	bl	8001fa0 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <HAL_I2C_IsDeviceReady+0x13a>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d103      	bne.n	8004af6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22a0      	movs	r2, #160	; 0xa0
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2ba0      	cmp	r3, #160	; 0xa0
 8004b2e:	d005      	beq.n	8004b3c <HAL_I2C_IsDeviceReady+0x188>
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d102      	bne.n	8004b3c <HAL_I2C_IsDeviceReady+0x188>
 8004b36:	7dbb      	ldrb	r3, [r7, #22]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0cd      	beq.n	8004ad8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d129      	bne.n	8004ba6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b60:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2319      	movs	r3, #25
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4921      	ldr	r1, [pc, #132]	; (8004c08 <HAL_I2C_IsDeviceReady+0x254>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f8c6 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e036      	b.n	8004c00 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e02c      	b.n	8004c00 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bbe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	2319      	movs	r3, #25
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	490f      	ldr	r1, [pc, #60]	; (8004c08 <HAL_I2C_IsDeviceReady+0x254>)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f8a2 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e012      	b.n	8004c00 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	f4ff af32 	bcc.w	8004a4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004bfe:	2302      	movs	r3, #2
  }
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	00100002 	.word	0x00100002
 8004c0c:	ffff0000 	.word	0xffff0000

08004c10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d006      	beq.n	8004c3a <I2C_MasterRequestWrite+0x2a>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d003      	beq.n	8004c3a <I2C_MasterRequestWrite+0x2a>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c38:	d108      	bne.n	8004c4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e00b      	b.n	8004c64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	2b12      	cmp	r3, #18
 8004c52:	d107      	bne.n	8004c64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f84f 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00d      	beq.n	8004c98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8a:	d103      	bne.n	8004c94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e035      	b.n	8004d04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca0:	d108      	bne.n	8004cb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ca2:	897b      	ldrh	r3, [r7, #10]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004cb0:	611a      	str	r2, [r3, #16]
 8004cb2:	e01b      	b.n	8004cec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cb4:	897b      	ldrh	r3, [r7, #10]
 8004cb6:	11db      	asrs	r3, r3, #7
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f003 0306 	and.w	r3, r3, #6
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f063 030f 	orn	r3, r3, #15
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	490e      	ldr	r1, [pc, #56]	; (8004d0c <I2C_MasterRequestWrite+0xfc>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f875 	bl	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e010      	b.n	8004d04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ce2:	897b      	ldrh	r3, [r7, #10]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4907      	ldr	r1, [pc, #28]	; (8004d10 <I2C_MasterRequestWrite+0x100>)
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f865 	bl	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	00010008 	.word	0x00010008
 8004d10:	00010002 	.word	0x00010002

08004d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d24:	e025      	b.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d021      	beq.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fd f937 	bl	8001fa0 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d116      	bne.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e023      	b.n	8004dba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10d      	bne.n	8004d98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	43da      	mvns	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	e00c      	b.n	8004db2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4013      	ands	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d0b6      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd0:	e051      	b.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de0:	d123      	bne.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e046      	b.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d021      	beq.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fd f8b5 	bl	8001fa0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d116      	bne.n	8004e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f043 0220 	orr.w	r2, r3, #32
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e020      	b.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	0c1b      	lsrs	r3, r3, #16
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10c      	bne.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	e00b      	b.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d18d      	bne.n	8004dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ecc:	e02d      	b.n	8004f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f878 	bl	8004fc4 <I2C_IsAcknowledgeFailed>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e02d      	b.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d021      	beq.n	8004f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee6:	f7fd f85b 	bl	8001fa0 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d302      	bcc.n	8004efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e007      	b.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d1ca      	bne.n	8004ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f4e:	e02d      	b.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f837 	bl	8004fc4 <I2C_IsAcknowledgeFailed>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e02d      	b.n	8004fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d021      	beq.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f68:	f7fd f81a 	bl	8001fa0 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d302      	bcc.n	8004f7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d116      	bne.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e007      	b.n	8004fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d1ca      	bne.n	8004f50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d11b      	bne.n	8005014 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f043 0204 	orr.w	r2, r3, #4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b20      	cmp	r3, #32
 8005036:	d129      	bne.n	800508c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2224      	movs	r2, #36	; 0x24
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0210 	bic.w	r2, r2, #16
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0201 	orr.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800508c:	2302      	movs	r3, #2
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d12a      	bne.n	800510a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2224      	movs	r2, #36	; 0x24
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80050d4:	89fb      	ldrh	r3, [r7, #14]
 80050d6:	f023 030f 	bic.w	r3, r3, #15
 80050da:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	89fa      	ldrh	r2, [r7, #14]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0201 	orr.w	r2, r2, #1
 80050fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e000      	b.n	800510c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800510a:	2302      	movs	r3, #2
  }
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511a:	b08f      	sub	sp, #60	; 0x3c
 800511c:	af0a      	add	r7, sp, #40	; 0x28
 800511e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e10f      	b.n	800534a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fc fd45 	bl	8001bd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f002 ff40 	bl	8007fee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	687e      	ldr	r6, [r7, #4]
 8005176:	466d      	mov	r5, sp
 8005178:	f106 0410 	add.w	r4, r6, #16
 800517c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005184:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005188:	e885 0003 	stmia.w	r5, {r0, r1}
 800518c:	1d33      	adds	r3, r6, #4
 800518e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005190:	6838      	ldr	r0, [r7, #0]
 8005192:	f002 fecb 	bl	8007f2c <USB_CoreInit>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0d0      	b.n	800534a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f002 ff2e 	bl	8008010 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
 80051b8:	e04a      	b.n	8005250 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051ba:	7bfa      	ldrb	r2, [r7, #15]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	333d      	adds	r3, #61	; 0x3d
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	333c      	adds	r3, #60	; 0x3c
 80051de:	7bfa      	ldrb	r2, [r7, #15]
 80051e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	b298      	uxth	r0, r3
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3344      	adds	r3, #68	; 0x44
 80051f6:	4602      	mov	r2, r0
 80051f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	3340      	adds	r3, #64	; 0x40
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3348      	adds	r3, #72	; 0x48
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005222:	7bfa      	ldrb	r2, [r7, #15]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	334c      	adds	r3, #76	; 0x4c
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005236:	7bfa      	ldrb	r2, [r7, #15]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	3354      	adds	r3, #84	; 0x54
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	3301      	adds	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d3af      	bcc.n	80051ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800525a:	2300      	movs	r3, #0
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	e044      	b.n	80052ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	3301      	adds	r3, #1
 80052e8:	73fb      	strb	r3, [r7, #15]
 80052ea:	7bfa      	ldrb	r2, [r7, #15]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d3b5      	bcc.n	8005260 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	687e      	ldr	r6, [r7, #4]
 80052fc:	466d      	mov	r5, sp
 80052fe:	f106 0410 	add.w	r4, r6, #16
 8005302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800530a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800530e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005312:	1d33      	adds	r3, r6, #4
 8005314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005316:	6838      	ldr	r0, [r7, #0]
 8005318:	f002 fec6 	bl	80080a8 <USB_DevInit>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e00d      	b.n	800534a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f003 f891 	bl	800846a <USB_DevDisconnect>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e267      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d075      	beq.n	800545e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005372:	4b88      	ldr	r3, [pc, #544]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b04      	cmp	r3, #4
 800537c:	d00c      	beq.n	8005398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537e:	4b85      	ldr	r3, [pc, #532]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005386:	2b08      	cmp	r3, #8
 8005388:	d112      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538a:	4b82      	ldr	r3, [pc, #520]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005396:	d10b      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	4b7e      	ldr	r3, [pc, #504]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d05b      	beq.n	800545c <HAL_RCC_OscConfig+0x108>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d157      	bne.n	800545c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e242      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d106      	bne.n	80053c8 <HAL_RCC_OscConfig+0x74>
 80053ba:	4b76      	ldr	r3, [pc, #472]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a75      	ldr	r2, [pc, #468]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e01d      	b.n	8005404 <HAL_RCC_OscConfig+0xb0>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x98>
 80053d2:	4b70      	ldr	r3, [pc, #448]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a6f      	ldr	r2, [pc, #444]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b6d      	ldr	r3, [pc, #436]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a6c      	ldr	r2, [pc, #432]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0xb0>
 80053ec:	4b69      	ldr	r3, [pc, #420]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a68      	ldr	r2, [pc, #416]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b66      	ldr	r3, [pc, #408]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a65      	ldr	r2, [pc, #404]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fc fdc8 	bl	8001fa0 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005414:	f7fc fdc4 	bl	8001fa0 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e207      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0xc0>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fc fdb4 	bl	8001fa0 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800543c:	f7fc fdb0 	bl	8001fa0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e1f3      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544e:	4b51      	ldr	r3, [pc, #324]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0xe8>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d063      	beq.n	8005532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800546a:	4b4a      	ldr	r3, [pc, #296]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547e:	2b08      	cmp	r3, #8
 8005480:	d11c      	bne.n	80054bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005482:	4b44      	ldr	r3, [pc, #272]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d116      	bne.n	80054bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548e:	4b41      	ldr	r3, [pc, #260]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_RCC_OscConfig+0x152>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e1c7      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4937      	ldr	r1, [pc, #220]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	e03a      	b.n	8005532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c4:	4b34      	ldr	r3, [pc, #208]	; (8005598 <HAL_RCC_OscConfig+0x244>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7fc fd69 	bl	8001fa0 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d2:	f7fc fd65 	bl	8001fa0 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e1a8      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e4:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4925      	ldr	r1, [pc, #148]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005500:	4313      	orrs	r3, r2
 8005502:	600b      	str	r3, [r1, #0]
 8005504:	e015      	b.n	8005532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <HAL_RCC_OscConfig+0x244>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fc fd48 	bl	8001fa0 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005514:	f7fc fd44 	bl	8001fa0 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e187      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005526:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d036      	beq.n	80055ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <HAL_RCC_OscConfig+0x248>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fc fd28 	bl	8001fa0 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005554:	f7fc fd24 	bl	8001fa0 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e167      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x200>
 8005572:	e01b      	b.n	80055ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_OscConfig+0x248>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557a:	f7fc fd11 	bl	8001fa0 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005580:	e00e      	b.n	80055a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005582:	f7fc fd0d 	bl	8001fa0 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d907      	bls.n	80055a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e150      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
 8005594:	40023800 	.word	0x40023800
 8005598:	42470000 	.word	0x42470000
 800559c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a0:	4b88      	ldr	r3, [pc, #544]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1ea      	bne.n	8005582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8097 	beq.w	80056e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055be:	4b81      	ldr	r3, [pc, #516]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	4b7d      	ldr	r3, [pc, #500]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	4a7c      	ldr	r2, [pc, #496]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6413      	str	r3, [r2, #64]	; 0x40
 80055da:	4b7a      	ldr	r3, [pc, #488]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	4b77      	ldr	r3, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d118      	bne.n	8005628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f6:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a73      	ldr	r2, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 80055fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005602:	f7fc fccd 	bl	8001fa0 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560a:	f7fc fcc9 	bl	8001fa0 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e10c      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561c:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d106      	bne.n	800563e <HAL_RCC_OscConfig+0x2ea>
 8005630:	4b64      	ldr	r3, [pc, #400]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005634:	4a63      	ldr	r2, [pc, #396]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	6713      	str	r3, [r2, #112]	; 0x70
 800563c:	e01c      	b.n	8005678 <HAL_RCC_OscConfig+0x324>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b05      	cmp	r3, #5
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0x30c>
 8005646:	4b5f      	ldr	r3, [pc, #380]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	4a5e      	ldr	r2, [pc, #376]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 800564c:	f043 0304 	orr.w	r3, r3, #4
 8005650:	6713      	str	r3, [r2, #112]	; 0x70
 8005652:	4b5c      	ldr	r3, [pc, #368]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	4a5b      	ldr	r2, [pc, #364]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6713      	str	r3, [r2, #112]	; 0x70
 800565e:	e00b      	b.n	8005678 <HAL_RCC_OscConfig+0x324>
 8005660:	4b58      	ldr	r3, [pc, #352]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a57      	ldr	r2, [pc, #348]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
 800566c:	4b55      	ldr	r3, [pc, #340]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a54      	ldr	r2, [pc, #336]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005672:	f023 0304 	bic.w	r3, r3, #4
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fc fc8e 	bl	8001fa0 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005686:	e00a      	b.n	800569e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f7fc fc8a 	bl	8001fa0 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e0cb      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569e:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ee      	beq.n	8005688 <HAL_RCC_OscConfig+0x334>
 80056aa:	e014      	b.n	80056d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ac:	f7fc fc78 	bl	8001fa0 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fc fc74 	bl	8001fa0 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0b5      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ca:	4b3e      	ldr	r3, [pc, #248]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ee      	bne.n	80056b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d105      	bne.n	80056e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056dc:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	4a38      	ldr	r2, [pc, #224]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a1 	beq.w	8005834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056f2:	4b34      	ldr	r3, [pc, #208]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d05c      	beq.n	80057b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d141      	bne.n	800578a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005706:	4b31      	ldr	r3, [pc, #196]	; (80057cc <HAL_RCC_OscConfig+0x478>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fc fc48 	bl	8001fa0 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005714:	f7fc fc44 	bl	8001fa0 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e087      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005726:	4b27      	ldr	r3, [pc, #156]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	491b      	ldr	r1, [pc, #108]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <HAL_RCC_OscConfig+0x478>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005762:	f7fc fc1d 	bl	8001fa0 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576a:	f7fc fc19 	bl	8001fa0 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e05c      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577c:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCC_OscConfig+0x416>
 8005788:	e054      	b.n	8005834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_RCC_OscConfig+0x478>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fc fc06 	bl	8001fa0 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005798:	f7fc fc02 	bl	8001fa0 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e045      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x444>
 80057b6:	e03d      	b.n	8005834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d107      	bne.n	80057d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e038      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
 80057c4:	40023800 	.word	0x40023800
 80057c8:	40007000 	.word	0x40007000
 80057cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <HAL_RCC_OscConfig+0x4ec>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d028      	beq.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d121      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d11a      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005808:	4293      	cmp	r3, r2
 800580a:	d111      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	3b01      	subs	r3, #1
 800581a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d107      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40023800 	.word	0x40023800

08005844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0cc      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005858:	4b68      	ldr	r3, [pc, #416]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d90c      	bls.n	8005880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	4b65      	ldr	r3, [pc, #404]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b63      	ldr	r3, [pc, #396]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0b8      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005898:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4a58      	ldr	r2, [pc, #352]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b0:	4b53      	ldr	r3, [pc, #332]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a52      	ldr	r2, [pc, #328]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058bc:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	494d      	ldr	r1, [pc, #308]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d044      	beq.n	8005964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d107      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d119      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d003      	beq.n	8005902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005902:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d109      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e06f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005912:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e067      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005922:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f023 0203 	bic.w	r2, r3, #3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4934      	ldr	r1, [pc, #208]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	4313      	orrs	r3, r2
 8005932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005934:	f7fc fb34 	bl	8001fa0 <HAL_GetTick>
 8005938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593a:	e00a      	b.n	8005952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593c:	f7fc fb30 	bl	8001fa0 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	; 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e04f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 020c 	and.w	r2, r3, #12
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	429a      	cmp	r2, r3
 8005962:	d1eb      	bne.n	800593c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005964:	4b25      	ldr	r3, [pc, #148]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d20c      	bcs.n	800598c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b20      	ldr	r3, [pc, #128]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d001      	beq.n	800598c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e032      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4916      	ldr	r1, [pc, #88]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ca:	f000 f821 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	490a      	ldr	r1, [pc, #40]	; (8005a04 <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	5ccb      	ldrb	r3, [r1, r3]
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_RCC_ClockConfig+0x1c8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fc fa94 	bl	8001f18 <HAL_InitTick>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40023c00 	.word	0x40023c00
 8005a00:	40023800 	.word	0x40023800
 8005a04:	08009a98 	.word	0x08009a98
 8005a08:	20000008 	.word	0x20000008
 8005a0c:	2000000c 	.word	0x2000000c

08005a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a14:	b094      	sub	sp, #80	; 0x50
 8005a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a20:	2300      	movs	r3, #0
 8005a22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a28:	4b79      	ldr	r3, [pc, #484]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 030c 	and.w	r3, r3, #12
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d00d      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0x40>
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	f200 80e1 	bhi.w	8005bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x34>
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d003      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a42:	e0db      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a44:	4b73      	ldr	r3, [pc, #460]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a48:	e0db      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a4a:	4b73      	ldr	r3, [pc, #460]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a4e:	e0d8      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a50:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a5a:	4b6d      	ldr	r3, [pc, #436]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d063      	beq.n	8005b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a66:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	099b      	lsrs	r3, r3, #6
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	0159      	lsls	r1, r3, #5
 8005a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a94:	0150      	lsls	r0, r2, #5
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	1a51      	subs	r1, r2, r1
 8005a9e:	6139      	str	r1, [r7, #16]
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	018b      	lsls	r3, r1, #6
 8005ab8:	4651      	mov	r1, sl
 8005aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005abe:	4651      	mov	r1, sl
 8005ac0:	018a      	lsls	r2, r1, #6
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ac8:	4659      	mov	r1, fp
 8005aca:	eb63 0901 	sbc.w	r9, r3, r1
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae2:	4690      	mov	r8, r2
 8005ae4:	4699      	mov	r9, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	eb18 0303 	adds.w	r3, r8, r3
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	462b      	mov	r3, r5
 8005af0:	eb49 0303 	adc.w	r3, r9, r3
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b02:	4629      	mov	r1, r5
 8005b04:	024b      	lsls	r3, r1, #9
 8005b06:	4621      	mov	r1, r4
 8005b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	024a      	lsls	r2, r1, #9
 8005b10:	4610      	mov	r0, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b16:	2200      	movs	r2, #0
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b20:	f7fa fbbe 	bl	80002a0 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4613      	mov	r3, r2
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2c:	e058      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2e:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	2200      	movs	r2, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	4611      	mov	r1, r2
 8005b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	2300      	movs	r3, #0
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
 8005b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	f04f 0000 	mov.w	r0, #0
 8005b50:	f04f 0100 	mov.w	r1, #0
 8005b54:	0159      	lsls	r1, r3, #5
 8005b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b5a:	0150      	lsls	r0, r2, #5
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4641      	mov	r1, r8
 8005b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b66:	4649      	mov	r1, r9
 8005b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b80:	ebb2 040a 	subs.w	r4, r2, sl
 8005b84:	eb63 050b 	sbc.w	r5, r3, fp
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	00eb      	lsls	r3, r5, #3
 8005b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b96:	00e2      	lsls	r2, r4, #3
 8005b98:	4614      	mov	r4, r2
 8005b9a:	461d      	mov	r5, r3
 8005b9c:	4643      	mov	r3, r8
 8005b9e:	18e3      	adds	r3, r4, r3
 8005ba0:	603b      	str	r3, [r7, #0]
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	eb45 0303 	adc.w	r3, r5, r3
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	028b      	lsls	r3, r1, #10
 8005bba:	4621      	mov	r1, r4
 8005bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	028a      	lsls	r2, r1, #10
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bca:	2200      	movs	r2, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	61fa      	str	r2, [r7, #28]
 8005bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd4:	f7fa fb64 	bl	80002a0 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	3301      	adds	r3, #1
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bfa:	e002      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3750      	adds	r7, #80	; 0x50
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	007a1200 	.word	0x007a1200

08005c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c22:	681b      	ldr	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000008 	.word	0x20000008

08005c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c38:	f7ff fff0 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0a9b      	lsrs	r3, r3, #10
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4903      	ldr	r1, [pc, #12]	; (8005c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40023800 	.word	0x40023800
 8005c58:	08009aa8 	.word	0x08009aa8

08005c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c60:	f7ff ffdc 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	0b5b      	lsrs	r3, r3, #13
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	08009aa8 	.word	0x08009aa8

08005c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d075      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cb8:	4b91      	ldr	r3, [pc, #580]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cbe:	f7fc f96f 	bl	8001fa0 <HAL_GetTick>
 8005cc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cc6:	f7fc f96b 	bl	8001fa0 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e189      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd8:	4b8a      	ldr	r3, [pc, #552]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f0      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	019a      	lsls	r2, r3, #6
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	071b      	lsls	r3, r3, #28
 8005cfc:	4981      	ldr	r1, [pc, #516]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01f      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d10:	4b7c      	ldr	r3, [pc, #496]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d16:	0f1b      	lsrs	r3, r3, #28
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	019a      	lsls	r2, r3, #6
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	061b      	lsls	r3, r3, #24
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	071b      	lsls	r3, r3, #28
 8005d30:	4974      	ldr	r1, [pc, #464]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d38:	4b72      	ldr	r3, [pc, #456]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d3e:	f023 021f 	bic.w	r2, r3, #31
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	496e      	ldr	r1, [pc, #440]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00d      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	019a      	lsls	r2, r3, #6
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	061b      	lsls	r3, r3, #24
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	071b      	lsls	r3, r3, #28
 8005d70:	4964      	ldr	r1, [pc, #400]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d78:	4b61      	ldr	r3, [pc, #388]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7e:	f7fc f90f 	bl	8001fa0 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d84:	e008      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d86:	f7fc f90b 	bl	8001fa0 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e129      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d98:	4b5a      	ldr	r3, [pc, #360]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d079      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dbc:	4b52      	ldr	r3, [pc, #328]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc2:	f7fc f8ed 	bl	8001fa0 <HAL_GetTick>
 8005dc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005dca:	f7fc f8e9 	bl	8001fa0 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e107      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ddc:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de8:	d0ef      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d020      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005df6:	4b43      	ldr	r3, [pc, #268]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dfc:	0f1b      	lsrs	r3, r3, #28
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	019a      	lsls	r2, r3, #6
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	061b      	lsls	r3, r3, #24
 8005e10:	431a      	orrs	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	071b      	lsls	r3, r3, #28
 8005e16:	493b      	ldr	r1, [pc, #236]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e1e:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	021b      	lsls	r3, r3, #8
 8005e30:	4934      	ldr	r1, [pc, #208]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01e      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e44:	4b2f      	ldr	r3, [pc, #188]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	0e1b      	lsrs	r3, r3, #24
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	019a      	lsls	r2, r3, #6
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	061b      	lsls	r3, r3, #24
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	071b      	lsls	r3, r3, #28
 8005e64:	4927      	ldr	r1, [pc, #156]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e6c:	4b25      	ldr	r3, [pc, #148]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	4922      	ldr	r1, [pc, #136]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e88:	f7fc f88a 	bl	8001fa0 <HAL_GetTick>
 8005e8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e90:	f7fc f886 	bl	8001fa0 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e0a4      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ea2:	4b18      	ldr	r3, [pc, #96]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eae:	d1ef      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 808b 	beq.w	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ee6:	f7fc f85b 	bl	8001fa0 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005eec:	e010      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005eee:	f7fc f857 	bl	8001fa0 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d909      	bls.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e075      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005f00:	42470068 	.word	0x42470068
 8005f04:	40023800 	.word	0x40023800
 8005f08:	42470070 	.word	0x42470070
 8005f0c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f10:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0e8      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f1c:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f24:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d02f      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d028      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f42:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f4a:	4b2c      	ldr	r3, [pc, #176]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f50:	4a29      	ldr	r2, [pc, #164]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f56:	4b28      	ldr	r3, [pc, #160]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d114      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f62:	f7fc f81d 	bl	8001fa0 <HAL_GetTick>
 8005f66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f68:	e00a      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fc f819 	bl	8001fa0 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e035      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ee      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f98:	d10d      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005f9a:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fae:	4912      	ldr	r1, [pc, #72]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	608b      	str	r3, [r1, #8]
 8005fb4:	e005      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005fb6:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fbc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fc0:	6093      	str	r3, [r2, #8]
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fce:	490a      	ldr	r1, [pc, #40]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005fe8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40007000 	.word	0x40007000
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	42470e40 	.word	0x42470e40
 8006000:	424711e0 	.word	0x424711e0

08006004 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e066      	b.n	80060e8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7f5b      	ldrb	r3, [r3, #29]
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fb fd3e 	bl	8001aac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	22ca      	movs	r2, #202	; 0xca
 800603c:	625a      	str	r2, [r3, #36]	; 0x24
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2253      	movs	r2, #83	; 0x53
 8006044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa45 	bl	80064d6 <RTC_EnterInitMode>
 800604c:	4603      	mov	r3, r0
 800604e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d12c      	bne.n	80060b0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006068:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6899      	ldr	r1, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68d2      	ldr	r2, [r2, #12]
 8006090:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6919      	ldr	r1, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	041a      	lsls	r2, r3, #16
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa4c 	bl	8006544 <RTC_ExitInitMode>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d113      	bne.n	80060de <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	22ff      	movs	r2, #255	; 0xff
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	7f1b      	ldrb	r3, [r3, #28]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_RTC_SetTime+0x1c>
 8006108:	2302      	movs	r3, #2
 800610a:	e087      	b.n	800621c <HAL_RTC_SetTime+0x12c>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2202      	movs	r2, #2
 8006116:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d126      	bne.n	800616c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2200      	movs	r2, #0
 8006130:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fa29 	bl	800658e <RTC_ByteToBcd2>
 800613c:	4603      	mov	r3, r0
 800613e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fa22 	bl	800658e <RTC_ByteToBcd2>
 800614a:	4603      	mov	r3, r0
 800614c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800614e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	789b      	ldrb	r3, [r3, #2]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fa1a 	bl	800658e <RTC_ByteToBcd2>
 800615a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800615c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	78db      	ldrb	r3, [r3, #3]
 8006164:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	e018      	b.n	800619e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800618c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006192:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	78db      	ldrb	r3, [r3, #3]
 8006198:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	22ca      	movs	r2, #202	; 0xca
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2253      	movs	r2, #83	; 0x53
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f991 	bl	80064d6 <RTC_EnterInitMode>
 80061b4:	4603      	mov	r3, r0
 80061b6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80061b8:	7cfb      	ldrb	r3, [r7, #19]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d120      	bne.n	8006200 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80061c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061cc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6899      	ldr	r1, [r3, #8]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f9a4 	bl	8006544 <RTC_ExitInitMode>
 80061fc:	4603      	mov	r3, r0
 80061fe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006200:	7cfb      	ldrb	r3, [r7, #19]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d102      	bne.n	800620c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	771a      	strb	r2, [r3, #28]

  return status;
 800621a:	7cfb      	ldrb	r3, [r7, #19]
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	bd90      	pop	{r4, r7, pc}

08006224 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006256:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800625a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	0c1b      	lsrs	r3, r3, #16
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006266:	b2da      	uxtb	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	0a1b      	lsrs	r3, r3, #8
 8006270:	b2db      	uxtb	r3, r3
 8006272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006276:	b2da      	uxtb	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	0d9b      	lsrs	r3, r3, #22
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11a      	bne.n	80062d6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 f98f 	bl	80065c8 <RTC_Bcd2ToByte>
 80062aa:	4603      	mov	r3, r0
 80062ac:	461a      	mov	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f986 	bl	80065c8 <RTC_Bcd2ToByte>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	789b      	ldrb	r3, [r3, #2]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f97d 	bl	80065c8 <RTC_Bcd2ToByte>
 80062ce:	4603      	mov	r3, r0
 80062d0:	461a      	mov	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	7f1b      	ldrb	r3, [r3, #28]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_RTC_SetDate+0x1c>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e071      	b.n	80063e0 <HAL_RTC_SetDate+0x100>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10e      	bne.n	800632c <HAL_RTC_SetDate+0x4c>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	785b      	ldrb	r3, [r3, #1]
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b00      	cmp	r3, #0
 8006318:	d008      	beq.n	800632c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	f023 0310 	bic.w	r3, r3, #16
 8006322:	b2db      	uxtb	r3, r3
 8006324:	330a      	adds	r3, #10
 8006326:	b2da      	uxtb	r2, r3
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d11c      	bne.n	800636c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	78db      	ldrb	r3, [r3, #3]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f929 	bl	800658e <RTC_ByteToBcd2>
 800633c:	4603      	mov	r3, r0
 800633e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	4618      	mov	r0, r3
 8006346:	f000 f922 	bl	800658e <RTC_ByteToBcd2>
 800634a:	4603      	mov	r3, r0
 800634c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800634e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	789b      	ldrb	r3, [r3, #2]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f91a 	bl	800658e <RTC_ByteToBcd2>
 800635a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800635c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	e00e      	b.n	800638a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	78db      	ldrb	r3, [r3, #3]
 8006370:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	785b      	ldrb	r3, [r3, #1]
 8006376:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006378:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800637e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	22ca      	movs	r2, #202	; 0xca
 8006390:	625a      	str	r2, [r3, #36]	; 0x24
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2253      	movs	r2, #83	; 0x53
 8006398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f89b 	bl	80064d6 <RTC_EnterInitMode>
 80063a0:	4603      	mov	r3, r0
 80063a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80063a4:	7cfb      	ldrb	r3, [r7, #19]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10c      	bne.n	80063c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f8c2 	bl	8006544 <RTC_ExitInitMode>
 80063c0:	4603      	mov	r3, r0
 80063c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80063c4:	7cfb      	ldrb	r3, [r7, #19]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	22ff      	movs	r2, #255	; 0xff
 80063d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	771a      	strb	r2, [r3, #28]

  return status;
 80063de:	7cfb      	ldrb	r3, [r7, #19]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd90      	pop	{r4, r7, pc}

080063e8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006402:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006406:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	0c1b      	lsrs	r3, r3, #16
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	b2db      	uxtb	r3, r3
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	b2da      	uxtb	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	0b5b      	lsrs	r3, r3, #13
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	b2da      	uxtb	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d11a      	bne.n	800647c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	78db      	ldrb	r3, [r3, #3]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f8bc 	bl	80065c8 <RTC_Bcd2ToByte>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 f8b3 	bl	80065c8 <RTC_Bcd2ToByte>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	789b      	ldrb	r3, [r3, #2]
 800646e:	4618      	mov	r0, r3
 8006470:	f000 f8aa 	bl	80065c8 <RTC_Bcd2ToByte>
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064a0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064a2:	f7fb fd7d 	bl	8001fa0 <HAL_GetTick>
 80064a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064a8:	e009      	b.n	80064be <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064aa:	f7fb fd79 	bl	8001fa0 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b8:	d901      	bls.n	80064be <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e007      	b.n	80064ce <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ee      	beq.n	80064aa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d122      	bne.n	800653a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006502:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006504:	f7fb fd4c 	bl	8001fa0 <HAL_GetTick>
 8006508:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800650a:	e00c      	b.n	8006526 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800650c:	f7fb fd48 	bl	8001fa0 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800651a:	d904      	bls.n	8006526 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <RTC_EnterInitMode+0x64>
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d1e8      	bne.n	800650c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800655e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff ff89 	bl	8006486 <HAL_RTC_WaitForSynchro>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2204      	movs	r2, #4
 800657e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	4603      	mov	r3, r0
 8006596:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800659c:	e005      	b.n	80065aa <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	3301      	adds	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	3b0a      	subs	r3, #10
 80065a8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d8f6      	bhi.n	800659e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	b2db      	uxtb	r3, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	0092      	lsls	r2, r2, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	4413      	add	r3, r2
 80065f2:	b2db      	uxtb	r3, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e041      	b.n	8006696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fb fa6a 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f000 fa96 	bl	8006b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d001      	beq.n	80066b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e04e      	b.n	8006756 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a23      	ldr	r2, [pc, #140]	; (8006764 <HAL_TIM_Base_Start_IT+0xc4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d022      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x80>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e2:	d01d      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <HAL_TIM_Base_Start_IT+0xc8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d018      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x80>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1e      	ldr	r2, [pc, #120]	; (800676c <HAL_TIM_Base_Start_IT+0xcc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x80>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <HAL_TIM_Base_Start_IT+0xd0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00e      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x80>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a1b      	ldr	r2, [pc, #108]	; (8006774 <HAL_TIM_Base_Start_IT+0xd4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d009      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x80>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <HAL_TIM_Base_Start_IT+0xd8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x80>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a18      	ldr	r2, [pc, #96]	; (800677c <HAL_TIM_Base_Start_IT+0xdc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d111      	bne.n	8006744 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b06      	cmp	r3, #6
 8006730:	d010      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006742:	e007      	b.n	8006754 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40010000 	.word	0x40010000
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40000c00 	.word	0x40000c00
 8006774:	40010400 	.word	0x40010400
 8006778:	40014000 	.word	0x40014000
 800677c:	40001800 	.word	0x40001800

08006780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d122      	bne.n	80067dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d11b      	bne.n	80067dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0202 	mvn.w	r2, #2
 80067ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9b5 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 80067c8:	e005      	b.n	80067d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9a7 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f9b8 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d122      	bne.n	8006830 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d11b      	bne.n	8006830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f06f 0204 	mvn.w	r2, #4
 8006800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f98b 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 800681c:	e005      	b.n	800682a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f97d 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f98e 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b08      	cmp	r3, #8
 800683c:	d122      	bne.n	8006884 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d11b      	bne.n	8006884 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0208 	mvn.w	r2, #8
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2204      	movs	r2, #4
 800685a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f961 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 8006870:	e005      	b.n	800687e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f953 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f964 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b10      	cmp	r3, #16
 8006890:	d122      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b10      	cmp	r3, #16
 800689e:	d11b      	bne.n	80068d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f06f 0210 	mvn.w	r2, #16
 80068a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2208      	movs	r2, #8
 80068ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f937 	bl	8006b32 <HAL_TIM_IC_CaptureCallback>
 80068c4:	e005      	b.n	80068d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f929 	bl	8006b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f93a 	bl	8006b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d10e      	bne.n	8006904 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d107      	bne.n	8006904 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0201 	mvn.w	r2, #1
 80068fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa f85c 	bl	80009bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690e:	2b80      	cmp	r3, #128	; 0x80
 8006910:	d10e      	bne.n	8006930 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b80      	cmp	r3, #128	; 0x80
 800691e:	d107      	bne.n	8006930 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fae0 	bl	8006ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d10e      	bne.n	800695c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d107      	bne.n	800695c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f8ff 	bl	8006b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b20      	cmp	r3, #32
 8006968:	d10e      	bne.n	8006988 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b20      	cmp	r3, #32
 8006976:	d107      	bne.n	8006988 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0220 	mvn.w	r2, #32
 8006980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 faaa 	bl	8006edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_TIM_ConfigClockSource+0x1c>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e0b4      	b.n	8006b16 <HAL_TIM_ConfigClockSource+0x186>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e4:	d03e      	beq.n	8006a64 <HAL_TIM_ConfigClockSource+0xd4>
 80069e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ea:	f200 8087 	bhi.w	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 80069ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f2:	f000 8086 	beq.w	8006b02 <HAL_TIM_ConfigClockSource+0x172>
 80069f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fa:	d87f      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b70      	cmp	r3, #112	; 0x70
 80069fe:	d01a      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0xa6>
 8006a00:	2b70      	cmp	r3, #112	; 0x70
 8006a02:	d87b      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a04:	2b60      	cmp	r3, #96	; 0x60
 8006a06:	d050      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0x11a>
 8006a08:	2b60      	cmp	r3, #96	; 0x60
 8006a0a:	d877      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b50      	cmp	r3, #80	; 0x50
 8006a0e:	d03c      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0xfa>
 8006a10:	2b50      	cmp	r3, #80	; 0x50
 8006a12:	d873      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b40      	cmp	r3, #64	; 0x40
 8006a16:	d058      	beq.n	8006aca <HAL_TIM_ConfigClockSource+0x13a>
 8006a18:	2b40      	cmp	r3, #64	; 0x40
 8006a1a:	d86f      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b30      	cmp	r3, #48	; 0x30
 8006a1e:	d064      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a20:	2b30      	cmp	r3, #48	; 0x30
 8006a22:	d86b      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d060      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d867      	bhi.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d05c      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	d05a      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0x15a>
 8006a34:	e062      	b.n	8006afc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6899      	ldr	r1, [r3, #8]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f000 f9ad 	bl	8006da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	609a      	str	r2, [r3, #8]
      break;
 8006a62:	e04f      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	6899      	ldr	r1, [r3, #8]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f000 f996 	bl	8006da4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a86:	609a      	str	r2, [r3, #8]
      break;
 8006a88:	e03c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6859      	ldr	r1, [r3, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f000 f90a 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2150      	movs	r1, #80	; 0x50
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 f963 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006aa8:	e02c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6859      	ldr	r1, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f000 f929 	bl	8006d0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2160      	movs	r1, #96	; 0x60
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 f953 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006ac8:	e01c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	6859      	ldr	r1, [r3, #4]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f000 f8ea 	bl	8006cb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2140      	movs	r1, #64	; 0x40
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f943 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006ae8:	e00c      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	4610      	mov	r0, r2
 8006af6:	f000 f93a 	bl	8006d6e <TIM_ITRx_SetConfig>
      break;
 8006afa:	e003      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	73fb      	strb	r3, [r7, #15]
      break;
 8006b00:	e000      	b.n	8006b04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a40      	ldr	r2, [pc, #256]	; (8006c84 <TIM_Base_SetConfig+0x114>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8e:	d00f      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3d      	ldr	r2, [pc, #244]	; (8006c88 <TIM_Base_SetConfig+0x118>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00b      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3c      	ldr	r2, [pc, #240]	; (8006c8c <TIM_Base_SetConfig+0x11c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3b      	ldr	r2, [pc, #236]	; (8006c90 <TIM_Base_SetConfig+0x120>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3a      	ldr	r2, [pc, #232]	; (8006c94 <TIM_Base_SetConfig+0x124>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d108      	bne.n	8006bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a2f      	ldr	r2, [pc, #188]	; (8006c84 <TIM_Base_SetConfig+0x114>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d02b      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd0:	d027      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a2c      	ldr	r2, [pc, #176]	; (8006c88 <TIM_Base_SetConfig+0x118>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d023      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2b      	ldr	r2, [pc, #172]	; (8006c8c <TIM_Base_SetConfig+0x11c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01f      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2a      	ldr	r2, [pc, #168]	; (8006c90 <TIM_Base_SetConfig+0x120>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01b      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a29      	ldr	r2, [pc, #164]	; (8006c94 <TIM_Base_SetConfig+0x124>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d017      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a28      	ldr	r2, [pc, #160]	; (8006c98 <TIM_Base_SetConfig+0x128>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a27      	ldr	r2, [pc, #156]	; (8006c9c <TIM_Base_SetConfig+0x12c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a26      	ldr	r2, [pc, #152]	; (8006ca0 <TIM_Base_SetConfig+0x130>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a25      	ldr	r2, [pc, #148]	; (8006ca4 <TIM_Base_SetConfig+0x134>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a24      	ldr	r2, [pc, #144]	; (8006ca8 <TIM_Base_SetConfig+0x138>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a23      	ldr	r2, [pc, #140]	; (8006cac <TIM_Base_SetConfig+0x13c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d108      	bne.n	8006c34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <TIM_Base_SetConfig+0x114>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0xf8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0c      	ldr	r2, [pc, #48]	; (8006c94 <TIM_Base_SetConfig+0x124>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d103      	bne.n	8006c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	615a      	str	r2, [r3, #20]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40010400 	.word	0x40010400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800
 8006ca4:	40001800 	.word	0x40001800
 8006ca8:	40001c00 	.word	0x40001c00
 8006cac:	40002000 	.word	0x40002000

08006cb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f023 0201 	bic.w	r2, r3, #1
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 030a 	bic.w	r3, r3, #10
 8006cec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b087      	sub	sp, #28
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f023 0210 	bic.w	r2, r3, #16
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	031b      	lsls	r3, r3, #12
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f043 0307 	orr.w	r3, r3, #7
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	021a      	lsls	r2, r3, #8
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	609a      	str	r2, [r3, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e05a      	b.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a21      	ldr	r2, [pc, #132]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d022      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e48:	d01d      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1b      	ldr	r2, [pc, #108]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1a      	ldr	r2, [pc, #104]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a18      	ldr	r2, [pc, #96]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d10c      	bne.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40000400 	.word	0x40000400
 8006ec8:	40000800 	.word	0x40000800
 8006ecc:	40000c00 	.word	0x40000c00
 8006ed0:	40010400 	.word	0x40010400
 8006ed4:	40014000 	.word	0x40014000
 8006ed8:	40001800 	.word	0x40001800

08006edc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e03f      	b.n	8006f96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fa fe0a 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2224      	movs	r2, #36	; 0x24
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fd7b 	bl	8007a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695a      	ldr	r2, [r3, #20]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b08a      	sub	sp, #40	; 0x28
 8006fa2:	af02      	add	r7, sp, #8
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d17c      	bne.n	80070b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_UART_Transmit+0x2c>
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e075      	b.n	80070ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Transmit+0x3e>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e06e      	b.n	80070ba <HAL_UART_Transmit+0x11c>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2221      	movs	r2, #33	; 0x21
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff2:	f7fa ffd5 	bl	8001fa0 <HAL_GetTick>
 8006ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700c:	d108      	bne.n	8007020 <HAL_UART_Transmit+0x82>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	e003      	b.n	8007028 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007030:	e02a      	b.n	8007088 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	2180      	movs	r1, #128	; 0x80
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 faf9 	bl	8007634 <UART_WaitOnFlagUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e036      	b.n	80070ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10b      	bne.n	800706a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	3302      	adds	r3, #2
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	e007      	b.n	800707a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	3301      	adds	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1cf      	bne.n	8007032 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	2140      	movs	r1, #64	; 0x40
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fac9 	bl	8007634 <UART_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e006      	b.n	80070ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e000      	b.n	80070ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
  }
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
	...

080070c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b0ba      	sub	sp, #232	; 0xe8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10f      	bne.n	800712a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <HAL_UART_IRQHandler+0x66>
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fbd3 	bl	80078ce <UART_Receive_IT>
      return;
 8007128:	e256      	b.n	80075d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800712a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80de 	beq.w	80072f0 <HAL_UART_IRQHandler+0x22c>
 8007134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d106      	bne.n	800714e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007144:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80d1 	beq.w	80072f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00b      	beq.n	8007172 <HAL_UART_IRQHandler+0xae>
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f043 0201 	orr.w	r2, r3, #1
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <HAL_UART_IRQHandler+0xd2>
 800717e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f043 0202 	orr.w	r2, r3, #2
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <HAL_UART_IRQHandler+0xf6>
 80071a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f043 0204 	orr.w	r2, r3, #4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <HAL_UART_IRQHandler+0x126>
 80071c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d105      	bne.n	80071de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f043 0208 	orr.w	r2, r3, #8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 81ed 	beq.w	80075ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_UART_IRQHandler+0x14e>
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fb5e 	bl	80078ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	bf0c      	ite	eq
 8007220:	2301      	moveq	r3, #1
 8007222:	2300      	movne	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <HAL_UART_IRQHandler+0x17a>
 8007236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d04f      	beq.n	80072de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fa66 	bl	8007710 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	d141      	bne.n	80072d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3314      	adds	r3, #20
 8007258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800726c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3314      	adds	r3, #20
 800727a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800727e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800728a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1d9      	bne.n	8007252 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d013      	beq.n	80072ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	4a7d      	ldr	r2, [pc, #500]	; (80074a0 <HAL_UART_IRQHandler+0x3dc>)
 80072ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fb fe72 	bl	8002f9c <HAL_DMA_Abort_IT>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d016      	beq.n	80072ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072c8:	4610      	mov	r0, r2
 80072ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	e00e      	b.n	80072ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f99a 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e00a      	b.n	80072ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f996 	bl	8007608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	e006      	b.n	80072ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f992 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80072ea:	e170      	b.n	80075ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ec:	bf00      	nop
    return;
 80072ee:	e16e      	b.n	80075ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	f040 814a 	bne.w	800758e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fe:	f003 0310 	and.w	r3, r3, #16
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8143 	beq.w	800758e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 813c 	beq.w	800758e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60bb      	str	r3, [r7, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	f040 80b4 	bne.w	80074a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8140 	beq.w	80075d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800735a:	429a      	cmp	r2, r3
 800735c:	f080 8139 	bcs.w	80075d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007366:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007372:	f000 8088 	beq.w	8007486 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	330c      	adds	r3, #12
 800737c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800738c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1d9      	bne.n	8007376 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3314      	adds	r3, #20
 80073c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073cc:	e853 3f00 	ldrex	r3, [r3]
 80073d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3314      	adds	r3, #20
 80073e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e1      	bne.n	80073c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3314      	adds	r3, #20
 8007404:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800740e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3314      	adds	r3, #20
 800741e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007422:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007428:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e3      	bne.n	80073fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	330c      	adds	r3, #12
 800744a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007456:	f023 0310 	bic.w	r3, r3, #16
 800745a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007468:	65ba      	str	r2, [r7, #88]	; 0x58
 800746a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800746e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e3      	bne.n	8007444 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	4618      	mov	r0, r3
 8007482:	f7fb fd1b 	bl	8002ebc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800748e:	b29b      	uxth	r3, r3
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	b29b      	uxth	r3, r3
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f8c0 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800749c:	e099      	b.n	80075d2 <HAL_UART_IRQHandler+0x50e>
 800749e:	bf00      	nop
 80074a0:	080077d7 	.word	0x080077d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 808b 	beq.w	80075d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8086 	beq.w	80075d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	330c      	adds	r3, #12
 80074d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074ee:	647a      	str	r2, [r7, #68]	; 0x44
 80074f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e3      	bne.n	80074ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3314      	adds	r3, #20
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	623b      	str	r3, [r7, #32]
   return(result);
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007526:	633a      	str	r2, [r7, #48]	; 0x30
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800752c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e3      	bne.n	8007502 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	60fb      	str	r3, [r7, #12]
   return(result);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0310 	bic.w	r3, r3, #16
 800755e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800756c:	61fa      	str	r2, [r7, #28]
 800756e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	69b9      	ldr	r1, [r7, #24]
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	617b      	str	r3, [r7, #20]
   return(result);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e3      	bne.n	8007548 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f848 	bl	800761c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800758c:	e023      	b.n	80075d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <HAL_UART_IRQHandler+0x4ea>
 800759a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f929 	bl	80077fe <UART_Transmit_IT>
    return;
 80075ac:	e014      	b.n	80075d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00e      	beq.n	80075d8 <HAL_UART_IRQHandler+0x514>
 80075ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f969 	bl	800789e <UART_EndTransmit_IT>
    return;
 80075cc:	e004      	b.n	80075d8 <HAL_UART_IRQHandler+0x514>
    return;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <HAL_UART_IRQHandler+0x514>
      return;
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <HAL_UART_IRQHandler+0x514>
      return;
 80075d6:	bf00      	nop
  }
}
 80075d8:	37e8      	adds	r7, #232	; 0xe8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop

080075e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b090      	sub	sp, #64	; 0x40
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	4613      	mov	r3, r2
 8007642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007644:	e050      	b.n	80076e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764c:	d04c      	beq.n	80076e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800764e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <UART_WaitOnFlagUntilTimeout+0x30>
 8007654:	f7fa fca4 	bl	8001fa0 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007660:	429a      	cmp	r2, r3
 8007662:	d241      	bcs.n	80076e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	330c      	adds	r3, #12
 800766a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007684:	637a      	str	r2, [r7, #52]	; 0x34
 8007686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800768a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e5      	bne.n	8007664 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3314      	adds	r3, #20
 800769e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	613b      	str	r3, [r7, #16]
   return(result);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f023 0301 	bic.w	r3, r3, #1
 80076ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3314      	adds	r3, #20
 80076b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076b8:	623a      	str	r2, [r7, #32]
 80076ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	69f9      	ldr	r1, [r7, #28]
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	e841 2300 	strex	r3, r2, [r1]
 80076c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e5      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e00f      	b.n	8007708 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	bf0c      	ite	eq
 80076f8:	2301      	moveq	r3, #1
 80076fa:	2300      	movne	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	461a      	mov	r2, r3
 8007700:	79fb      	ldrb	r3, [r7, #7]
 8007702:	429a      	cmp	r2, r3
 8007704:	d09f      	beq.n	8007646 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3740      	adds	r7, #64	; 0x40
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b095      	sub	sp, #84	; 0x54
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	330c      	adds	r3, #12
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800772e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	330c      	adds	r3, #12
 8007736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007738:	643a      	str	r2, [r7, #64]	; 0x40
 800773a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800773e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e5      	bne.n	8007718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3314      	adds	r3, #20
 8007752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	61fb      	str	r3, [r7, #28]
   return(result);
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	64bb      	str	r3, [r7, #72]	; 0x48
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3314      	adds	r3, #20
 800776a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800776c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e5      	bne.n	800774c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	2b01      	cmp	r3, #1
 8007786:	d119      	bne.n	80077bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	60bb      	str	r3, [r7, #8]
   return(result);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0310 	bic.w	r3, r3, #16
 800779e:	647b      	str	r3, [r7, #68]	; 0x44
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	330c      	adds	r3, #12
 80077a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a8:	61ba      	str	r2, [r7, #24]
 80077aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6979      	ldr	r1, [r7, #20]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	613b      	str	r3, [r7, #16]
   return(result);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e5      	bne.n	8007788 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077ca:	bf00      	nop
 80077cc:	3754      	adds	r7, #84	; 0x54
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f7ff ff09 	bl	8007608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b21      	cmp	r3, #33	; 0x21
 8007810:	d13e      	bne.n	8007890 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781a:	d114      	bne.n	8007846 <UART_Transmit_IT+0x48>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d110      	bne.n	8007846 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a1b      	ldr	r3, [r3, #32]
 8007828:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007838:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	1c9a      	adds	r2, r3, #2
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	621a      	str	r2, [r3, #32]
 8007844:	e008      	b.n	8007858 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	1c59      	adds	r1, r3, #1
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6211      	str	r1, [r2, #32]
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29b      	uxth	r3, r3
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	4619      	mov	r1, r3
 8007866:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10f      	bne.n	800788c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800787a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800788a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	e000      	b.n	8007892 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007890:	2302      	movs	r3, #2
  }
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68da      	ldr	r2, [r3, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fe8e 	bl	80075e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b08c      	sub	sp, #48	; 0x30
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b22      	cmp	r3, #34	; 0x22
 80078e0:	f040 80ab 	bne.w	8007a3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ec:	d117      	bne.n	800791e <UART_Receive_IT+0x50>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d113      	bne.n	800791e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790c:	b29a      	uxth	r2, r3
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	1c9a      	adds	r2, r3, #2
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	629a      	str	r2, [r3, #40]	; 0x28
 800791c:	e026      	b.n	800796c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007924:	2300      	movs	r3, #0
 8007926:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007930:	d007      	beq.n	8007942 <UART_Receive_IT+0x74>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <UART_Receive_IT+0x82>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e008      	b.n	8007962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795c:	b2da      	uxtb	r2, r3
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29b      	uxth	r3, r3
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	4619      	mov	r1, r3
 800797a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800797c:	2b00      	cmp	r3, #0
 800797e:	d15a      	bne.n	8007a36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0220 	bic.w	r2, r2, #32
 800798e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800799e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695a      	ldr	r2, [r3, #20]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0201 	bic.w	r2, r2, #1
 80079ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d135      	bne.n	8007a2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	613b      	str	r3, [r7, #16]
   return(result);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f023 0310 	bic.w	r3, r3, #16
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	330c      	adds	r3, #12
 80079e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e6:	623a      	str	r2, [r7, #32]
 80079e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	69f9      	ldr	r1, [r7, #28]
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e5      	bne.n	80079c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b10      	cmp	r3, #16
 8007a06:	d10a      	bne.n	8007a1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff fdf9 	bl	800761c <HAL_UARTEx_RxEventCallback>
 8007a2a:	e002      	b.n	8007a32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7ff fde1 	bl	80075f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	e002      	b.n	8007a3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e000      	b.n	8007a3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a3a:	2302      	movs	r3, #2
  }
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3730      	adds	r7, #48	; 0x30
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a48:	b0c0      	sub	sp, #256	; 0x100
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a60:	68d9      	ldr	r1, [r3, #12]
 8007a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	ea40 0301 	orr.w	r3, r0, r1
 8007a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a9c:	f021 010c 	bic.w	r1, r1, #12
 8007aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abe:	6999      	ldr	r1, [r3, #24]
 8007ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	ea40 0301 	orr.w	r3, r0, r1
 8007aca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b8f      	ldr	r3, [pc, #572]	; (8007d10 <UART_SetConfig+0x2cc>)
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d005      	beq.n	8007ae4 <UART_SetConfig+0xa0>
 8007ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	4b8d      	ldr	r3, [pc, #564]	; (8007d14 <UART_SetConfig+0x2d0>)
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d104      	bne.n	8007aee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ae4:	f7fe f8ba 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8007ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007aec:	e003      	b.n	8007af6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007aee:	f7fe f8a1 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 8007af2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b00:	f040 810c 	bne.w	8007d1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b16:	4622      	mov	r2, r4
 8007b18:	462b      	mov	r3, r5
 8007b1a:	1891      	adds	r1, r2, r2
 8007b1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b1e:	415b      	adcs	r3, r3
 8007b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b26:	4621      	mov	r1, r4
 8007b28:	eb12 0801 	adds.w	r8, r2, r1
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	eb43 0901 	adc.w	r9, r3, r1
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b46:	4690      	mov	r8, r2
 8007b48:	4699      	mov	r9, r3
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	eb18 0303 	adds.w	r3, r8, r3
 8007b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b54:	462b      	mov	r3, r5
 8007b56:	eb49 0303 	adc.w	r3, r9, r3
 8007b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b72:	460b      	mov	r3, r1
 8007b74:	18db      	adds	r3, r3, r3
 8007b76:	653b      	str	r3, [r7, #80]	; 0x50
 8007b78:	4613      	mov	r3, r2
 8007b7a:	eb42 0303 	adc.w	r3, r2, r3
 8007b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b88:	f7f8 fb8a 	bl	80002a0 <__aeabi_uldivmod>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4b61      	ldr	r3, [pc, #388]	; (8007d18 <UART_SetConfig+0x2d4>)
 8007b92:	fba3 2302 	umull	r2, r3, r3, r2
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	011c      	lsls	r4, r3, #4
 8007b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ba4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bac:	4642      	mov	r2, r8
 8007bae:	464b      	mov	r3, r9
 8007bb0:	1891      	adds	r1, r2, r2
 8007bb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bb4:	415b      	adcs	r3, r3
 8007bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bbc:	4641      	mov	r1, r8
 8007bbe:	eb12 0a01 	adds.w	sl, r2, r1
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	eb43 0b01 	adc.w	fp, r3, r1
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bdc:	4692      	mov	sl, r2
 8007bde:	469b      	mov	fp, r3
 8007be0:	4643      	mov	r3, r8
 8007be2:	eb1a 0303 	adds.w	r3, sl, r3
 8007be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bea:	464b      	mov	r3, r9
 8007bec:	eb4b 0303 	adc.w	r3, fp, r3
 8007bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	18db      	adds	r3, r3, r3
 8007c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c0e:	4613      	mov	r3, r2
 8007c10:	eb42 0303 	adc.w	r3, r2, r3
 8007c14:	647b      	str	r3, [r7, #68]	; 0x44
 8007c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c1e:	f7f8 fb3f 	bl	80002a0 <__aeabi_uldivmod>
 8007c22:	4602      	mov	r2, r0
 8007c24:	460b      	mov	r3, r1
 8007c26:	4611      	mov	r1, r2
 8007c28:	4b3b      	ldr	r3, [pc, #236]	; (8007d18 <UART_SetConfig+0x2d4>)
 8007c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c2e:	095b      	lsrs	r3, r3, #5
 8007c30:	2264      	movs	r2, #100	; 0x64
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	1acb      	subs	r3, r1, r3
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c3e:	4b36      	ldr	r3, [pc, #216]	; (8007d18 <UART_SetConfig+0x2d4>)
 8007c40:	fba3 2302 	umull	r2, r3, r3, r2
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c4c:	441c      	add	r4, r3
 8007c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c60:	4642      	mov	r2, r8
 8007c62:	464b      	mov	r3, r9
 8007c64:	1891      	adds	r1, r2, r2
 8007c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c68:	415b      	adcs	r3, r3
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c70:	4641      	mov	r1, r8
 8007c72:	1851      	adds	r1, r2, r1
 8007c74:	6339      	str	r1, [r7, #48]	; 0x30
 8007c76:	4649      	mov	r1, r9
 8007c78:	414b      	adcs	r3, r1
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c88:	4659      	mov	r1, fp
 8007c8a:	00cb      	lsls	r3, r1, #3
 8007c8c:	4651      	mov	r1, sl
 8007c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c92:	4651      	mov	r1, sl
 8007c94:	00ca      	lsls	r2, r1, #3
 8007c96:	4610      	mov	r0, r2
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	189b      	adds	r3, r3, r2
 8007ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	460a      	mov	r2, r1
 8007ca8:	eb42 0303 	adc.w	r3, r2, r3
 8007cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	18db      	adds	r3, r3, r3
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cca:	4613      	mov	r3, r2
 8007ccc:	eb42 0303 	adc.w	r3, r2, r3
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cda:	f7f8 fae1 	bl	80002a0 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <UART_SetConfig+0x2d4>)
 8007ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	2164      	movs	r1, #100	; 0x64
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	3332      	adds	r3, #50	; 0x32
 8007cf6:	4a08      	ldr	r2, [pc, #32]	; (8007d18 <UART_SetConfig+0x2d4>)
 8007cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	f003 0207 	and.w	r2, r3, #7
 8007d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4422      	add	r2, r4
 8007d0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d0c:	e106      	b.n	8007f1c <UART_SetConfig+0x4d8>
 8007d0e:	bf00      	nop
 8007d10:	40011000 	.word	0x40011000
 8007d14:	40011400 	.word	0x40011400
 8007d18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d20:	2200      	movs	r2, #0
 8007d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d2e:	4642      	mov	r2, r8
 8007d30:	464b      	mov	r3, r9
 8007d32:	1891      	adds	r1, r2, r2
 8007d34:	6239      	str	r1, [r7, #32]
 8007d36:	415b      	adcs	r3, r3
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d3e:	4641      	mov	r1, r8
 8007d40:	1854      	adds	r4, r2, r1
 8007d42:	4649      	mov	r1, r9
 8007d44:	eb43 0501 	adc.w	r5, r3, r1
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	00eb      	lsls	r3, r5, #3
 8007d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d56:	00e2      	lsls	r2, r4, #3
 8007d58:	4614      	mov	r4, r2
 8007d5a:	461d      	mov	r5, r3
 8007d5c:	4643      	mov	r3, r8
 8007d5e:	18e3      	adds	r3, r4, r3
 8007d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d64:	464b      	mov	r3, r9
 8007d66:	eb45 0303 	adc.w	r3, r5, r3
 8007d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d7e:	f04f 0200 	mov.w	r2, #0
 8007d82:	f04f 0300 	mov.w	r3, #0
 8007d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	008b      	lsls	r3, r1, #2
 8007d8e:	4621      	mov	r1, r4
 8007d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d94:	4621      	mov	r1, r4
 8007d96:	008a      	lsls	r2, r1, #2
 8007d98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d9c:	f7f8 fa80 	bl	80002a0 <__aeabi_uldivmod>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4b60      	ldr	r3, [pc, #384]	; (8007f28 <UART_SetConfig+0x4e4>)
 8007da6:	fba3 2302 	umull	r2, r3, r3, r2
 8007daa:	095b      	lsrs	r3, r3, #5
 8007dac:	011c      	lsls	r4, r3, #4
 8007dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007dbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	1891      	adds	r1, r2, r2
 8007dc6:	61b9      	str	r1, [r7, #24]
 8007dc8:	415b      	adcs	r3, r3
 8007dca:	61fb      	str	r3, [r7, #28]
 8007dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dd0:	4641      	mov	r1, r8
 8007dd2:	1851      	adds	r1, r2, r1
 8007dd4:	6139      	str	r1, [r7, #16]
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	414b      	adcs	r3, r1
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007de8:	4659      	mov	r1, fp
 8007dea:	00cb      	lsls	r3, r1, #3
 8007dec:	4651      	mov	r1, sl
 8007dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007df2:	4651      	mov	r1, sl
 8007df4:	00ca      	lsls	r2, r1, #3
 8007df6:	4610      	mov	r0, r2
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	189b      	adds	r3, r3, r2
 8007e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e04:	464b      	mov	r3, r9
 8007e06:	460a      	mov	r2, r1
 8007e08:	eb42 0303 	adc.w	r3, r2, r3
 8007e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e28:	4649      	mov	r1, r9
 8007e2a:	008b      	lsls	r3, r1, #2
 8007e2c:	4641      	mov	r1, r8
 8007e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e32:	4641      	mov	r1, r8
 8007e34:	008a      	lsls	r2, r1, #2
 8007e36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e3a:	f7f8 fa31 	bl	80002a0 <__aeabi_uldivmod>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	4b38      	ldr	r3, [pc, #224]	; (8007f28 <UART_SetConfig+0x4e4>)
 8007e46:	fba3 2301 	umull	r2, r3, r3, r1
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	2264      	movs	r2, #100	; 0x64
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	1acb      	subs	r3, r1, r3
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	3332      	adds	r3, #50	; 0x32
 8007e58:	4a33      	ldr	r2, [pc, #204]	; (8007f28 <UART_SetConfig+0x4e4>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e64:	441c      	add	r4, r3
 8007e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8007e6e:	677a      	str	r2, [r7, #116]	; 0x74
 8007e70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e74:	4642      	mov	r2, r8
 8007e76:	464b      	mov	r3, r9
 8007e78:	1891      	adds	r1, r2, r2
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	415b      	adcs	r3, r3
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e84:	4641      	mov	r1, r8
 8007e86:	1851      	adds	r1, r2, r1
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	414b      	adcs	r3, r1
 8007e8e:	607b      	str	r3, [r7, #4]
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	00cb      	lsls	r3, r1, #3
 8007ea0:	4651      	mov	r1, sl
 8007ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ea6:	4651      	mov	r1, sl
 8007ea8:	00ca      	lsls	r2, r1, #3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	4619      	mov	r1, r3
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	189b      	adds	r3, r3, r2
 8007eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	460a      	mov	r2, r1
 8007eba:	eb42 0303 	adc.w	r3, r2, r3
 8007ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8007eca:	667a      	str	r2, [r7, #100]	; 0x64
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007ed8:	4649      	mov	r1, r9
 8007eda:	008b      	lsls	r3, r1, #2
 8007edc:	4641      	mov	r1, r8
 8007ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	008a      	lsls	r2, r1, #2
 8007ee6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007eea:	f7f8 f9d9 	bl	80002a0 <__aeabi_uldivmod>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <UART_SetConfig+0x4e4>)
 8007ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	2164      	movs	r1, #100	; 0x64
 8007efc:	fb01 f303 	mul.w	r3, r1, r3
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	3332      	adds	r3, #50	; 0x32
 8007f06:	4a08      	ldr	r2, [pc, #32]	; (8007f28 <UART_SetConfig+0x4e4>)
 8007f08:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0c:	095b      	lsrs	r3, r3, #5
 8007f0e:	f003 020f 	and.w	r2, r3, #15
 8007f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4422      	add	r2, r4
 8007f1a:	609a      	str	r2, [r3, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f22:	46bd      	mov	sp, r7
 8007f24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f28:	51eb851f 	.word	0x51eb851f

08007f2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b084      	sub	sp, #16
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	f107 001c 	add.w	r0, r7, #28
 8007f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d122      	bne.n	8007f8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d105      	bne.n	8007f7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 faa2 	bl	80084c8 <USB_CoreReset>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]
 8007f88:	e01a      	b.n	8007fc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa96 	bl	80084c8 <USB_CoreReset>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8007fb2:	e005      	b.n	8007fc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d10b      	bne.n	8007fde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f043 0206 	orr.w	r2, r3, #6
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f043 0220 	orr.w	r2, r3, #32
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fea:	b004      	add	sp, #16
 8007fec:	4770      	bx	lr

08007fee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f023 0201 	bic.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d115      	bne.n	800805e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800803e:	2001      	movs	r0, #1
 8008040:	f7f9 ffba 	bl	8001fb8 <HAL_Delay>
      ms++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa2e 	bl	80084ac <USB_GetMode>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d01e      	beq.n	8008094 <USB_SetCurrentMode+0x84>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b31      	cmp	r3, #49	; 0x31
 800805a:	d9f0      	bls.n	800803e <USB_SetCurrentMode+0x2e>
 800805c:	e01a      	b.n	8008094 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800805e:	78fb      	ldrb	r3, [r7, #3]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d115      	bne.n	8008090 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008070:	2001      	movs	r0, #1
 8008072:	f7f9 ffa1 	bl	8001fb8 <HAL_Delay>
      ms++;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3301      	adds	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fa15 	bl	80084ac <USB_GetMode>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <USB_SetCurrentMode+0x84>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b31      	cmp	r3, #49	; 0x31
 800808c:	d9f0      	bls.n	8008070 <USB_SetCurrentMode+0x60>
 800808e:	e001      	b.n	8008094 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e005      	b.n	80080a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b32      	cmp	r3, #50	; 0x32
 8008098:	d101      	bne.n	800809e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a8:	b084      	sub	sp, #16
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	e009      	b.n	80080dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	3340      	adds	r3, #64	; 0x40
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	3301      	adds	r3, #1
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	2b0e      	cmp	r3, #14
 80080e0:	d9f2      	bls.n	80080c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11c      	bne.n	8008122 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080f6:	f043 0302 	orr.w	r3, r3, #2
 80080fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
 8008120:	e00b      	b.n	800813a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008140:	461a      	mov	r2, r3
 8008142:	2300      	movs	r3, #0
 8008144:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800814c:	4619      	mov	r1, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008154:	461a      	mov	r2, r3
 8008156:	680b      	ldr	r3, [r1, #0]
 8008158:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10c      	bne.n	800817a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008166:	2100      	movs	r1, #0
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f965 	bl	8008438 <USB_SetDevSpeed>
 800816e:	e008      	b.n	8008182 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008170:	2101      	movs	r1, #1
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f960 	bl	8008438 <USB_SetDevSpeed>
 8008178:	e003      	b.n	8008182 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800817a:	2103      	movs	r1, #3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f95b 	bl	8008438 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008182:	2110      	movs	r1, #16
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f8f3 	bl	8008370 <USB_FlushTxFifo>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d001      	beq.n	8008194 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f91f 	bl	80083d8 <USB_FlushRxFifo>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081aa:	461a      	mov	r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b6:	461a      	mov	r2, r3
 80081b8:	2300      	movs	r3, #0
 80081ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
 80081cc:	e043      	b.n	8008256 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081e4:	d118      	bne.n	8008218 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f8:	461a      	mov	r2, r3
 80081fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	e013      	b.n	800822a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	461a      	mov	r2, r3
 8008210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e008      	b.n	800822a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008224:	461a      	mov	r2, r3
 8008226:	2300      	movs	r3, #0
 8008228:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008236:	461a      	mov	r2, r3
 8008238:	2300      	movs	r3, #0
 800823a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008248:	461a      	mov	r2, r3
 800824a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800824e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	3301      	adds	r3, #1
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	429a      	cmp	r2, r3
 800825c:	d3b7      	bcc.n	80081ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	e043      	b.n	80082ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800827a:	d118      	bne.n	80082ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	461a      	mov	r2, r3
 8008290:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	e013      	b.n	80082c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	461a      	mov	r2, r3
 80082a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082aa:	6013      	str	r3, [r2, #0]
 80082ac:	e008      	b.n	80082c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ba:	461a      	mov	r2, r3
 80082bc:	2300      	movs	r3, #0
 80082be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082cc:	461a      	mov	r2, r3
 80082ce:	2300      	movs	r3, #0
 80082d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082de:	461a      	mov	r2, r3
 80082e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	3301      	adds	r3, #1
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d3b7      	bcc.n	8008264 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008306:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008314:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	f043 0210 	orr.w	r2, r3, #16
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699a      	ldr	r2, [r3, #24]
 800832c:	4b0f      	ldr	r3, [pc, #60]	; (800836c <USB_DevInit+0x2c4>)
 800832e:	4313      	orrs	r3, r2
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f043 0208 	orr.w	r2, r3, #8
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008348:	2b01      	cmp	r3, #1
 800834a:	d107      	bne.n	800835c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008354:	f043 0304 	orr.w	r3, r3, #4
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008368:	b004      	add	sp, #16
 800836a:	4770      	bx	lr
 800836c:	803c3800 	.word	0x803c3800

08008370 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3301      	adds	r3, #1
 8008382:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4a13      	ldr	r2, [pc, #76]	; (80083d4 <USB_FlushTxFifo+0x64>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d901      	bls.n	8008390 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e01b      	b.n	80083c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	daf2      	bge.n	800837e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	019b      	lsls	r3, r3, #6
 80083a0:	f043 0220 	orr.w	r2, r3, #32
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4a08      	ldr	r2, [pc, #32]	; (80083d4 <USB_FlushTxFifo+0x64>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e006      	b.n	80083c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d0f0      	beq.n	80083a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	00030d40 	.word	0x00030d40

080083d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4a11      	ldr	r2, [pc, #68]	; (8008434 <USB_FlushRxFifo+0x5c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d901      	bls.n	80083f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e018      	b.n	8008428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	daf2      	bge.n	80083e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2210      	movs	r2, #16
 8008406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3301      	adds	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4a08      	ldr	r2, [pc, #32]	; (8008434 <USB_FlushRxFifo+0x5c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d901      	bls.n	800841a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e006      	b.n	8008428 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b10      	cmp	r3, #16
 8008424:	d0f0      	beq.n	8008408 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	00030d40 	.word	0x00030d40

08008438 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	68f9      	ldr	r1, [r7, #12]
 8008454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008458:	4313      	orrs	r3, r2
 800845a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800846a:	b480      	push	{r7}
 800846c:	b085      	sub	sp, #20
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008484:	f023 0303 	bic.w	r3, r3, #3
 8008488:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008498:	f043 0302 	orr.w	r3, r3, #2
 800849c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	f003 0301 	and.w	r3, r3, #1
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3301      	adds	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4a13      	ldr	r2, [pc, #76]	; (800852c <USB_CoreReset+0x64>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d901      	bls.n	80084e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e01b      	b.n	800851e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	daf2      	bge.n	80084d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f043 0201 	orr.w	r2, r3, #1
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4a09      	ldr	r2, [pc, #36]	; (800852c <USB_CoreReset+0x64>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d901      	bls.n	8008510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e006      	b.n	800851e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b01      	cmp	r3, #1
 800851a:	d0f0      	beq.n	80084fe <USB_CoreReset+0x36>

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	00030d40 	.word	0x00030d40

08008530 <std>:
 8008530:	2300      	movs	r3, #0
 8008532:	b510      	push	{r4, lr}
 8008534:	4604      	mov	r4, r0
 8008536:	e9c0 3300 	strd	r3, r3, [r0]
 800853a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800853e:	6083      	str	r3, [r0, #8]
 8008540:	8181      	strh	r1, [r0, #12]
 8008542:	6643      	str	r3, [r0, #100]	; 0x64
 8008544:	81c2      	strh	r2, [r0, #14]
 8008546:	6183      	str	r3, [r0, #24]
 8008548:	4619      	mov	r1, r3
 800854a:	2208      	movs	r2, #8
 800854c:	305c      	adds	r0, #92	; 0x5c
 800854e:	f000 fa4b 	bl	80089e8 <memset>
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <std+0x58>)
 8008554:	6263      	str	r3, [r4, #36]	; 0x24
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <std+0x5c>)
 8008558:	62a3      	str	r3, [r4, #40]	; 0x28
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <std+0x60>)
 800855c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <std+0x64>)
 8008560:	6323      	str	r3, [r4, #48]	; 0x30
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <std+0x68>)
 8008564:	6224      	str	r4, [r4, #32]
 8008566:	429c      	cmp	r4, r3
 8008568:	d006      	beq.n	8008578 <std+0x48>
 800856a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800856e:	4294      	cmp	r4, r2
 8008570:	d002      	beq.n	8008578 <std+0x48>
 8008572:	33d0      	adds	r3, #208	; 0xd0
 8008574:	429c      	cmp	r4, r3
 8008576:	d105      	bne.n	8008584 <std+0x54>
 8008578:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800857c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008580:	f000 baaa 	b.w	8008ad8 <__retarget_lock_init_recursive>
 8008584:	bd10      	pop	{r4, pc}
 8008586:	bf00      	nop
 8008588:	08008839 	.word	0x08008839
 800858c:	0800885b 	.word	0x0800885b
 8008590:	08008893 	.word	0x08008893
 8008594:	080088b7 	.word	0x080088b7
 8008598:	20000a24 	.word	0x20000a24

0800859c <stdio_exit_handler>:
 800859c:	4a02      	ldr	r2, [pc, #8]	; (80085a8 <stdio_exit_handler+0xc>)
 800859e:	4903      	ldr	r1, [pc, #12]	; (80085ac <stdio_exit_handler+0x10>)
 80085a0:	4803      	ldr	r0, [pc, #12]	; (80085b0 <stdio_exit_handler+0x14>)
 80085a2:	f000 b869 	b.w	8008678 <_fwalk_sglue>
 80085a6:	bf00      	nop
 80085a8:	20000014 	.word	0x20000014
 80085ac:	08009635 	.word	0x08009635
 80085b0:	20000020 	.word	0x20000020

080085b4 <cleanup_stdio>:
 80085b4:	6841      	ldr	r1, [r0, #4]
 80085b6:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <cleanup_stdio+0x34>)
 80085b8:	4299      	cmp	r1, r3
 80085ba:	b510      	push	{r4, lr}
 80085bc:	4604      	mov	r4, r0
 80085be:	d001      	beq.n	80085c4 <cleanup_stdio+0x10>
 80085c0:	f001 f838 	bl	8009634 <_fflush_r>
 80085c4:	68a1      	ldr	r1, [r4, #8]
 80085c6:	4b09      	ldr	r3, [pc, #36]	; (80085ec <cleanup_stdio+0x38>)
 80085c8:	4299      	cmp	r1, r3
 80085ca:	d002      	beq.n	80085d2 <cleanup_stdio+0x1e>
 80085cc:	4620      	mov	r0, r4
 80085ce:	f001 f831 	bl	8009634 <_fflush_r>
 80085d2:	68e1      	ldr	r1, [r4, #12]
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <cleanup_stdio+0x3c>)
 80085d6:	4299      	cmp	r1, r3
 80085d8:	d004      	beq.n	80085e4 <cleanup_stdio+0x30>
 80085da:	4620      	mov	r0, r4
 80085dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e0:	f001 b828 	b.w	8009634 <_fflush_r>
 80085e4:	bd10      	pop	{r4, pc}
 80085e6:	bf00      	nop
 80085e8:	20000a24 	.word	0x20000a24
 80085ec:	20000a8c 	.word	0x20000a8c
 80085f0:	20000af4 	.word	0x20000af4

080085f4 <global_stdio_init.part.0>:
 80085f4:	b510      	push	{r4, lr}
 80085f6:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <global_stdio_init.part.0+0x30>)
 80085f8:	4c0b      	ldr	r4, [pc, #44]	; (8008628 <global_stdio_init.part.0+0x34>)
 80085fa:	4a0c      	ldr	r2, [pc, #48]	; (800862c <global_stdio_init.part.0+0x38>)
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	4620      	mov	r0, r4
 8008600:	2200      	movs	r2, #0
 8008602:	2104      	movs	r1, #4
 8008604:	f7ff ff94 	bl	8008530 <std>
 8008608:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800860c:	2201      	movs	r2, #1
 800860e:	2109      	movs	r1, #9
 8008610:	f7ff ff8e 	bl	8008530 <std>
 8008614:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008618:	2202      	movs	r2, #2
 800861a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861e:	2112      	movs	r1, #18
 8008620:	f7ff bf86 	b.w	8008530 <std>
 8008624:	20000b5c 	.word	0x20000b5c
 8008628:	20000a24 	.word	0x20000a24
 800862c:	0800859d 	.word	0x0800859d

08008630 <__sfp_lock_acquire>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sfp_lock_acquire+0x8>)
 8008632:	f000 ba52 	b.w	8008ada <__retarget_lock_acquire_recursive>
 8008636:	bf00      	nop
 8008638:	20000b65 	.word	0x20000b65

0800863c <__sfp_lock_release>:
 800863c:	4801      	ldr	r0, [pc, #4]	; (8008644 <__sfp_lock_release+0x8>)
 800863e:	f000 ba4d 	b.w	8008adc <__retarget_lock_release_recursive>
 8008642:	bf00      	nop
 8008644:	20000b65 	.word	0x20000b65

08008648 <__sinit>:
 8008648:	b510      	push	{r4, lr}
 800864a:	4604      	mov	r4, r0
 800864c:	f7ff fff0 	bl	8008630 <__sfp_lock_acquire>
 8008650:	6a23      	ldr	r3, [r4, #32]
 8008652:	b11b      	cbz	r3, 800865c <__sinit+0x14>
 8008654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008658:	f7ff bff0 	b.w	800863c <__sfp_lock_release>
 800865c:	4b04      	ldr	r3, [pc, #16]	; (8008670 <__sinit+0x28>)
 800865e:	6223      	str	r3, [r4, #32]
 8008660:	4b04      	ldr	r3, [pc, #16]	; (8008674 <__sinit+0x2c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1f5      	bne.n	8008654 <__sinit+0xc>
 8008668:	f7ff ffc4 	bl	80085f4 <global_stdio_init.part.0>
 800866c:	e7f2      	b.n	8008654 <__sinit+0xc>
 800866e:	bf00      	nop
 8008670:	080085b5 	.word	0x080085b5
 8008674:	20000b5c 	.word	0x20000b5c

08008678 <_fwalk_sglue>:
 8008678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800867c:	4607      	mov	r7, r0
 800867e:	4688      	mov	r8, r1
 8008680:	4614      	mov	r4, r2
 8008682:	2600      	movs	r6, #0
 8008684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008688:	f1b9 0901 	subs.w	r9, r9, #1
 800868c:	d505      	bpl.n	800869a <_fwalk_sglue+0x22>
 800868e:	6824      	ldr	r4, [r4, #0]
 8008690:	2c00      	cmp	r4, #0
 8008692:	d1f7      	bne.n	8008684 <_fwalk_sglue+0xc>
 8008694:	4630      	mov	r0, r6
 8008696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869a:	89ab      	ldrh	r3, [r5, #12]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d907      	bls.n	80086b0 <_fwalk_sglue+0x38>
 80086a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086a4:	3301      	adds	r3, #1
 80086a6:	d003      	beq.n	80086b0 <_fwalk_sglue+0x38>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4638      	mov	r0, r7
 80086ac:	47c0      	blx	r8
 80086ae:	4306      	orrs	r6, r0
 80086b0:	3568      	adds	r5, #104	; 0x68
 80086b2:	e7e9      	b.n	8008688 <_fwalk_sglue+0x10>

080086b4 <iprintf>:
 80086b4:	b40f      	push	{r0, r1, r2, r3}
 80086b6:	b507      	push	{r0, r1, r2, lr}
 80086b8:	4906      	ldr	r1, [pc, #24]	; (80086d4 <iprintf+0x20>)
 80086ba:	ab04      	add	r3, sp, #16
 80086bc:	6808      	ldr	r0, [r1, #0]
 80086be:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c2:	6881      	ldr	r1, [r0, #8]
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f000 fc85 	bl	8008fd4 <_vfiprintf_r>
 80086ca:	b003      	add	sp, #12
 80086cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d0:	b004      	add	sp, #16
 80086d2:	4770      	bx	lr
 80086d4:	2000006c 	.word	0x2000006c

080086d8 <_puts_r>:
 80086d8:	6a03      	ldr	r3, [r0, #32]
 80086da:	b570      	push	{r4, r5, r6, lr}
 80086dc:	6884      	ldr	r4, [r0, #8]
 80086de:	4605      	mov	r5, r0
 80086e0:	460e      	mov	r6, r1
 80086e2:	b90b      	cbnz	r3, 80086e8 <_puts_r+0x10>
 80086e4:	f7ff ffb0 	bl	8008648 <__sinit>
 80086e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086ea:	07db      	lsls	r3, r3, #31
 80086ec:	d405      	bmi.n	80086fa <_puts_r+0x22>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	0598      	lsls	r0, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_puts_r+0x22>
 80086f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086f6:	f000 f9f0 	bl	8008ada <__retarget_lock_acquire_recursive>
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	0719      	lsls	r1, r3, #28
 80086fe:	d513      	bpl.n	8008728 <_puts_r+0x50>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	b18b      	cbz	r3, 8008728 <_puts_r+0x50>
 8008704:	3e01      	subs	r6, #1
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800870c:	3b01      	subs	r3, #1
 800870e:	60a3      	str	r3, [r4, #8]
 8008710:	b9e9      	cbnz	r1, 800874e <_puts_r+0x76>
 8008712:	2b00      	cmp	r3, #0
 8008714:	da2e      	bge.n	8008774 <_puts_r+0x9c>
 8008716:	4622      	mov	r2, r4
 8008718:	210a      	movs	r1, #10
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f8cf 	bl	80088be <__swbuf_r>
 8008720:	3001      	adds	r0, #1
 8008722:	d007      	beq.n	8008734 <_puts_r+0x5c>
 8008724:	250a      	movs	r5, #10
 8008726:	e007      	b.n	8008738 <_puts_r+0x60>
 8008728:	4621      	mov	r1, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f000 f904 	bl	8008938 <__swsetup_r>
 8008730:	2800      	cmp	r0, #0
 8008732:	d0e7      	beq.n	8008704 <_puts_r+0x2c>
 8008734:	f04f 35ff 	mov.w	r5, #4294967295
 8008738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800873a:	07da      	lsls	r2, r3, #31
 800873c:	d405      	bmi.n	800874a <_puts_r+0x72>
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	059b      	lsls	r3, r3, #22
 8008742:	d402      	bmi.n	800874a <_puts_r+0x72>
 8008744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008746:	f000 f9c9 	bl	8008adc <__retarget_lock_release_recursive>
 800874a:	4628      	mov	r0, r5
 800874c:	bd70      	pop	{r4, r5, r6, pc}
 800874e:	2b00      	cmp	r3, #0
 8008750:	da04      	bge.n	800875c <_puts_r+0x84>
 8008752:	69a2      	ldr	r2, [r4, #24]
 8008754:	429a      	cmp	r2, r3
 8008756:	dc06      	bgt.n	8008766 <_puts_r+0x8e>
 8008758:	290a      	cmp	r1, #10
 800875a:	d004      	beq.n	8008766 <_puts_r+0x8e>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	6022      	str	r2, [r4, #0]
 8008762:	7019      	strb	r1, [r3, #0]
 8008764:	e7cf      	b.n	8008706 <_puts_r+0x2e>
 8008766:	4622      	mov	r2, r4
 8008768:	4628      	mov	r0, r5
 800876a:	f000 f8a8 	bl	80088be <__swbuf_r>
 800876e:	3001      	adds	r0, #1
 8008770:	d1c9      	bne.n	8008706 <_puts_r+0x2e>
 8008772:	e7df      	b.n	8008734 <_puts_r+0x5c>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	250a      	movs	r5, #10
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	6022      	str	r2, [r4, #0]
 800877c:	701d      	strb	r5, [r3, #0]
 800877e:	e7db      	b.n	8008738 <_puts_r+0x60>

08008780 <puts>:
 8008780:	4b02      	ldr	r3, [pc, #8]	; (800878c <puts+0xc>)
 8008782:	4601      	mov	r1, r0
 8008784:	6818      	ldr	r0, [r3, #0]
 8008786:	f7ff bfa7 	b.w	80086d8 <_puts_r>
 800878a:	bf00      	nop
 800878c:	2000006c 	.word	0x2000006c

08008790 <sniprintf>:
 8008790:	b40c      	push	{r2, r3}
 8008792:	b530      	push	{r4, r5, lr}
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <sniprintf+0x64>)
 8008796:	1e0c      	subs	r4, r1, #0
 8008798:	681d      	ldr	r5, [r3, #0]
 800879a:	b09d      	sub	sp, #116	; 0x74
 800879c:	da08      	bge.n	80087b0 <sniprintf+0x20>
 800879e:	238b      	movs	r3, #139	; 0x8b
 80087a0:	602b      	str	r3, [r5, #0]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	b01d      	add	sp, #116	; 0x74
 80087a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087ac:	b002      	add	sp, #8
 80087ae:	4770      	bx	lr
 80087b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80087b8:	bf14      	ite	ne
 80087ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087be:	4623      	moveq	r3, r4
 80087c0:	9304      	str	r3, [sp, #16]
 80087c2:	9307      	str	r3, [sp, #28]
 80087c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087c8:	9002      	str	r0, [sp, #8]
 80087ca:	9006      	str	r0, [sp, #24]
 80087cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80087d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087d2:	ab21      	add	r3, sp, #132	; 0x84
 80087d4:	a902      	add	r1, sp, #8
 80087d6:	4628      	mov	r0, r5
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	f000 fad3 	bl	8008d84 <_svfiprintf_r>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	bfbc      	itt	lt
 80087e2:	238b      	movlt	r3, #139	; 0x8b
 80087e4:	602b      	strlt	r3, [r5, #0]
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	d0dd      	beq.n	80087a6 <sniprintf+0x16>
 80087ea:	9b02      	ldr	r3, [sp, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e7d9      	b.n	80087a6 <sniprintf+0x16>
 80087f2:	bf00      	nop
 80087f4:	2000006c 	.word	0x2000006c

080087f8 <siprintf>:
 80087f8:	b40e      	push	{r1, r2, r3}
 80087fa:	b500      	push	{lr}
 80087fc:	b09c      	sub	sp, #112	; 0x70
 80087fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008800:	9002      	str	r0, [sp, #8]
 8008802:	9006      	str	r0, [sp, #24]
 8008804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008808:	4809      	ldr	r0, [pc, #36]	; (8008830 <siprintf+0x38>)
 800880a:	9107      	str	r1, [sp, #28]
 800880c:	9104      	str	r1, [sp, #16]
 800880e:	4909      	ldr	r1, [pc, #36]	; (8008834 <siprintf+0x3c>)
 8008810:	f853 2b04 	ldr.w	r2, [r3], #4
 8008814:	9105      	str	r1, [sp, #20]
 8008816:	6800      	ldr	r0, [r0, #0]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	a902      	add	r1, sp, #8
 800881c:	f000 fab2 	bl	8008d84 <_svfiprintf_r>
 8008820:	9b02      	ldr	r3, [sp, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	b01c      	add	sp, #112	; 0x70
 8008828:	f85d eb04 	ldr.w	lr, [sp], #4
 800882c:	b003      	add	sp, #12
 800882e:	4770      	bx	lr
 8008830:	2000006c 	.word	0x2000006c
 8008834:	ffff0208 	.word	0xffff0208

08008838 <__sread>:
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008840:	f000 f8fc 	bl	8008a3c <_read_r>
 8008844:	2800      	cmp	r0, #0
 8008846:	bfab      	itete	ge
 8008848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800884a:	89a3      	ldrhlt	r3, [r4, #12]
 800884c:	181b      	addge	r3, r3, r0
 800884e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008852:	bfac      	ite	ge
 8008854:	6563      	strge	r3, [r4, #84]	; 0x54
 8008856:	81a3      	strhlt	r3, [r4, #12]
 8008858:	bd10      	pop	{r4, pc}

0800885a <__swrite>:
 800885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	461f      	mov	r7, r3
 8008860:	898b      	ldrh	r3, [r1, #12]
 8008862:	05db      	lsls	r3, r3, #23
 8008864:	4605      	mov	r5, r0
 8008866:	460c      	mov	r4, r1
 8008868:	4616      	mov	r6, r2
 800886a:	d505      	bpl.n	8008878 <__swrite+0x1e>
 800886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008870:	2302      	movs	r3, #2
 8008872:	2200      	movs	r2, #0
 8008874:	f000 f8d0 	bl	8008a18 <_lseek_r>
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	4632      	mov	r2, r6
 8008886:	463b      	mov	r3, r7
 8008888:	4628      	mov	r0, r5
 800888a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	f000 b8e7 	b.w	8008a60 <_write_r>

08008892 <__sseek>:
 8008892:	b510      	push	{r4, lr}
 8008894:	460c      	mov	r4, r1
 8008896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889a:	f000 f8bd 	bl	8008a18 <_lseek_r>
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	bf15      	itete	ne
 80088a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ae:	81a3      	strheq	r3, [r4, #12]
 80088b0:	bf18      	it	ne
 80088b2:	81a3      	strhne	r3, [r4, #12]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <__sclose>:
 80088b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ba:	f000 b89d 	b.w	80089f8 <_close_r>

080088be <__swbuf_r>:
 80088be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c0:	460e      	mov	r6, r1
 80088c2:	4614      	mov	r4, r2
 80088c4:	4605      	mov	r5, r0
 80088c6:	b118      	cbz	r0, 80088d0 <__swbuf_r+0x12>
 80088c8:	6a03      	ldr	r3, [r0, #32]
 80088ca:	b90b      	cbnz	r3, 80088d0 <__swbuf_r+0x12>
 80088cc:	f7ff febc 	bl	8008648 <__sinit>
 80088d0:	69a3      	ldr	r3, [r4, #24]
 80088d2:	60a3      	str	r3, [r4, #8]
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	071a      	lsls	r2, r3, #28
 80088d8:	d525      	bpl.n	8008926 <__swbuf_r+0x68>
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	b31b      	cbz	r3, 8008926 <__swbuf_r+0x68>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	1a98      	subs	r0, r3, r2
 80088e4:	6963      	ldr	r3, [r4, #20]
 80088e6:	b2f6      	uxtb	r6, r6
 80088e8:	4283      	cmp	r3, r0
 80088ea:	4637      	mov	r7, r6
 80088ec:	dc04      	bgt.n	80088f8 <__swbuf_r+0x3a>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 fe9f 	bl	8009634 <_fflush_r>
 80088f6:	b9e0      	cbnz	r0, 8008932 <__swbuf_r+0x74>
 80088f8:	68a3      	ldr	r3, [r4, #8]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	60a3      	str	r3, [r4, #8]
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	6022      	str	r2, [r4, #0]
 8008904:	701e      	strb	r6, [r3, #0]
 8008906:	6962      	ldr	r2, [r4, #20]
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	429a      	cmp	r2, r3
 800890c:	d004      	beq.n	8008918 <__swbuf_r+0x5a>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	07db      	lsls	r3, r3, #31
 8008912:	d506      	bpl.n	8008922 <__swbuf_r+0x64>
 8008914:	2e0a      	cmp	r6, #10
 8008916:	d104      	bne.n	8008922 <__swbuf_r+0x64>
 8008918:	4621      	mov	r1, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 fe8a 	bl	8009634 <_fflush_r>
 8008920:	b938      	cbnz	r0, 8008932 <__swbuf_r+0x74>
 8008922:	4638      	mov	r0, r7
 8008924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008926:	4621      	mov	r1, r4
 8008928:	4628      	mov	r0, r5
 800892a:	f000 f805 	bl	8008938 <__swsetup_r>
 800892e:	2800      	cmp	r0, #0
 8008930:	d0d5      	beq.n	80088de <__swbuf_r+0x20>
 8008932:	f04f 37ff 	mov.w	r7, #4294967295
 8008936:	e7f4      	b.n	8008922 <__swbuf_r+0x64>

08008938 <__swsetup_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4b2a      	ldr	r3, [pc, #168]	; (80089e4 <__swsetup_r+0xac>)
 800893c:	4605      	mov	r5, r0
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	460c      	mov	r4, r1
 8008942:	b118      	cbz	r0, 800894c <__swsetup_r+0x14>
 8008944:	6a03      	ldr	r3, [r0, #32]
 8008946:	b90b      	cbnz	r3, 800894c <__swsetup_r+0x14>
 8008948:	f7ff fe7e 	bl	8008648 <__sinit>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008952:	0718      	lsls	r0, r3, #28
 8008954:	d422      	bmi.n	800899c <__swsetup_r+0x64>
 8008956:	06d9      	lsls	r1, r3, #27
 8008958:	d407      	bmi.n	800896a <__swsetup_r+0x32>
 800895a:	2309      	movs	r3, #9
 800895c:	602b      	str	r3, [r5, #0]
 800895e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008962:	81a3      	strh	r3, [r4, #12]
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	e034      	b.n	80089d4 <__swsetup_r+0x9c>
 800896a:	0758      	lsls	r0, r3, #29
 800896c:	d512      	bpl.n	8008994 <__swsetup_r+0x5c>
 800896e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008970:	b141      	cbz	r1, 8008984 <__swsetup_r+0x4c>
 8008972:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008976:	4299      	cmp	r1, r3
 8008978:	d002      	beq.n	8008980 <__swsetup_r+0x48>
 800897a:	4628      	mov	r0, r5
 800897c:	f000 f8b0 	bl	8008ae0 <_free_r>
 8008980:	2300      	movs	r3, #0
 8008982:	6363      	str	r3, [r4, #52]	; 0x34
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800898a:	81a3      	strh	r3, [r4, #12]
 800898c:	2300      	movs	r3, #0
 800898e:	6063      	str	r3, [r4, #4]
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f043 0308 	orr.w	r3, r3, #8
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b94b      	cbnz	r3, 80089b4 <__swsetup_r+0x7c>
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089aa:	d003      	beq.n	80089b4 <__swsetup_r+0x7c>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 fe8e 	bl	80096d0 <__smakebuf_r>
 80089b4:	89a0      	ldrh	r0, [r4, #12]
 80089b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089ba:	f010 0301 	ands.w	r3, r0, #1
 80089be:	d00a      	beq.n	80089d6 <__swsetup_r+0x9e>
 80089c0:	2300      	movs	r3, #0
 80089c2:	60a3      	str	r3, [r4, #8]
 80089c4:	6963      	ldr	r3, [r4, #20]
 80089c6:	425b      	negs	r3, r3
 80089c8:	61a3      	str	r3, [r4, #24]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	b943      	cbnz	r3, 80089e0 <__swsetup_r+0xa8>
 80089ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089d2:	d1c4      	bne.n	800895e <__swsetup_r+0x26>
 80089d4:	bd38      	pop	{r3, r4, r5, pc}
 80089d6:	0781      	lsls	r1, r0, #30
 80089d8:	bf58      	it	pl
 80089da:	6963      	ldrpl	r3, [r4, #20]
 80089dc:	60a3      	str	r3, [r4, #8]
 80089de:	e7f4      	b.n	80089ca <__swsetup_r+0x92>
 80089e0:	2000      	movs	r0, #0
 80089e2:	e7f7      	b.n	80089d4 <__swsetup_r+0x9c>
 80089e4:	2000006c 	.word	0x2000006c

080089e8 <memset>:
 80089e8:	4402      	add	r2, r0
 80089ea:	4603      	mov	r3, r0
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d100      	bne.n	80089f2 <memset+0xa>
 80089f0:	4770      	bx	lr
 80089f2:	f803 1b01 	strb.w	r1, [r3], #1
 80089f6:	e7f9      	b.n	80089ec <memset+0x4>

080089f8 <_close_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d06      	ldr	r5, [pc, #24]	; (8008a14 <_close_r+0x1c>)
 80089fc:	2300      	movs	r3, #0
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	602b      	str	r3, [r5, #0]
 8008a04:	f7f9 f9bf 	bl	8001d86 <_close>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_close_r+0x1a>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_close_r+0x1a>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20000b60 	.word	0x20000b60

08008a18 <_lseek_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d07      	ldr	r5, [pc, #28]	; (8008a38 <_lseek_r+0x20>)
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	4608      	mov	r0, r1
 8008a20:	4611      	mov	r1, r2
 8008a22:	2200      	movs	r2, #0
 8008a24:	602a      	str	r2, [r5, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	f7f9 f9d4 	bl	8001dd4 <_lseek>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_lseek_r+0x1e>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_lseek_r+0x1e>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20000b60 	.word	0x20000b60

08008a3c <_read_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d07      	ldr	r5, [pc, #28]	; (8008a5c <_read_r+0x20>)
 8008a40:	4604      	mov	r4, r0
 8008a42:	4608      	mov	r0, r1
 8008a44:	4611      	mov	r1, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	602a      	str	r2, [r5, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f7f9 f97e 	bl	8001d4c <_read>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_read_r+0x1e>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_read_r+0x1e>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	20000b60 	.word	0x20000b60

08008a60 <_write_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d07      	ldr	r5, [pc, #28]	; (8008a80 <_write_r+0x20>)
 8008a64:	4604      	mov	r4, r0
 8008a66:	4608      	mov	r0, r1
 8008a68:	4611      	mov	r1, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	602a      	str	r2, [r5, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f7f7 feba 	bl	80007e8 <_write>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_write_r+0x1e>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_write_r+0x1e>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	20000b60 	.word	0x20000b60

08008a84 <__errno>:
 8008a84:	4b01      	ldr	r3, [pc, #4]	; (8008a8c <__errno+0x8>)
 8008a86:	6818      	ldr	r0, [r3, #0]
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	2000006c 	.word	0x2000006c

08008a90 <__libc_init_array>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	4d0d      	ldr	r5, [pc, #52]	; (8008ac8 <__libc_init_array+0x38>)
 8008a94:	4c0d      	ldr	r4, [pc, #52]	; (8008acc <__libc_init_array+0x3c>)
 8008a96:	1b64      	subs	r4, r4, r5
 8008a98:	10a4      	asrs	r4, r4, #2
 8008a9a:	2600      	movs	r6, #0
 8008a9c:	42a6      	cmp	r6, r4
 8008a9e:	d109      	bne.n	8008ab4 <__libc_init_array+0x24>
 8008aa0:	4d0b      	ldr	r5, [pc, #44]	; (8008ad0 <__libc_init_array+0x40>)
 8008aa2:	4c0c      	ldr	r4, [pc, #48]	; (8008ad4 <__libc_init_array+0x44>)
 8008aa4:	f000 fee2 	bl	800986c <_init>
 8008aa8:	1b64      	subs	r4, r4, r5
 8008aaa:	10a4      	asrs	r4, r4, #2
 8008aac:	2600      	movs	r6, #0
 8008aae:	42a6      	cmp	r6, r4
 8008ab0:	d105      	bne.n	8008abe <__libc_init_array+0x2e>
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}
 8008ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab8:	4798      	blx	r3
 8008aba:	3601      	adds	r6, #1
 8008abc:	e7ee      	b.n	8008a9c <__libc_init_array+0xc>
 8008abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac2:	4798      	blx	r3
 8008ac4:	3601      	adds	r6, #1
 8008ac6:	e7f2      	b.n	8008aae <__libc_init_array+0x1e>
 8008ac8:	08009af4 	.word	0x08009af4
 8008acc:	08009af4 	.word	0x08009af4
 8008ad0:	08009af4 	.word	0x08009af4
 8008ad4:	08009af8 	.word	0x08009af8

08008ad8 <__retarget_lock_init_recursive>:
 8008ad8:	4770      	bx	lr

08008ada <__retarget_lock_acquire_recursive>:
 8008ada:	4770      	bx	lr

08008adc <__retarget_lock_release_recursive>:
 8008adc:	4770      	bx	lr
	...

08008ae0 <_free_r>:
 8008ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ae2:	2900      	cmp	r1, #0
 8008ae4:	d044      	beq.n	8008b70 <_free_r+0x90>
 8008ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aea:	9001      	str	r0, [sp, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f1a1 0404 	sub.w	r4, r1, #4
 8008af2:	bfb8      	it	lt
 8008af4:	18e4      	addlt	r4, r4, r3
 8008af6:	f000 f8df 	bl	8008cb8 <__malloc_lock>
 8008afa:	4a1e      	ldr	r2, [pc, #120]	; (8008b74 <_free_r+0x94>)
 8008afc:	9801      	ldr	r0, [sp, #4]
 8008afe:	6813      	ldr	r3, [r2, #0]
 8008b00:	b933      	cbnz	r3, 8008b10 <_free_r+0x30>
 8008b02:	6063      	str	r3, [r4, #4]
 8008b04:	6014      	str	r4, [r2, #0]
 8008b06:	b003      	add	sp, #12
 8008b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b0c:	f000 b8da 	b.w	8008cc4 <__malloc_unlock>
 8008b10:	42a3      	cmp	r3, r4
 8008b12:	d908      	bls.n	8008b26 <_free_r+0x46>
 8008b14:	6825      	ldr	r5, [r4, #0]
 8008b16:	1961      	adds	r1, r4, r5
 8008b18:	428b      	cmp	r3, r1
 8008b1a:	bf01      	itttt	eq
 8008b1c:	6819      	ldreq	r1, [r3, #0]
 8008b1e:	685b      	ldreq	r3, [r3, #4]
 8008b20:	1949      	addeq	r1, r1, r5
 8008b22:	6021      	streq	r1, [r4, #0]
 8008b24:	e7ed      	b.n	8008b02 <_free_r+0x22>
 8008b26:	461a      	mov	r2, r3
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	b10b      	cbz	r3, 8008b30 <_free_r+0x50>
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	d9fa      	bls.n	8008b26 <_free_r+0x46>
 8008b30:	6811      	ldr	r1, [r2, #0]
 8008b32:	1855      	adds	r5, r2, r1
 8008b34:	42a5      	cmp	r5, r4
 8008b36:	d10b      	bne.n	8008b50 <_free_r+0x70>
 8008b38:	6824      	ldr	r4, [r4, #0]
 8008b3a:	4421      	add	r1, r4
 8008b3c:	1854      	adds	r4, r2, r1
 8008b3e:	42a3      	cmp	r3, r4
 8008b40:	6011      	str	r1, [r2, #0]
 8008b42:	d1e0      	bne.n	8008b06 <_free_r+0x26>
 8008b44:	681c      	ldr	r4, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	6053      	str	r3, [r2, #4]
 8008b4a:	440c      	add	r4, r1
 8008b4c:	6014      	str	r4, [r2, #0]
 8008b4e:	e7da      	b.n	8008b06 <_free_r+0x26>
 8008b50:	d902      	bls.n	8008b58 <_free_r+0x78>
 8008b52:	230c      	movs	r3, #12
 8008b54:	6003      	str	r3, [r0, #0]
 8008b56:	e7d6      	b.n	8008b06 <_free_r+0x26>
 8008b58:	6825      	ldr	r5, [r4, #0]
 8008b5a:	1961      	adds	r1, r4, r5
 8008b5c:	428b      	cmp	r3, r1
 8008b5e:	bf04      	itt	eq
 8008b60:	6819      	ldreq	r1, [r3, #0]
 8008b62:	685b      	ldreq	r3, [r3, #4]
 8008b64:	6063      	str	r3, [r4, #4]
 8008b66:	bf04      	itt	eq
 8008b68:	1949      	addeq	r1, r1, r5
 8008b6a:	6021      	streq	r1, [r4, #0]
 8008b6c:	6054      	str	r4, [r2, #4]
 8008b6e:	e7ca      	b.n	8008b06 <_free_r+0x26>
 8008b70:	b003      	add	sp, #12
 8008b72:	bd30      	pop	{r4, r5, pc}
 8008b74:	20000b68 	.word	0x20000b68

08008b78 <sbrk_aligned>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4e0e      	ldr	r6, [pc, #56]	; (8008bb4 <sbrk_aligned+0x3c>)
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	6831      	ldr	r1, [r6, #0]
 8008b80:	4605      	mov	r5, r0
 8008b82:	b911      	cbnz	r1, 8008b8a <sbrk_aligned+0x12>
 8008b84:	f000 fe1c 	bl	80097c0 <_sbrk_r>
 8008b88:	6030      	str	r0, [r6, #0]
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f000 fe17 	bl	80097c0 <_sbrk_r>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d00a      	beq.n	8008bac <sbrk_aligned+0x34>
 8008b96:	1cc4      	adds	r4, r0, #3
 8008b98:	f024 0403 	bic.w	r4, r4, #3
 8008b9c:	42a0      	cmp	r0, r4
 8008b9e:	d007      	beq.n	8008bb0 <sbrk_aligned+0x38>
 8008ba0:	1a21      	subs	r1, r4, r0
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 fe0c 	bl	80097c0 <_sbrk_r>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d101      	bne.n	8008bb0 <sbrk_aligned+0x38>
 8008bac:	f04f 34ff 	mov.w	r4, #4294967295
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	20000b6c 	.word	0x20000b6c

08008bb8 <_malloc_r>:
 8008bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	1ccd      	adds	r5, r1, #3
 8008bbe:	f025 0503 	bic.w	r5, r5, #3
 8008bc2:	3508      	adds	r5, #8
 8008bc4:	2d0c      	cmp	r5, #12
 8008bc6:	bf38      	it	cc
 8008bc8:	250c      	movcc	r5, #12
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	4607      	mov	r7, r0
 8008bce:	db01      	blt.n	8008bd4 <_malloc_r+0x1c>
 8008bd0:	42a9      	cmp	r1, r5
 8008bd2:	d905      	bls.n	8008be0 <_malloc_r+0x28>
 8008bd4:	230c      	movs	r3, #12
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	2600      	movs	r6, #0
 8008bda:	4630      	mov	r0, r6
 8008bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008cb4 <_malloc_r+0xfc>
 8008be4:	f000 f868 	bl	8008cb8 <__malloc_lock>
 8008be8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bec:	461c      	mov	r4, r3
 8008bee:	bb5c      	cbnz	r4, 8008c48 <_malloc_r+0x90>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f7ff ffc0 	bl	8008b78 <sbrk_aligned>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	d155      	bne.n	8008caa <_malloc_r+0xf2>
 8008bfe:	f8d8 4000 	ldr.w	r4, [r8]
 8008c02:	4626      	mov	r6, r4
 8008c04:	2e00      	cmp	r6, #0
 8008c06:	d145      	bne.n	8008c94 <_malloc_r+0xdc>
 8008c08:	2c00      	cmp	r4, #0
 8008c0a:	d048      	beq.n	8008c9e <_malloc_r+0xe6>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4638      	mov	r0, r7
 8008c12:	eb04 0903 	add.w	r9, r4, r3
 8008c16:	f000 fdd3 	bl	80097c0 <_sbrk_r>
 8008c1a:	4581      	cmp	r9, r0
 8008c1c:	d13f      	bne.n	8008c9e <_malloc_r+0xe6>
 8008c1e:	6821      	ldr	r1, [r4, #0]
 8008c20:	1a6d      	subs	r5, r5, r1
 8008c22:	4629      	mov	r1, r5
 8008c24:	4638      	mov	r0, r7
 8008c26:	f7ff ffa7 	bl	8008b78 <sbrk_aligned>
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	d037      	beq.n	8008c9e <_malloc_r+0xe6>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	442b      	add	r3, r5
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	f8d8 3000 	ldr.w	r3, [r8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d038      	beq.n	8008cae <_malloc_r+0xf6>
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	42a2      	cmp	r2, r4
 8008c40:	d12b      	bne.n	8008c9a <_malloc_r+0xe2>
 8008c42:	2200      	movs	r2, #0
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	e00f      	b.n	8008c68 <_malloc_r+0xb0>
 8008c48:	6822      	ldr	r2, [r4, #0]
 8008c4a:	1b52      	subs	r2, r2, r5
 8008c4c:	d41f      	bmi.n	8008c8e <_malloc_r+0xd6>
 8008c4e:	2a0b      	cmp	r2, #11
 8008c50:	d917      	bls.n	8008c82 <_malloc_r+0xca>
 8008c52:	1961      	adds	r1, r4, r5
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	6025      	str	r5, [r4, #0]
 8008c58:	bf18      	it	ne
 8008c5a:	6059      	strne	r1, [r3, #4]
 8008c5c:	6863      	ldr	r3, [r4, #4]
 8008c5e:	bf08      	it	eq
 8008c60:	f8c8 1000 	streq.w	r1, [r8]
 8008c64:	5162      	str	r2, [r4, r5]
 8008c66:	604b      	str	r3, [r1, #4]
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f104 060b 	add.w	r6, r4, #11
 8008c6e:	f000 f829 	bl	8008cc4 <__malloc_unlock>
 8008c72:	f026 0607 	bic.w	r6, r6, #7
 8008c76:	1d23      	adds	r3, r4, #4
 8008c78:	1af2      	subs	r2, r6, r3
 8008c7a:	d0ae      	beq.n	8008bda <_malloc_r+0x22>
 8008c7c:	1b9b      	subs	r3, r3, r6
 8008c7e:	50a3      	str	r3, [r4, r2]
 8008c80:	e7ab      	b.n	8008bda <_malloc_r+0x22>
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	6862      	ldr	r2, [r4, #4]
 8008c86:	d1dd      	bne.n	8008c44 <_malloc_r+0x8c>
 8008c88:	f8c8 2000 	str.w	r2, [r8]
 8008c8c:	e7ec      	b.n	8008c68 <_malloc_r+0xb0>
 8008c8e:	4623      	mov	r3, r4
 8008c90:	6864      	ldr	r4, [r4, #4]
 8008c92:	e7ac      	b.n	8008bee <_malloc_r+0x36>
 8008c94:	4634      	mov	r4, r6
 8008c96:	6876      	ldr	r6, [r6, #4]
 8008c98:	e7b4      	b.n	8008c04 <_malloc_r+0x4c>
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	e7cc      	b.n	8008c38 <_malloc_r+0x80>
 8008c9e:	230c      	movs	r3, #12
 8008ca0:	603b      	str	r3, [r7, #0]
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f000 f80e 	bl	8008cc4 <__malloc_unlock>
 8008ca8:	e797      	b.n	8008bda <_malloc_r+0x22>
 8008caa:	6025      	str	r5, [r4, #0]
 8008cac:	e7dc      	b.n	8008c68 <_malloc_r+0xb0>
 8008cae:	605b      	str	r3, [r3, #4]
 8008cb0:	deff      	udf	#255	; 0xff
 8008cb2:	bf00      	nop
 8008cb4:	20000b68 	.word	0x20000b68

08008cb8 <__malloc_lock>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__malloc_lock+0x8>)
 8008cba:	f7ff bf0e 	b.w	8008ada <__retarget_lock_acquire_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	20000b64 	.word	0x20000b64

08008cc4 <__malloc_unlock>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__malloc_unlock+0x8>)
 8008cc6:	f7ff bf09 	b.w	8008adc <__retarget_lock_release_recursive>
 8008cca:	bf00      	nop
 8008ccc:	20000b64 	.word	0x20000b64

08008cd0 <__ssputs_r>:
 8008cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd4:	688e      	ldr	r6, [r1, #8]
 8008cd6:	461f      	mov	r7, r3
 8008cd8:	42be      	cmp	r6, r7
 8008cda:	680b      	ldr	r3, [r1, #0]
 8008cdc:	4682      	mov	sl, r0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	4690      	mov	r8, r2
 8008ce2:	d82c      	bhi.n	8008d3e <__ssputs_r+0x6e>
 8008ce4:	898a      	ldrh	r2, [r1, #12]
 8008ce6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cea:	d026      	beq.n	8008d3a <__ssputs_r+0x6a>
 8008cec:	6965      	ldr	r5, [r4, #20]
 8008cee:	6909      	ldr	r1, [r1, #16]
 8008cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cf4:	eba3 0901 	sub.w	r9, r3, r1
 8008cf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cfc:	1c7b      	adds	r3, r7, #1
 8008cfe:	444b      	add	r3, r9
 8008d00:	106d      	asrs	r5, r5, #1
 8008d02:	429d      	cmp	r5, r3
 8008d04:	bf38      	it	cc
 8008d06:	461d      	movcc	r5, r3
 8008d08:	0553      	lsls	r3, r2, #21
 8008d0a:	d527      	bpl.n	8008d5c <__ssputs_r+0x8c>
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f7ff ff53 	bl	8008bb8 <_malloc_r>
 8008d12:	4606      	mov	r6, r0
 8008d14:	b360      	cbz	r0, 8008d70 <__ssputs_r+0xa0>
 8008d16:	6921      	ldr	r1, [r4, #16]
 8008d18:	464a      	mov	r2, r9
 8008d1a:	f000 fd61 	bl	80097e0 <memcpy>
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	6126      	str	r6, [r4, #16]
 8008d2c:	6165      	str	r5, [r4, #20]
 8008d2e:	444e      	add	r6, r9
 8008d30:	eba5 0509 	sub.w	r5, r5, r9
 8008d34:	6026      	str	r6, [r4, #0]
 8008d36:	60a5      	str	r5, [r4, #8]
 8008d38:	463e      	mov	r6, r7
 8008d3a:	42be      	cmp	r6, r7
 8008d3c:	d900      	bls.n	8008d40 <__ssputs_r+0x70>
 8008d3e:	463e      	mov	r6, r7
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	4632      	mov	r2, r6
 8008d44:	4641      	mov	r1, r8
 8008d46:	f000 fcff 	bl	8009748 <memmove>
 8008d4a:	68a3      	ldr	r3, [r4, #8]
 8008d4c:	1b9b      	subs	r3, r3, r6
 8008d4e:	60a3      	str	r3, [r4, #8]
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	4433      	add	r3, r6
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	2000      	movs	r0, #0
 8008d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	f000 fd4d 	bl	80097fc <_realloc_r>
 8008d62:	4606      	mov	r6, r0
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d1e0      	bne.n	8008d2a <__ssputs_r+0x5a>
 8008d68:	6921      	ldr	r1, [r4, #16]
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	f7ff feb8 	bl	8008ae0 <_free_r>
 8008d70:	230c      	movs	r3, #12
 8008d72:	f8ca 3000 	str.w	r3, [sl]
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	e7e9      	b.n	8008d58 <__ssputs_r+0x88>

08008d84 <_svfiprintf_r>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	4698      	mov	r8, r3
 8008d8a:	898b      	ldrh	r3, [r1, #12]
 8008d8c:	061b      	lsls	r3, r3, #24
 8008d8e:	b09d      	sub	sp, #116	; 0x74
 8008d90:	4607      	mov	r7, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	d50e      	bpl.n	8008db6 <_svfiprintf_r+0x32>
 8008d98:	690b      	ldr	r3, [r1, #16]
 8008d9a:	b963      	cbnz	r3, 8008db6 <_svfiprintf_r+0x32>
 8008d9c:	2140      	movs	r1, #64	; 0x40
 8008d9e:	f7ff ff0b 	bl	8008bb8 <_malloc_r>
 8008da2:	6028      	str	r0, [r5, #0]
 8008da4:	6128      	str	r0, [r5, #16]
 8008da6:	b920      	cbnz	r0, 8008db2 <_svfiprintf_r+0x2e>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	e0d0      	b.n	8008f54 <_svfiprintf_r+0x1d0>
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	616b      	str	r3, [r5, #20]
 8008db6:	2300      	movs	r3, #0
 8008db8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dba:	2320      	movs	r3, #32
 8008dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc4:	2330      	movs	r3, #48	; 0x30
 8008dc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f6c <_svfiprintf_r+0x1e8>
 8008dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dce:	f04f 0901 	mov.w	r9, #1
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	469a      	mov	sl, r3
 8008dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dda:	b10a      	cbz	r2, 8008de0 <_svfiprintf_r+0x5c>
 8008ddc:	2a25      	cmp	r2, #37	; 0x25
 8008dde:	d1f9      	bne.n	8008dd4 <_svfiprintf_r+0x50>
 8008de0:	ebba 0b04 	subs.w	fp, sl, r4
 8008de4:	d00b      	beq.n	8008dfe <_svfiprintf_r+0x7a>
 8008de6:	465b      	mov	r3, fp
 8008de8:	4622      	mov	r2, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	4638      	mov	r0, r7
 8008dee:	f7ff ff6f 	bl	8008cd0 <__ssputs_r>
 8008df2:	3001      	adds	r0, #1
 8008df4:	f000 80a9 	beq.w	8008f4a <_svfiprintf_r+0x1c6>
 8008df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dfa:	445a      	add	r2, fp
 8008dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 80a1 	beq.w	8008f4a <_svfiprintf_r+0x1c6>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e12:	f10a 0a01 	add.w	sl, sl, #1
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	9307      	str	r3, [sp, #28]
 8008e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e20:	4654      	mov	r4, sl
 8008e22:	2205      	movs	r2, #5
 8008e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e28:	4850      	ldr	r0, [pc, #320]	; (8008f6c <_svfiprintf_r+0x1e8>)
 8008e2a:	f7f7 f9e9 	bl	8000200 <memchr>
 8008e2e:	9a04      	ldr	r2, [sp, #16]
 8008e30:	b9d8      	cbnz	r0, 8008e6a <_svfiprintf_r+0xe6>
 8008e32:	06d0      	lsls	r0, r2, #27
 8008e34:	bf44      	itt	mi
 8008e36:	2320      	movmi	r3, #32
 8008e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3c:	0711      	lsls	r1, r2, #28
 8008e3e:	bf44      	itt	mi
 8008e40:	232b      	movmi	r3, #43	; 0x2b
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e46:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4c:	d015      	beq.n	8008e7a <_svfiprintf_r+0xf6>
 8008e4e:	9a07      	ldr	r2, [sp, #28]
 8008e50:	4654      	mov	r4, sl
 8008e52:	2000      	movs	r0, #0
 8008e54:	f04f 0c0a 	mov.w	ip, #10
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5e:	3b30      	subs	r3, #48	; 0x30
 8008e60:	2b09      	cmp	r3, #9
 8008e62:	d94d      	bls.n	8008f00 <_svfiprintf_r+0x17c>
 8008e64:	b1b0      	cbz	r0, 8008e94 <_svfiprintf_r+0x110>
 8008e66:	9207      	str	r2, [sp, #28]
 8008e68:	e014      	b.n	8008e94 <_svfiprintf_r+0x110>
 8008e6a:	eba0 0308 	sub.w	r3, r0, r8
 8008e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	46a2      	mov	sl, r4
 8008e78:	e7d2      	b.n	8008e20 <_svfiprintf_r+0x9c>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	1d19      	adds	r1, r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	9103      	str	r1, [sp, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bfbb      	ittet	lt
 8008e86:	425b      	neglt	r3, r3
 8008e88:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8c:	9307      	strge	r3, [sp, #28]
 8008e8e:	9307      	strlt	r3, [sp, #28]
 8008e90:	bfb8      	it	lt
 8008e92:	9204      	strlt	r2, [sp, #16]
 8008e94:	7823      	ldrb	r3, [r4, #0]
 8008e96:	2b2e      	cmp	r3, #46	; 0x2e
 8008e98:	d10c      	bne.n	8008eb4 <_svfiprintf_r+0x130>
 8008e9a:	7863      	ldrb	r3, [r4, #1]
 8008e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9e:	d134      	bne.n	8008f0a <_svfiprintf_r+0x186>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	1d1a      	adds	r2, r3, #4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	9203      	str	r2, [sp, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfb8      	it	lt
 8008eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eb0:	3402      	adds	r4, #2
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f7c <_svfiprintf_r+0x1f8>
 8008eb8:	7821      	ldrb	r1, [r4, #0]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	f7f7 f99f 	bl	8000200 <memchr>
 8008ec2:	b138      	cbz	r0, 8008ed4 <_svfiprintf_r+0x150>
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	eba0 000a 	sub.w	r0, r0, sl
 8008eca:	2240      	movs	r2, #64	; 0x40
 8008ecc:	4082      	lsls	r2, r0
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	3401      	adds	r4, #1
 8008ed2:	9304      	str	r3, [sp, #16]
 8008ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed8:	4825      	ldr	r0, [pc, #148]	; (8008f70 <_svfiprintf_r+0x1ec>)
 8008eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ede:	2206      	movs	r2, #6
 8008ee0:	f7f7 f98e 	bl	8000200 <memchr>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d038      	beq.n	8008f5a <_svfiprintf_r+0x1d6>
 8008ee8:	4b22      	ldr	r3, [pc, #136]	; (8008f74 <_svfiprintf_r+0x1f0>)
 8008eea:	bb1b      	cbnz	r3, 8008f34 <_svfiprintf_r+0x1b0>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	3307      	adds	r3, #7
 8008ef0:	f023 0307 	bic.w	r3, r3, #7
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	9303      	str	r3, [sp, #12]
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	4433      	add	r3, r6
 8008efc:	9309      	str	r3, [sp, #36]	; 0x24
 8008efe:	e768      	b.n	8008dd2 <_svfiprintf_r+0x4e>
 8008f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f04:	460c      	mov	r4, r1
 8008f06:	2001      	movs	r0, #1
 8008f08:	e7a6      	b.n	8008e58 <_svfiprintf_r+0xd4>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	3401      	adds	r4, #1
 8008f0e:	9305      	str	r3, [sp, #20]
 8008f10:	4619      	mov	r1, r3
 8008f12:	f04f 0c0a 	mov.w	ip, #10
 8008f16:	4620      	mov	r0, r4
 8008f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1c:	3a30      	subs	r2, #48	; 0x30
 8008f1e:	2a09      	cmp	r2, #9
 8008f20:	d903      	bls.n	8008f2a <_svfiprintf_r+0x1a6>
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0c6      	beq.n	8008eb4 <_svfiprintf_r+0x130>
 8008f26:	9105      	str	r1, [sp, #20]
 8008f28:	e7c4      	b.n	8008eb4 <_svfiprintf_r+0x130>
 8008f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f2e:	4604      	mov	r4, r0
 8008f30:	2301      	movs	r3, #1
 8008f32:	e7f0      	b.n	8008f16 <_svfiprintf_r+0x192>
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	462a      	mov	r2, r5
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <_svfiprintf_r+0x1f4>)
 8008f3c:	a904      	add	r1, sp, #16
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f3af 8000 	nop.w
 8008f44:	1c42      	adds	r2, r0, #1
 8008f46:	4606      	mov	r6, r0
 8008f48:	d1d6      	bne.n	8008ef8 <_svfiprintf_r+0x174>
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	065b      	lsls	r3, r3, #25
 8008f4e:	f53f af2d 	bmi.w	8008dac <_svfiprintf_r+0x28>
 8008f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f54:	b01d      	add	sp, #116	; 0x74
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	ab03      	add	r3, sp, #12
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <_svfiprintf_r+0x1f4>)
 8008f62:	a904      	add	r1, sp, #16
 8008f64:	4638      	mov	r0, r7
 8008f66:	f000 f9bd 	bl	80092e4 <_printf_i>
 8008f6a:	e7eb      	b.n	8008f44 <_svfiprintf_r+0x1c0>
 8008f6c:	08009ab8 	.word	0x08009ab8
 8008f70:	08009ac2 	.word	0x08009ac2
 8008f74:	00000000 	.word	0x00000000
 8008f78:	08008cd1 	.word	0x08008cd1
 8008f7c:	08009abe 	.word	0x08009abe

08008f80 <__sfputc_r>:
 8008f80:	6893      	ldr	r3, [r2, #8]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	b410      	push	{r4}
 8008f88:	6093      	str	r3, [r2, #8]
 8008f8a:	da08      	bge.n	8008f9e <__sfputc_r+0x1e>
 8008f8c:	6994      	ldr	r4, [r2, #24]
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	db01      	blt.n	8008f96 <__sfputc_r+0x16>
 8008f92:	290a      	cmp	r1, #10
 8008f94:	d103      	bne.n	8008f9e <__sfputc_r+0x1e>
 8008f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f9a:	f7ff bc90 	b.w	80088be <__swbuf_r>
 8008f9e:	6813      	ldr	r3, [r2, #0]
 8008fa0:	1c58      	adds	r0, r3, #1
 8008fa2:	6010      	str	r0, [r2, #0]
 8008fa4:	7019      	strb	r1, [r3, #0]
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <__sfputs_r>:
 8008fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	18d5      	adds	r5, r2, r3
 8008fb8:	42ac      	cmp	r4, r5
 8008fba:	d101      	bne.n	8008fc0 <__sfputs_r+0x12>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e007      	b.n	8008fd0 <__sfputs_r+0x22>
 8008fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc4:	463a      	mov	r2, r7
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f7ff ffda 	bl	8008f80 <__sfputc_r>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d1f3      	bne.n	8008fb8 <__sfputs_r+0xa>
 8008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fd4 <_vfiprintf_r>:
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	460d      	mov	r5, r1
 8008fda:	b09d      	sub	sp, #116	; 0x74
 8008fdc:	4614      	mov	r4, r2
 8008fde:	4698      	mov	r8, r3
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	b118      	cbz	r0, 8008fec <_vfiprintf_r+0x18>
 8008fe4:	6a03      	ldr	r3, [r0, #32]
 8008fe6:	b90b      	cbnz	r3, 8008fec <_vfiprintf_r+0x18>
 8008fe8:	f7ff fb2e 	bl	8008648 <__sinit>
 8008fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fee:	07d9      	lsls	r1, r3, #31
 8008ff0:	d405      	bmi.n	8008ffe <_vfiprintf_r+0x2a>
 8008ff2:	89ab      	ldrh	r3, [r5, #12]
 8008ff4:	059a      	lsls	r2, r3, #22
 8008ff6:	d402      	bmi.n	8008ffe <_vfiprintf_r+0x2a>
 8008ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ffa:	f7ff fd6e 	bl	8008ada <__retarget_lock_acquire_recursive>
 8008ffe:	89ab      	ldrh	r3, [r5, #12]
 8009000:	071b      	lsls	r3, r3, #28
 8009002:	d501      	bpl.n	8009008 <_vfiprintf_r+0x34>
 8009004:	692b      	ldr	r3, [r5, #16]
 8009006:	b99b      	cbnz	r3, 8009030 <_vfiprintf_r+0x5c>
 8009008:	4629      	mov	r1, r5
 800900a:	4630      	mov	r0, r6
 800900c:	f7ff fc94 	bl	8008938 <__swsetup_r>
 8009010:	b170      	cbz	r0, 8009030 <_vfiprintf_r+0x5c>
 8009012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009014:	07dc      	lsls	r4, r3, #31
 8009016:	d504      	bpl.n	8009022 <_vfiprintf_r+0x4e>
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	b01d      	add	sp, #116	; 0x74
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	89ab      	ldrh	r3, [r5, #12]
 8009024:	0598      	lsls	r0, r3, #22
 8009026:	d4f7      	bmi.n	8009018 <_vfiprintf_r+0x44>
 8009028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800902a:	f7ff fd57 	bl	8008adc <__retarget_lock_release_recursive>
 800902e:	e7f3      	b.n	8009018 <_vfiprintf_r+0x44>
 8009030:	2300      	movs	r3, #0
 8009032:	9309      	str	r3, [sp, #36]	; 0x24
 8009034:	2320      	movs	r3, #32
 8009036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800903a:	f8cd 800c 	str.w	r8, [sp, #12]
 800903e:	2330      	movs	r3, #48	; 0x30
 8009040:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091f4 <_vfiprintf_r+0x220>
 8009044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009048:	f04f 0901 	mov.w	r9, #1
 800904c:	4623      	mov	r3, r4
 800904e:	469a      	mov	sl, r3
 8009050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009054:	b10a      	cbz	r2, 800905a <_vfiprintf_r+0x86>
 8009056:	2a25      	cmp	r2, #37	; 0x25
 8009058:	d1f9      	bne.n	800904e <_vfiprintf_r+0x7a>
 800905a:	ebba 0b04 	subs.w	fp, sl, r4
 800905e:	d00b      	beq.n	8009078 <_vfiprintf_r+0xa4>
 8009060:	465b      	mov	r3, fp
 8009062:	4622      	mov	r2, r4
 8009064:	4629      	mov	r1, r5
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ffa1 	bl	8008fae <__sfputs_r>
 800906c:	3001      	adds	r0, #1
 800906e:	f000 80a9 	beq.w	80091c4 <_vfiprintf_r+0x1f0>
 8009072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009074:	445a      	add	r2, fp
 8009076:	9209      	str	r2, [sp, #36]	; 0x24
 8009078:	f89a 3000 	ldrb.w	r3, [sl]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80a1 	beq.w	80091c4 <_vfiprintf_r+0x1f0>
 8009082:	2300      	movs	r3, #0
 8009084:	f04f 32ff 	mov.w	r2, #4294967295
 8009088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800908c:	f10a 0a01 	add.w	sl, sl, #1
 8009090:	9304      	str	r3, [sp, #16]
 8009092:	9307      	str	r3, [sp, #28]
 8009094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009098:	931a      	str	r3, [sp, #104]	; 0x68
 800909a:	4654      	mov	r4, sl
 800909c:	2205      	movs	r2, #5
 800909e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090a2:	4854      	ldr	r0, [pc, #336]	; (80091f4 <_vfiprintf_r+0x220>)
 80090a4:	f7f7 f8ac 	bl	8000200 <memchr>
 80090a8:	9a04      	ldr	r2, [sp, #16]
 80090aa:	b9d8      	cbnz	r0, 80090e4 <_vfiprintf_r+0x110>
 80090ac:	06d1      	lsls	r1, r2, #27
 80090ae:	bf44      	itt	mi
 80090b0:	2320      	movmi	r3, #32
 80090b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090b6:	0713      	lsls	r3, r2, #28
 80090b8:	bf44      	itt	mi
 80090ba:	232b      	movmi	r3, #43	; 0x2b
 80090bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090c0:	f89a 3000 	ldrb.w	r3, [sl]
 80090c4:	2b2a      	cmp	r3, #42	; 0x2a
 80090c6:	d015      	beq.n	80090f4 <_vfiprintf_r+0x120>
 80090c8:	9a07      	ldr	r2, [sp, #28]
 80090ca:	4654      	mov	r4, sl
 80090cc:	2000      	movs	r0, #0
 80090ce:	f04f 0c0a 	mov.w	ip, #10
 80090d2:	4621      	mov	r1, r4
 80090d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d8:	3b30      	subs	r3, #48	; 0x30
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d94d      	bls.n	800917a <_vfiprintf_r+0x1a6>
 80090de:	b1b0      	cbz	r0, 800910e <_vfiprintf_r+0x13a>
 80090e0:	9207      	str	r2, [sp, #28]
 80090e2:	e014      	b.n	800910e <_vfiprintf_r+0x13a>
 80090e4:	eba0 0308 	sub.w	r3, r0, r8
 80090e8:	fa09 f303 	lsl.w	r3, r9, r3
 80090ec:	4313      	orrs	r3, r2
 80090ee:	9304      	str	r3, [sp, #16]
 80090f0:	46a2      	mov	sl, r4
 80090f2:	e7d2      	b.n	800909a <_vfiprintf_r+0xc6>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	1d19      	adds	r1, r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	9103      	str	r1, [sp, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfbb      	ittet	lt
 8009100:	425b      	neglt	r3, r3
 8009102:	f042 0202 	orrlt.w	r2, r2, #2
 8009106:	9307      	strge	r3, [sp, #28]
 8009108:	9307      	strlt	r3, [sp, #28]
 800910a:	bfb8      	it	lt
 800910c:	9204      	strlt	r2, [sp, #16]
 800910e:	7823      	ldrb	r3, [r4, #0]
 8009110:	2b2e      	cmp	r3, #46	; 0x2e
 8009112:	d10c      	bne.n	800912e <_vfiprintf_r+0x15a>
 8009114:	7863      	ldrb	r3, [r4, #1]
 8009116:	2b2a      	cmp	r3, #42	; 0x2a
 8009118:	d134      	bne.n	8009184 <_vfiprintf_r+0x1b0>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	9203      	str	r2, [sp, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	bfb8      	it	lt
 8009126:	f04f 33ff 	movlt.w	r3, #4294967295
 800912a:	3402      	adds	r4, #2
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009204 <_vfiprintf_r+0x230>
 8009132:	7821      	ldrb	r1, [r4, #0]
 8009134:	2203      	movs	r2, #3
 8009136:	4650      	mov	r0, sl
 8009138:	f7f7 f862 	bl	8000200 <memchr>
 800913c:	b138      	cbz	r0, 800914e <_vfiprintf_r+0x17a>
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	eba0 000a 	sub.w	r0, r0, sl
 8009144:	2240      	movs	r2, #64	; 0x40
 8009146:	4082      	lsls	r2, r0
 8009148:	4313      	orrs	r3, r2
 800914a:	3401      	adds	r4, #1
 800914c:	9304      	str	r3, [sp, #16]
 800914e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009152:	4829      	ldr	r0, [pc, #164]	; (80091f8 <_vfiprintf_r+0x224>)
 8009154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009158:	2206      	movs	r2, #6
 800915a:	f7f7 f851 	bl	8000200 <memchr>
 800915e:	2800      	cmp	r0, #0
 8009160:	d03f      	beq.n	80091e2 <_vfiprintf_r+0x20e>
 8009162:	4b26      	ldr	r3, [pc, #152]	; (80091fc <_vfiprintf_r+0x228>)
 8009164:	bb1b      	cbnz	r3, 80091ae <_vfiprintf_r+0x1da>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	3307      	adds	r3, #7
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	3308      	adds	r3, #8
 8009170:	9303      	str	r3, [sp, #12]
 8009172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009174:	443b      	add	r3, r7
 8009176:	9309      	str	r3, [sp, #36]	; 0x24
 8009178:	e768      	b.n	800904c <_vfiprintf_r+0x78>
 800917a:	fb0c 3202 	mla	r2, ip, r2, r3
 800917e:	460c      	mov	r4, r1
 8009180:	2001      	movs	r0, #1
 8009182:	e7a6      	b.n	80090d2 <_vfiprintf_r+0xfe>
 8009184:	2300      	movs	r3, #0
 8009186:	3401      	adds	r4, #1
 8009188:	9305      	str	r3, [sp, #20]
 800918a:	4619      	mov	r1, r3
 800918c:	f04f 0c0a 	mov.w	ip, #10
 8009190:	4620      	mov	r0, r4
 8009192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009196:	3a30      	subs	r2, #48	; 0x30
 8009198:	2a09      	cmp	r2, #9
 800919a:	d903      	bls.n	80091a4 <_vfiprintf_r+0x1d0>
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0c6      	beq.n	800912e <_vfiprintf_r+0x15a>
 80091a0:	9105      	str	r1, [sp, #20]
 80091a2:	e7c4      	b.n	800912e <_vfiprintf_r+0x15a>
 80091a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091a8:	4604      	mov	r4, r0
 80091aa:	2301      	movs	r3, #1
 80091ac:	e7f0      	b.n	8009190 <_vfiprintf_r+0x1bc>
 80091ae:	ab03      	add	r3, sp, #12
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	462a      	mov	r2, r5
 80091b4:	4b12      	ldr	r3, [pc, #72]	; (8009200 <_vfiprintf_r+0x22c>)
 80091b6:	a904      	add	r1, sp, #16
 80091b8:	4630      	mov	r0, r6
 80091ba:	f3af 8000 	nop.w
 80091be:	4607      	mov	r7, r0
 80091c0:	1c78      	adds	r0, r7, #1
 80091c2:	d1d6      	bne.n	8009172 <_vfiprintf_r+0x19e>
 80091c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091c6:	07d9      	lsls	r1, r3, #31
 80091c8:	d405      	bmi.n	80091d6 <_vfiprintf_r+0x202>
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	059a      	lsls	r2, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <_vfiprintf_r+0x202>
 80091d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091d2:	f7ff fc83 	bl	8008adc <__retarget_lock_release_recursive>
 80091d6:	89ab      	ldrh	r3, [r5, #12]
 80091d8:	065b      	lsls	r3, r3, #25
 80091da:	f53f af1d 	bmi.w	8009018 <_vfiprintf_r+0x44>
 80091de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091e0:	e71c      	b.n	800901c <_vfiprintf_r+0x48>
 80091e2:	ab03      	add	r3, sp, #12
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	462a      	mov	r2, r5
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <_vfiprintf_r+0x22c>)
 80091ea:	a904      	add	r1, sp, #16
 80091ec:	4630      	mov	r0, r6
 80091ee:	f000 f879 	bl	80092e4 <_printf_i>
 80091f2:	e7e4      	b.n	80091be <_vfiprintf_r+0x1ea>
 80091f4:	08009ab8 	.word	0x08009ab8
 80091f8:	08009ac2 	.word	0x08009ac2
 80091fc:	00000000 	.word	0x00000000
 8009200:	08008faf 	.word	0x08008faf
 8009204:	08009abe 	.word	0x08009abe

08009208 <_printf_common>:
 8009208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800920c:	4616      	mov	r6, r2
 800920e:	4699      	mov	r9, r3
 8009210:	688a      	ldr	r2, [r1, #8]
 8009212:	690b      	ldr	r3, [r1, #16]
 8009214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009218:	4293      	cmp	r3, r2
 800921a:	bfb8      	it	lt
 800921c:	4613      	movlt	r3, r2
 800921e:	6033      	str	r3, [r6, #0]
 8009220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009224:	4607      	mov	r7, r0
 8009226:	460c      	mov	r4, r1
 8009228:	b10a      	cbz	r2, 800922e <_printf_common+0x26>
 800922a:	3301      	adds	r3, #1
 800922c:	6033      	str	r3, [r6, #0]
 800922e:	6823      	ldr	r3, [r4, #0]
 8009230:	0699      	lsls	r1, r3, #26
 8009232:	bf42      	ittt	mi
 8009234:	6833      	ldrmi	r3, [r6, #0]
 8009236:	3302      	addmi	r3, #2
 8009238:	6033      	strmi	r3, [r6, #0]
 800923a:	6825      	ldr	r5, [r4, #0]
 800923c:	f015 0506 	ands.w	r5, r5, #6
 8009240:	d106      	bne.n	8009250 <_printf_common+0x48>
 8009242:	f104 0a19 	add.w	sl, r4, #25
 8009246:	68e3      	ldr	r3, [r4, #12]
 8009248:	6832      	ldr	r2, [r6, #0]
 800924a:	1a9b      	subs	r3, r3, r2
 800924c:	42ab      	cmp	r3, r5
 800924e:	dc26      	bgt.n	800929e <_printf_common+0x96>
 8009250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009254:	1e13      	subs	r3, r2, #0
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	bf18      	it	ne
 800925a:	2301      	movne	r3, #1
 800925c:	0692      	lsls	r2, r2, #26
 800925e:	d42b      	bmi.n	80092b8 <_printf_common+0xb0>
 8009260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009264:	4649      	mov	r1, r9
 8009266:	4638      	mov	r0, r7
 8009268:	47c0      	blx	r8
 800926a:	3001      	adds	r0, #1
 800926c:	d01e      	beq.n	80092ac <_printf_common+0xa4>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	6922      	ldr	r2, [r4, #16]
 8009272:	f003 0306 	and.w	r3, r3, #6
 8009276:	2b04      	cmp	r3, #4
 8009278:	bf02      	ittt	eq
 800927a:	68e5      	ldreq	r5, [r4, #12]
 800927c:	6833      	ldreq	r3, [r6, #0]
 800927e:	1aed      	subeq	r5, r5, r3
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	bf0c      	ite	eq
 8009284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009288:	2500      	movne	r5, #0
 800928a:	4293      	cmp	r3, r2
 800928c:	bfc4      	itt	gt
 800928e:	1a9b      	subgt	r3, r3, r2
 8009290:	18ed      	addgt	r5, r5, r3
 8009292:	2600      	movs	r6, #0
 8009294:	341a      	adds	r4, #26
 8009296:	42b5      	cmp	r5, r6
 8009298:	d11a      	bne.n	80092d0 <_printf_common+0xc8>
 800929a:	2000      	movs	r0, #0
 800929c:	e008      	b.n	80092b0 <_printf_common+0xa8>
 800929e:	2301      	movs	r3, #1
 80092a0:	4652      	mov	r2, sl
 80092a2:	4649      	mov	r1, r9
 80092a4:	4638      	mov	r0, r7
 80092a6:	47c0      	blx	r8
 80092a8:	3001      	adds	r0, #1
 80092aa:	d103      	bne.n	80092b4 <_printf_common+0xac>
 80092ac:	f04f 30ff 	mov.w	r0, #4294967295
 80092b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b4:	3501      	adds	r5, #1
 80092b6:	e7c6      	b.n	8009246 <_printf_common+0x3e>
 80092b8:	18e1      	adds	r1, r4, r3
 80092ba:	1c5a      	adds	r2, r3, #1
 80092bc:	2030      	movs	r0, #48	; 0x30
 80092be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092c2:	4422      	add	r2, r4
 80092c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092cc:	3302      	adds	r3, #2
 80092ce:	e7c7      	b.n	8009260 <_printf_common+0x58>
 80092d0:	2301      	movs	r3, #1
 80092d2:	4622      	mov	r2, r4
 80092d4:	4649      	mov	r1, r9
 80092d6:	4638      	mov	r0, r7
 80092d8:	47c0      	blx	r8
 80092da:	3001      	adds	r0, #1
 80092dc:	d0e6      	beq.n	80092ac <_printf_common+0xa4>
 80092de:	3601      	adds	r6, #1
 80092e0:	e7d9      	b.n	8009296 <_printf_common+0x8e>
	...

080092e4 <_printf_i>:
 80092e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	7e0f      	ldrb	r7, [r1, #24]
 80092ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092ec:	2f78      	cmp	r7, #120	; 0x78
 80092ee:	4691      	mov	r9, r2
 80092f0:	4680      	mov	r8, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	469a      	mov	sl, r3
 80092f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092fa:	d807      	bhi.n	800930c <_printf_i+0x28>
 80092fc:	2f62      	cmp	r7, #98	; 0x62
 80092fe:	d80a      	bhi.n	8009316 <_printf_i+0x32>
 8009300:	2f00      	cmp	r7, #0
 8009302:	f000 80d4 	beq.w	80094ae <_printf_i+0x1ca>
 8009306:	2f58      	cmp	r7, #88	; 0x58
 8009308:	f000 80c0 	beq.w	800948c <_printf_i+0x1a8>
 800930c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009314:	e03a      	b.n	800938c <_printf_i+0xa8>
 8009316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800931a:	2b15      	cmp	r3, #21
 800931c:	d8f6      	bhi.n	800930c <_printf_i+0x28>
 800931e:	a101      	add	r1, pc, #4	; (adr r1, 8009324 <_printf_i+0x40>)
 8009320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009324:	0800937d 	.word	0x0800937d
 8009328:	08009391 	.word	0x08009391
 800932c:	0800930d 	.word	0x0800930d
 8009330:	0800930d 	.word	0x0800930d
 8009334:	0800930d 	.word	0x0800930d
 8009338:	0800930d 	.word	0x0800930d
 800933c:	08009391 	.word	0x08009391
 8009340:	0800930d 	.word	0x0800930d
 8009344:	0800930d 	.word	0x0800930d
 8009348:	0800930d 	.word	0x0800930d
 800934c:	0800930d 	.word	0x0800930d
 8009350:	08009495 	.word	0x08009495
 8009354:	080093bd 	.word	0x080093bd
 8009358:	0800944f 	.word	0x0800944f
 800935c:	0800930d 	.word	0x0800930d
 8009360:	0800930d 	.word	0x0800930d
 8009364:	080094b7 	.word	0x080094b7
 8009368:	0800930d 	.word	0x0800930d
 800936c:	080093bd 	.word	0x080093bd
 8009370:	0800930d 	.word	0x0800930d
 8009374:	0800930d 	.word	0x0800930d
 8009378:	08009457 	.word	0x08009457
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	1d1a      	adds	r2, r3, #4
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	602a      	str	r2, [r5, #0]
 8009384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800938c:	2301      	movs	r3, #1
 800938e:	e09f      	b.n	80094d0 <_printf_i+0x1ec>
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	0607      	lsls	r7, r0, #24
 8009396:	f103 0104 	add.w	r1, r3, #4
 800939a:	6029      	str	r1, [r5, #0]
 800939c:	d501      	bpl.n	80093a2 <_printf_i+0xbe>
 800939e:	681e      	ldr	r6, [r3, #0]
 80093a0:	e003      	b.n	80093aa <_printf_i+0xc6>
 80093a2:	0646      	lsls	r6, r0, #25
 80093a4:	d5fb      	bpl.n	800939e <_printf_i+0xba>
 80093a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093aa:	2e00      	cmp	r6, #0
 80093ac:	da03      	bge.n	80093b6 <_printf_i+0xd2>
 80093ae:	232d      	movs	r3, #45	; 0x2d
 80093b0:	4276      	negs	r6, r6
 80093b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b6:	485a      	ldr	r0, [pc, #360]	; (8009520 <_printf_i+0x23c>)
 80093b8:	230a      	movs	r3, #10
 80093ba:	e012      	b.n	80093e2 <_printf_i+0xfe>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	6820      	ldr	r0, [r4, #0]
 80093c0:	1d19      	adds	r1, r3, #4
 80093c2:	6029      	str	r1, [r5, #0]
 80093c4:	0605      	lsls	r5, r0, #24
 80093c6:	d501      	bpl.n	80093cc <_printf_i+0xe8>
 80093c8:	681e      	ldr	r6, [r3, #0]
 80093ca:	e002      	b.n	80093d2 <_printf_i+0xee>
 80093cc:	0641      	lsls	r1, r0, #25
 80093ce:	d5fb      	bpl.n	80093c8 <_printf_i+0xe4>
 80093d0:	881e      	ldrh	r6, [r3, #0]
 80093d2:	4853      	ldr	r0, [pc, #332]	; (8009520 <_printf_i+0x23c>)
 80093d4:	2f6f      	cmp	r7, #111	; 0x6f
 80093d6:	bf0c      	ite	eq
 80093d8:	2308      	moveq	r3, #8
 80093da:	230a      	movne	r3, #10
 80093dc:	2100      	movs	r1, #0
 80093de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093e2:	6865      	ldr	r5, [r4, #4]
 80093e4:	60a5      	str	r5, [r4, #8]
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	bfa2      	ittt	ge
 80093ea:	6821      	ldrge	r1, [r4, #0]
 80093ec:	f021 0104 	bicge.w	r1, r1, #4
 80093f0:	6021      	strge	r1, [r4, #0]
 80093f2:	b90e      	cbnz	r6, 80093f8 <_printf_i+0x114>
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	d04b      	beq.n	8009490 <_printf_i+0x1ac>
 80093f8:	4615      	mov	r5, r2
 80093fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80093fe:	fb03 6711 	mls	r7, r3, r1, r6
 8009402:	5dc7      	ldrb	r7, [r0, r7]
 8009404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009408:	4637      	mov	r7, r6
 800940a:	42bb      	cmp	r3, r7
 800940c:	460e      	mov	r6, r1
 800940e:	d9f4      	bls.n	80093fa <_printf_i+0x116>
 8009410:	2b08      	cmp	r3, #8
 8009412:	d10b      	bne.n	800942c <_printf_i+0x148>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	07de      	lsls	r6, r3, #31
 8009418:	d508      	bpl.n	800942c <_printf_i+0x148>
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	6861      	ldr	r1, [r4, #4]
 800941e:	4299      	cmp	r1, r3
 8009420:	bfde      	ittt	le
 8009422:	2330      	movle	r3, #48	; 0x30
 8009424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800942c:	1b52      	subs	r2, r2, r5
 800942e:	6122      	str	r2, [r4, #16]
 8009430:	f8cd a000 	str.w	sl, [sp]
 8009434:	464b      	mov	r3, r9
 8009436:	aa03      	add	r2, sp, #12
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fee4 	bl	8009208 <_printf_common>
 8009440:	3001      	adds	r0, #1
 8009442:	d14a      	bne.n	80094da <_printf_i+0x1f6>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b004      	add	sp, #16
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	f043 0320 	orr.w	r3, r3, #32
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	4833      	ldr	r0, [pc, #204]	; (8009524 <_printf_i+0x240>)
 8009458:	2778      	movs	r7, #120	; 0x78
 800945a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	6829      	ldr	r1, [r5, #0]
 8009462:	061f      	lsls	r7, r3, #24
 8009464:	f851 6b04 	ldr.w	r6, [r1], #4
 8009468:	d402      	bmi.n	8009470 <_printf_i+0x18c>
 800946a:	065f      	lsls	r7, r3, #25
 800946c:	bf48      	it	mi
 800946e:	b2b6      	uxthmi	r6, r6
 8009470:	07df      	lsls	r7, r3, #31
 8009472:	bf48      	it	mi
 8009474:	f043 0320 	orrmi.w	r3, r3, #32
 8009478:	6029      	str	r1, [r5, #0]
 800947a:	bf48      	it	mi
 800947c:	6023      	strmi	r3, [r4, #0]
 800947e:	b91e      	cbnz	r6, 8009488 <_printf_i+0x1a4>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	f023 0320 	bic.w	r3, r3, #32
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	2310      	movs	r3, #16
 800948a:	e7a7      	b.n	80093dc <_printf_i+0xf8>
 800948c:	4824      	ldr	r0, [pc, #144]	; (8009520 <_printf_i+0x23c>)
 800948e:	e7e4      	b.n	800945a <_printf_i+0x176>
 8009490:	4615      	mov	r5, r2
 8009492:	e7bd      	b.n	8009410 <_printf_i+0x12c>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	6826      	ldr	r6, [r4, #0]
 8009498:	6961      	ldr	r1, [r4, #20]
 800949a:	1d18      	adds	r0, r3, #4
 800949c:	6028      	str	r0, [r5, #0]
 800949e:	0635      	lsls	r5, r6, #24
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	d501      	bpl.n	80094a8 <_printf_i+0x1c4>
 80094a4:	6019      	str	r1, [r3, #0]
 80094a6:	e002      	b.n	80094ae <_printf_i+0x1ca>
 80094a8:	0670      	lsls	r0, r6, #25
 80094aa:	d5fb      	bpl.n	80094a4 <_printf_i+0x1c0>
 80094ac:	8019      	strh	r1, [r3, #0]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	4615      	mov	r5, r2
 80094b4:	e7bc      	b.n	8009430 <_printf_i+0x14c>
 80094b6:	682b      	ldr	r3, [r5, #0]
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	602a      	str	r2, [r5, #0]
 80094bc:	681d      	ldr	r5, [r3, #0]
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	2100      	movs	r1, #0
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7f6 fe9c 	bl	8000200 <memchr>
 80094c8:	b108      	cbz	r0, 80094ce <_printf_i+0x1ea>
 80094ca:	1b40      	subs	r0, r0, r5
 80094cc:	6060      	str	r0, [r4, #4]
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	2300      	movs	r3, #0
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d8:	e7aa      	b.n	8009430 <_printf_i+0x14c>
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	462a      	mov	r2, r5
 80094de:	4649      	mov	r1, r9
 80094e0:	4640      	mov	r0, r8
 80094e2:	47d0      	blx	sl
 80094e4:	3001      	adds	r0, #1
 80094e6:	d0ad      	beq.n	8009444 <_printf_i+0x160>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	079b      	lsls	r3, r3, #30
 80094ec:	d413      	bmi.n	8009516 <_printf_i+0x232>
 80094ee:	68e0      	ldr	r0, [r4, #12]
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	4298      	cmp	r0, r3
 80094f4:	bfb8      	it	lt
 80094f6:	4618      	movlt	r0, r3
 80094f8:	e7a6      	b.n	8009448 <_printf_i+0x164>
 80094fa:	2301      	movs	r3, #1
 80094fc:	4632      	mov	r2, r6
 80094fe:	4649      	mov	r1, r9
 8009500:	4640      	mov	r0, r8
 8009502:	47d0      	blx	sl
 8009504:	3001      	adds	r0, #1
 8009506:	d09d      	beq.n	8009444 <_printf_i+0x160>
 8009508:	3501      	adds	r5, #1
 800950a:	68e3      	ldr	r3, [r4, #12]
 800950c:	9903      	ldr	r1, [sp, #12]
 800950e:	1a5b      	subs	r3, r3, r1
 8009510:	42ab      	cmp	r3, r5
 8009512:	dcf2      	bgt.n	80094fa <_printf_i+0x216>
 8009514:	e7eb      	b.n	80094ee <_printf_i+0x20a>
 8009516:	2500      	movs	r5, #0
 8009518:	f104 0619 	add.w	r6, r4, #25
 800951c:	e7f5      	b.n	800950a <_printf_i+0x226>
 800951e:	bf00      	nop
 8009520:	08009ac9 	.word	0x08009ac9
 8009524:	08009ada 	.word	0x08009ada

08009528 <__sflush_r>:
 8009528:	898a      	ldrh	r2, [r1, #12]
 800952a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952e:	4605      	mov	r5, r0
 8009530:	0710      	lsls	r0, r2, #28
 8009532:	460c      	mov	r4, r1
 8009534:	d458      	bmi.n	80095e8 <__sflush_r+0xc0>
 8009536:	684b      	ldr	r3, [r1, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc05      	bgt.n	8009548 <__sflush_r+0x20>
 800953c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	dc02      	bgt.n	8009548 <__sflush_r+0x20>
 8009542:	2000      	movs	r0, #0
 8009544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800954a:	2e00      	cmp	r6, #0
 800954c:	d0f9      	beq.n	8009542 <__sflush_r+0x1a>
 800954e:	2300      	movs	r3, #0
 8009550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009554:	682f      	ldr	r7, [r5, #0]
 8009556:	6a21      	ldr	r1, [r4, #32]
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	d032      	beq.n	80095c2 <__sflush_r+0x9a>
 800955c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	075a      	lsls	r2, r3, #29
 8009562:	d505      	bpl.n	8009570 <__sflush_r+0x48>
 8009564:	6863      	ldr	r3, [r4, #4]
 8009566:	1ac0      	subs	r0, r0, r3
 8009568:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800956a:	b10b      	cbz	r3, 8009570 <__sflush_r+0x48>
 800956c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800956e:	1ac0      	subs	r0, r0, r3
 8009570:	2300      	movs	r3, #0
 8009572:	4602      	mov	r2, r0
 8009574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009576:	6a21      	ldr	r1, [r4, #32]
 8009578:	4628      	mov	r0, r5
 800957a:	47b0      	blx	r6
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	d106      	bne.n	8009590 <__sflush_r+0x68>
 8009582:	6829      	ldr	r1, [r5, #0]
 8009584:	291d      	cmp	r1, #29
 8009586:	d82b      	bhi.n	80095e0 <__sflush_r+0xb8>
 8009588:	4a29      	ldr	r2, [pc, #164]	; (8009630 <__sflush_r+0x108>)
 800958a:	410a      	asrs	r2, r1
 800958c:	07d6      	lsls	r6, r2, #31
 800958e:	d427      	bmi.n	80095e0 <__sflush_r+0xb8>
 8009590:	2200      	movs	r2, #0
 8009592:	6062      	str	r2, [r4, #4]
 8009594:	04d9      	lsls	r1, r3, #19
 8009596:	6922      	ldr	r2, [r4, #16]
 8009598:	6022      	str	r2, [r4, #0]
 800959a:	d504      	bpl.n	80095a6 <__sflush_r+0x7e>
 800959c:	1c42      	adds	r2, r0, #1
 800959e:	d101      	bne.n	80095a4 <__sflush_r+0x7c>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b903      	cbnz	r3, 80095a6 <__sflush_r+0x7e>
 80095a4:	6560      	str	r0, [r4, #84]	; 0x54
 80095a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a8:	602f      	str	r7, [r5, #0]
 80095aa:	2900      	cmp	r1, #0
 80095ac:	d0c9      	beq.n	8009542 <__sflush_r+0x1a>
 80095ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095b2:	4299      	cmp	r1, r3
 80095b4:	d002      	beq.n	80095bc <__sflush_r+0x94>
 80095b6:	4628      	mov	r0, r5
 80095b8:	f7ff fa92 	bl	8008ae0 <_free_r>
 80095bc:	2000      	movs	r0, #0
 80095be:	6360      	str	r0, [r4, #52]	; 0x34
 80095c0:	e7c0      	b.n	8009544 <__sflush_r+0x1c>
 80095c2:	2301      	movs	r3, #1
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b0      	blx	r6
 80095c8:	1c41      	adds	r1, r0, #1
 80095ca:	d1c8      	bne.n	800955e <__sflush_r+0x36>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0c5      	beq.n	800955e <__sflush_r+0x36>
 80095d2:	2b1d      	cmp	r3, #29
 80095d4:	d001      	beq.n	80095da <__sflush_r+0xb2>
 80095d6:	2b16      	cmp	r3, #22
 80095d8:	d101      	bne.n	80095de <__sflush_r+0xb6>
 80095da:	602f      	str	r7, [r5, #0]
 80095dc:	e7b1      	b.n	8009542 <__sflush_r+0x1a>
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e4:	81a3      	strh	r3, [r4, #12]
 80095e6:	e7ad      	b.n	8009544 <__sflush_r+0x1c>
 80095e8:	690f      	ldr	r7, [r1, #16]
 80095ea:	2f00      	cmp	r7, #0
 80095ec:	d0a9      	beq.n	8009542 <__sflush_r+0x1a>
 80095ee:	0793      	lsls	r3, r2, #30
 80095f0:	680e      	ldr	r6, [r1, #0]
 80095f2:	bf08      	it	eq
 80095f4:	694b      	ldreq	r3, [r1, #20]
 80095f6:	600f      	str	r7, [r1, #0]
 80095f8:	bf18      	it	ne
 80095fa:	2300      	movne	r3, #0
 80095fc:	eba6 0807 	sub.w	r8, r6, r7
 8009600:	608b      	str	r3, [r1, #8]
 8009602:	f1b8 0f00 	cmp.w	r8, #0
 8009606:	dd9c      	ble.n	8009542 <__sflush_r+0x1a>
 8009608:	6a21      	ldr	r1, [r4, #32]
 800960a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800960c:	4643      	mov	r3, r8
 800960e:	463a      	mov	r2, r7
 8009610:	4628      	mov	r0, r5
 8009612:	47b0      	blx	r6
 8009614:	2800      	cmp	r0, #0
 8009616:	dc06      	bgt.n	8009626 <__sflush_r+0xfe>
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	e78e      	b.n	8009544 <__sflush_r+0x1c>
 8009626:	4407      	add	r7, r0
 8009628:	eba8 0800 	sub.w	r8, r8, r0
 800962c:	e7e9      	b.n	8009602 <__sflush_r+0xda>
 800962e:	bf00      	nop
 8009630:	dfbffffe 	.word	0xdfbffffe

08009634 <_fflush_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	690b      	ldr	r3, [r1, #16]
 8009638:	4605      	mov	r5, r0
 800963a:	460c      	mov	r4, r1
 800963c:	b913      	cbnz	r3, 8009644 <_fflush_r+0x10>
 800963e:	2500      	movs	r5, #0
 8009640:	4628      	mov	r0, r5
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	b118      	cbz	r0, 800964e <_fflush_r+0x1a>
 8009646:	6a03      	ldr	r3, [r0, #32]
 8009648:	b90b      	cbnz	r3, 800964e <_fflush_r+0x1a>
 800964a:	f7fe fffd 	bl	8008648 <__sinit>
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0f3      	beq.n	800963e <_fflush_r+0xa>
 8009656:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009658:	07d0      	lsls	r0, r2, #31
 800965a:	d404      	bmi.n	8009666 <_fflush_r+0x32>
 800965c:	0599      	lsls	r1, r3, #22
 800965e:	d402      	bmi.n	8009666 <_fflush_r+0x32>
 8009660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009662:	f7ff fa3a 	bl	8008ada <__retarget_lock_acquire_recursive>
 8009666:	4628      	mov	r0, r5
 8009668:	4621      	mov	r1, r4
 800966a:	f7ff ff5d 	bl	8009528 <__sflush_r>
 800966e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009670:	07da      	lsls	r2, r3, #31
 8009672:	4605      	mov	r5, r0
 8009674:	d4e4      	bmi.n	8009640 <_fflush_r+0xc>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	059b      	lsls	r3, r3, #22
 800967a:	d4e1      	bmi.n	8009640 <_fflush_r+0xc>
 800967c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967e:	f7ff fa2d 	bl	8008adc <__retarget_lock_release_recursive>
 8009682:	e7dd      	b.n	8009640 <_fflush_r+0xc>

08009684 <__swhatbuf_r>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	460c      	mov	r4, r1
 8009688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968c:	2900      	cmp	r1, #0
 800968e:	b096      	sub	sp, #88	; 0x58
 8009690:	4615      	mov	r5, r2
 8009692:	461e      	mov	r6, r3
 8009694:	da0d      	bge.n	80096b2 <__swhatbuf_r+0x2e>
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f013 0f80 	tst.w	r3, #128	; 0x80
 800969c:	f04f 0100 	mov.w	r1, #0
 80096a0:	bf0c      	ite	eq
 80096a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096a6:	2340      	movne	r3, #64	; 0x40
 80096a8:	2000      	movs	r0, #0
 80096aa:	6031      	str	r1, [r6, #0]
 80096ac:	602b      	str	r3, [r5, #0]
 80096ae:	b016      	add	sp, #88	; 0x58
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
 80096b2:	466a      	mov	r2, sp
 80096b4:	f000 f862 	bl	800977c <_fstat_r>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	dbec      	blt.n	8009696 <__swhatbuf_r+0x12>
 80096bc:	9901      	ldr	r1, [sp, #4]
 80096be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096c6:	4259      	negs	r1, r3
 80096c8:	4159      	adcs	r1, r3
 80096ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ce:	e7eb      	b.n	80096a8 <__swhatbuf_r+0x24>

080096d0 <__smakebuf_r>:
 80096d0:	898b      	ldrh	r3, [r1, #12]
 80096d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096d4:	079d      	lsls	r5, r3, #30
 80096d6:	4606      	mov	r6, r0
 80096d8:	460c      	mov	r4, r1
 80096da:	d507      	bpl.n	80096ec <__smakebuf_r+0x1c>
 80096dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096e0:	6023      	str	r3, [r4, #0]
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	2301      	movs	r3, #1
 80096e6:	6163      	str	r3, [r4, #20]
 80096e8:	b002      	add	sp, #8
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	ab01      	add	r3, sp, #4
 80096ee:	466a      	mov	r2, sp
 80096f0:	f7ff ffc8 	bl	8009684 <__swhatbuf_r>
 80096f4:	9900      	ldr	r1, [sp, #0]
 80096f6:	4605      	mov	r5, r0
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7ff fa5d 	bl	8008bb8 <_malloc_r>
 80096fe:	b948      	cbnz	r0, 8009714 <__smakebuf_r+0x44>
 8009700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009704:	059a      	lsls	r2, r3, #22
 8009706:	d4ef      	bmi.n	80096e8 <__smakebuf_r+0x18>
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	f043 0302 	orr.w	r3, r3, #2
 8009710:	81a3      	strh	r3, [r4, #12]
 8009712:	e7e3      	b.n	80096dc <__smakebuf_r+0xc>
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	6020      	str	r0, [r4, #0]
 8009718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971c:	81a3      	strh	r3, [r4, #12]
 800971e:	9b00      	ldr	r3, [sp, #0]
 8009720:	6163      	str	r3, [r4, #20]
 8009722:	9b01      	ldr	r3, [sp, #4]
 8009724:	6120      	str	r0, [r4, #16]
 8009726:	b15b      	cbz	r3, 8009740 <__smakebuf_r+0x70>
 8009728:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800972c:	4630      	mov	r0, r6
 800972e:	f000 f837 	bl	80097a0 <_isatty_r>
 8009732:	b128      	cbz	r0, 8009740 <__smakebuf_r+0x70>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	f023 0303 	bic.w	r3, r3, #3
 800973a:	f043 0301 	orr.w	r3, r3, #1
 800973e:	81a3      	strh	r3, [r4, #12]
 8009740:	89a3      	ldrh	r3, [r4, #12]
 8009742:	431d      	orrs	r5, r3
 8009744:	81a5      	strh	r5, [r4, #12]
 8009746:	e7cf      	b.n	80096e8 <__smakebuf_r+0x18>

08009748 <memmove>:
 8009748:	4288      	cmp	r0, r1
 800974a:	b510      	push	{r4, lr}
 800974c:	eb01 0402 	add.w	r4, r1, r2
 8009750:	d902      	bls.n	8009758 <memmove+0x10>
 8009752:	4284      	cmp	r4, r0
 8009754:	4623      	mov	r3, r4
 8009756:	d807      	bhi.n	8009768 <memmove+0x20>
 8009758:	1e43      	subs	r3, r0, #1
 800975a:	42a1      	cmp	r1, r4
 800975c:	d008      	beq.n	8009770 <memmove+0x28>
 800975e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009766:	e7f8      	b.n	800975a <memmove+0x12>
 8009768:	4402      	add	r2, r0
 800976a:	4601      	mov	r1, r0
 800976c:	428a      	cmp	r2, r1
 800976e:	d100      	bne.n	8009772 <memmove+0x2a>
 8009770:	bd10      	pop	{r4, pc}
 8009772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800977a:	e7f7      	b.n	800976c <memmove+0x24>

0800977c <_fstat_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d07      	ldr	r5, [pc, #28]	; (800979c <_fstat_r+0x20>)
 8009780:	2300      	movs	r3, #0
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	4611      	mov	r1, r2
 8009788:	602b      	str	r3, [r5, #0]
 800978a:	f7f8 fb08 	bl	8001d9e <_fstat>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d102      	bne.n	8009798 <_fstat_r+0x1c>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	b103      	cbz	r3, 8009798 <_fstat_r+0x1c>
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	bd38      	pop	{r3, r4, r5, pc}
 800979a:	bf00      	nop
 800979c:	20000b60 	.word	0x20000b60

080097a0 <_isatty_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d06      	ldr	r5, [pc, #24]	; (80097bc <_isatty_r+0x1c>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	f7f8 fb07 	bl	8001dbe <_isatty>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_isatty_r+0x1a>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_isatty_r+0x1a>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20000b60 	.word	0x20000b60

080097c0 <_sbrk_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	; (80097dc <_sbrk_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f8 fb10 	bl	8001df0 <_sbrk>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_sbrk_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_sbrk_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	20000b60 	.word	0x20000b60

080097e0 <memcpy>:
 80097e0:	440a      	add	r2, r1
 80097e2:	4291      	cmp	r1, r2
 80097e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e8:	d100      	bne.n	80097ec <memcpy+0xc>
 80097ea:	4770      	bx	lr
 80097ec:	b510      	push	{r4, lr}
 80097ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097f6:	4291      	cmp	r1, r2
 80097f8:	d1f9      	bne.n	80097ee <memcpy+0xe>
 80097fa:	bd10      	pop	{r4, pc}

080097fc <_realloc_r>:
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	4680      	mov	r8, r0
 8009802:	4614      	mov	r4, r2
 8009804:	460e      	mov	r6, r1
 8009806:	b921      	cbnz	r1, 8009812 <_realloc_r+0x16>
 8009808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800980c:	4611      	mov	r1, r2
 800980e:	f7ff b9d3 	b.w	8008bb8 <_malloc_r>
 8009812:	b92a      	cbnz	r2, 8009820 <_realloc_r+0x24>
 8009814:	f7ff f964 	bl	8008ae0 <_free_r>
 8009818:	4625      	mov	r5, r4
 800981a:	4628      	mov	r0, r5
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009820:	f000 f81b 	bl	800985a <_malloc_usable_size_r>
 8009824:	4284      	cmp	r4, r0
 8009826:	4607      	mov	r7, r0
 8009828:	d802      	bhi.n	8009830 <_realloc_r+0x34>
 800982a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800982e:	d812      	bhi.n	8009856 <_realloc_r+0x5a>
 8009830:	4621      	mov	r1, r4
 8009832:	4640      	mov	r0, r8
 8009834:	f7ff f9c0 	bl	8008bb8 <_malloc_r>
 8009838:	4605      	mov	r5, r0
 800983a:	2800      	cmp	r0, #0
 800983c:	d0ed      	beq.n	800981a <_realloc_r+0x1e>
 800983e:	42bc      	cmp	r4, r7
 8009840:	4622      	mov	r2, r4
 8009842:	4631      	mov	r1, r6
 8009844:	bf28      	it	cs
 8009846:	463a      	movcs	r2, r7
 8009848:	f7ff ffca 	bl	80097e0 <memcpy>
 800984c:	4631      	mov	r1, r6
 800984e:	4640      	mov	r0, r8
 8009850:	f7ff f946 	bl	8008ae0 <_free_r>
 8009854:	e7e1      	b.n	800981a <_realloc_r+0x1e>
 8009856:	4635      	mov	r5, r6
 8009858:	e7df      	b.n	800981a <_realloc_r+0x1e>

0800985a <_malloc_usable_size_r>:
 800985a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800985e:	1f18      	subs	r0, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	bfbc      	itt	lt
 8009864:	580b      	ldrlt	r3, [r1, r0]
 8009866:	18c0      	addlt	r0, r0, r3
 8009868:	4770      	bx	lr
	...

0800986c <_init>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	bf00      	nop
 8009870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009872:	bc08      	pop	{r3}
 8009874:	469e      	mov	lr, r3
 8009876:	4770      	bx	lr

08009878 <_fini>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr
