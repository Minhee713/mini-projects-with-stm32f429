
test_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800c894  0800c894  0001c894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9bc  0800c9bc  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9bc  0800c9bc  0001c9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c4  0800c9c4  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c4  0800c9c4  0001c9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800c9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020178  2**0
                  CONTENTS
 10 .bss          00005a74  20000178  20000178  00020178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005bec  20005bec  00020178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025f9a  00000000  00000000  000201eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005455  00000000  00000000  00046185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e08  00000000  00000000  0004b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000171d  00000000  00000000  0004d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000750c  00000000  00000000  0004eb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000248df  00000000  00000000  00056011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ef91d  00000000  00000000  0007a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000816c  00000000  00000000  0016a210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0017237c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000178 	.word	0x20000178
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c87c 	.word	0x0800c87c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000017c 	.word	0x2000017c
 80001ec:	0800c87c 	.word	0x0800c87c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fc28 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f838 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f918 	bl	800072c <MX_GPIO_Init>
  MX_ETH_Init();
 80004fc:	f000 f89e 	bl	800063c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000500:	f000 f8ea 	bl	80006d8 <MX_USART3_UART_Init>
	/* Configure LED1 and LED3 */



	/* Start scheduler */
	osKernelStart();
 8000504:	f008 fe94 	bl	8009230 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
//	for(;;);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000508:	f008 fe6e 	bl	80091e8 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <main+0x58>)
 800050e:	2100      	movs	r1, #0
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <main+0x5c>)
 8000512:	f008 feb3 	bl	800927c <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0c      	ldr	r2, [pc, #48]	; (800054c <main+0x60>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800051c:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <main+0x64>)
 800051e:	2100      	movs	r1, #0
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x68>)
 8000522:	f008 feab 	bl	800927c <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <main+0x6c>)
 800052a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800052c:	4a0b      	ldr	r2, [pc, #44]	; (800055c <main+0x70>)
 800052e:	2100      	movs	r1, #0
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x74>)
 8000532:	f008 fea3 	bl	800927c <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <main+0x78>)
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f008 fe78 	bl	8009230 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x54>
 8000542:	bf00      	nop
 8000544:	0800c914 	.word	0x0800c914
 8000548:	08000889 	.word	0x08000889
 800054c:	20000400 	.word	0x20000400
 8000550:	0800c938 	.word	0x0800c938
 8000554:	0800089d 	.word	0x0800089d
 8000558:	20000404 	.word	0x20000404
 800055c:	0800c95c 	.word	0x0800c95c
 8000560:	080008bd 	.word	0x080008bd
 8000564:	20000408 	.word	0x20000408

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f00c f896 	bl	800c6a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005dc:	23a8      	movs	r3, #168	; 0xa8
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fca3 	bl	8002f38 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f982 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ff04 	bl	8003428 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000626:	f000 f96b 	bl	8000900 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ETH_Init+0x84>)
 8000642:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <MX_ETH_Init+0x88>)
 8000644:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_ETH_Init+0x8c>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ETH_Init+0x8c>)
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_ETH_Init+0x8c>)
 8000654:	22e1      	movs	r2, #225	; 0xe1
 8000656:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ETH_Init+0x8c>)
 800065a:	2200      	movs	r2, #0
 800065c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ETH_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_ETH_Init+0x8c>)
 8000666:	2200      	movs	r2, #0
 8000668:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_ETH_Init+0x84>)
 800066c:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <MX_ETH_Init+0x8c>)
 800066e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_ETH_Init+0x84>)
 8000672:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000676:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_ETH_Init+0x84>)
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <MX_ETH_Init+0x90>)
 800067c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ETH_Init+0x84>)
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_ETH_Init+0x94>)
 8000682:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_ETH_Init+0x84>)
 8000686:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800068a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_ETH_Init+0x84>)
 800068e:	f000 fca1 	bl	8000fd4 <HAL_ETH_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000698:	f000 f932 	bl	8000900 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800069c:	2238      	movs	r2, #56	; 0x38
 800069e:	2100      	movs	r1, #0
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_ETH_Init+0x98>)
 80006a2:	f00c f801 	bl	800c6a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_ETH_Init+0x98>)
 80006a8:	2221      	movs	r2, #33	; 0x21
 80006aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_ETH_Init+0x98>)
 80006ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <MX_ETH_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000030c 	.word	0x2000030c
 80006c4:	40028000 	.word	0x40028000
 80006c8:	2000040c 	.word	0x2000040c
 80006cc:	2000026c 	.word	0x2000026c
 80006d0:	200001cc 	.word	0x200001cc
 80006d4:	20000194 	.word	0x20000194

080006d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART3_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART3_UART_Init+0x4c>)
 8000710:	f003 fb8a 	bl	8003e28 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f8f1 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200003bc 	.word	0x200003bc
 8000728:	40004800 	.word	0x40004800

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a4b      	ldr	r2, [pc, #300]	; (8000878 <MX_GPIO_Init+0x14c>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b49      	ldr	r3, [pc, #292]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b45      	ldr	r3, [pc, #276]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a44      	ldr	r2, [pc, #272]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a3d      	ldr	r2, [pc, #244]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a36      	ldr	r2, [pc, #216]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a28      	ldr	r2, [pc, #160]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f0:	4822      	ldr	r0, [pc, #136]	; (800087c <MX_GPIO_Init+0x150>)
 80007f2:	f001 f8c3 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	4821      	ldr	r0, [pc, #132]	; (8000880 <MX_GPIO_Init+0x154>)
 80007fc:	f001 f8be 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_GPIO_Init+0x158>)
 8000818:	f000 ff04 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800081c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_GPIO_Init+0x150>)
 8000836:	f000 fef5 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <MX_GPIO_Init+0x154>)
 8000852:	f000 fee7 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_GPIO_Init+0x154>)
 800086a:	f000 fedb 	bl	8001624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	3730      	adds	r7, #48	; 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400
 8000880:	40021800 	.word	0x40021800
 8000884:	40020800 	.word	0x40020800

08000888 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000890:	f00b fa24 	bl	800bcdc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f008 fd83 	bl	80093a0 <osDelay>
 800089a:	e7fb      	b.n	8000894 <StartDefaultTask+0xc>

0800089c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80008a4:	2101      	movs	r1, #1
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <StartTask02+0x1c>)
 80008a8:	f001 f881 	bl	80019ae <HAL_GPIO_TogglePin>
    osDelay(500);
 80008ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b0:	f008 fd76 	bl	80093a0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80008b4:	e7f6      	b.n	80008a4 <StartTask02+0x8>
 80008b6:	bf00      	nop
 80008b8:	40020400 	.word	0x40020400

080008bc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80008c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <StartTask03+0x1c>)
 80008ca:	f001 f870 	bl	80019ae <HAL_GPIO_TogglePin>
    osDelay(200);
 80008ce:	20c8      	movs	r0, #200	; 0xc8
 80008d0:	f008 fd66 	bl	80093a0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 80008d4:	e7f6      	b.n	80008c4 <StartTask03+0x8>
 80008d6:	bf00      	nop
 80008d8:	40020400 	.word	0x40020400

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 fa4b 	bl	8000d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40000800 	.word	0x40000800

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_MspInit+0x54>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_MspInit+0x54>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210f      	movs	r1, #15
 800094e:	f06f 0001 	mvn.w	r0, #1
 8000952:	f000 fb15 	bl	8000f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a55      	ldr	r2, [pc, #340]	; (8000ad8 <HAL_ETH_MspInit+0x174>)
 8000982:	4293      	cmp	r3, r2
 8000984:	f040 80a4 	bne.w	8000ad0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	4b53      	ldr	r3, [pc, #332]	; (8000adc <HAL_ETH_MspInit+0x178>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a52      	ldr	r2, [pc, #328]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	4b50      	ldr	r3, [pc, #320]	; (8000adc <HAL_ETH_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a0:	623b      	str	r3, [r7, #32]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a4b      	ldr	r2, [pc, #300]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
 80009b4:	4b49      	ldr	r3, [pc, #292]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	4b45      	ldr	r3, [pc, #276]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b42      	ldr	r3, [pc, #264]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a36      	ldr	r2, [pc, #216]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a4c:	2332      	movs	r3, #50	; 0x32
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <HAL_ETH_MspInit+0x17c>)
 8000a68:	f000 fddc 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a6c:	2386      	movs	r3, #134	; 0x86
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <HAL_ETH_MspInit+0x180>)
 8000a88:	f000 fdcc 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <HAL_ETH_MspInit+0x184>)
 8000aaa:	f000 fdbb 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <HAL_ETH_MspInit+0x188>)
 8000acc:	f000 fdaa 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	; 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40028000 	.word	0x40028000
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40021800 	.word	0x40021800

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x84>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12c      	bne.n	8000b6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b5c:	2307      	movs	r3, #7
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_UART_MspInit+0x8c>)
 8000b68:	f000 fd5c 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	; 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40004800 	.word	0x40004800
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <HAL_InitTick+0xe4>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a32      	ldr	r2, [pc, #200]	; (8000c64 <HAL_InitTick+0xe4>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <HAL_InitTick+0xe4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bac:	f107 0210 	add.w	r2, r7, #16
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fe56 	bl	8003868 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bc6:	f002 fe27 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8000bca:	6378      	str	r0, [r7, #52]	; 0x34
 8000bcc:	e004      	b.n	8000bd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bce:	f002 fe23 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bda:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <HAL_InitTick+0xe8>)
 8000bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000be0:	0c9b      	lsrs	r3, r3, #18
 8000be2:	3b01      	subs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_InitTick+0xec>)
 8000be8:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <HAL_InitTick+0xf0>)
 8000bea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_InitTick+0xec>)
 8000bee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_InitTick+0xec>)
 8000bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_InitTick+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_InitTick+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_InitTick+0xec>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <HAL_InitTick+0xec>)
 8000c0e:	f002 fe5d 	bl	80038cc <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d11b      	bne.n	8000c58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000c20:	4812      	ldr	r0, [pc, #72]	; (8000c6c <HAL_InitTick+0xec>)
 8000c22:	f002 fead 	bl	8003980 <HAL_TIM_Base_Start_IT>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d111      	bne.n	8000c58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c34:	201e      	movs	r0, #30
 8000c36:	f000 f9bf 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d808      	bhi.n	8000c52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	201e      	movs	r0, #30
 8000c46:	f000 f99b 	bl	8000f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_InitTick+0xf4>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e002      	b.n	8000c58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	431bde83 	.word	0x431bde83
 8000c6c:	20000414 	.word	0x20000414
 8000c70:	40000800 	.word	0x40000800
 8000c74:	20000004 	.word	0x20000004

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <TIM4_IRQHandler+0x10>)
 8000caa:	f002 fed9 	bl	8003a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000414 	.word	0x20000414

08000cb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <OTG_FS_IRQHandler+0x10>)
 8000cbe:	f000 ffe0 	bl	8001c82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20005328 	.word	0x20005328

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd7 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f00b fd21 	bl	800c764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fbe3 	bl	80004ec <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8000d34:	0800c9cc 	.word	0x0800c9cc
  ldr r2, =_sbss
 8000d38:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8000d3c:	20005bec 	.word	0x20005bec

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f8fc 	bl	8000f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	200f      	movs	r0, #15
 8000d74:	f7ff ff04 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fdc8 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	2000045c 	.word	0x2000045c

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	2000045c 	.word	0x2000045c

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <__NVIC_EnableIRQ+0x38>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff4c 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f92:	f7ff ff61 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	68b9      	ldr	r1, [r7, #8]
 8000f9c:	6978      	ldr	r0, [r7, #20]
 8000f9e:	f7ff ffb1 	bl	8000f04 <NVIC_EncodePriority>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff80 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff54 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e06c      	b.n	80010c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d106      	bne.n	8000ffe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2223      	movs	r2, #35	; 0x23
 8000ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fcb3 	bl	8000964 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_ETH_Init+0xf4>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <HAL_ETH_Init+0xf4>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <HAL_ETH_Init+0xf4>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_ETH_Init+0xf8>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001020:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001024:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4927      	ldr	r1, [pc, #156]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_ETH_Init+0xf8>)
 8001036:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800104e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001050:	f7ff feae 	bl	8000db0 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001056:	e011      	b.n	800107c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001058:	f7ff feaa 	bl	8000db0 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001066:	d909      	bls.n	800107c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	22e0      	movs	r2, #224	; 0xe0
 8001074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e021      	b.n	80010c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1e4      	bne.n	8001058 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f958 	bl	8001344 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 f9ff 	bl	8001498 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fa55 	bl	800154a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	461a      	mov	r2, r3
 80010a6:	2100      	movs	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f9bd 	bl	8001428 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2210      	movs	r2, #16
 80010ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800

080010d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4b51      	ldr	r3, [pc, #324]	; (800122c <ETH_SetMACConfig+0x15c>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	7c1b      	ldrb	r3, [r3, #16]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <ETH_SetMACConfig+0x28>
 80010f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80010f6:	e000      	b.n	80010fa <ETH_SetMACConfig+0x2a>
 80010f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	7c5b      	ldrb	r3, [r3, #17]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <ETH_SetMACConfig+0x38>
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	e000      	b.n	800110a <ETH_SetMACConfig+0x3a>
 8001108:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800110a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001110:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	7fdb      	ldrb	r3, [r3, #31]
 8001116:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001118:	431a      	orrs	r2, r3
                        macconf->Speed |
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800111e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	7f92      	ldrb	r2, [r2, #30]
 8001124:	2a00      	cmp	r2, #0
 8001126:	d102      	bne.n	800112e <ETH_SetMACConfig+0x5e>
 8001128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112c:	e000      	b.n	8001130 <ETH_SetMACConfig+0x60>
 800112e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001130:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	7f1b      	ldrb	r3, [r3, #28]
 8001136:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001138:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800113e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001146:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800114e:	2a00      	cmp	r2, #0
 8001150:	d102      	bne.n	8001158 <ETH_SetMACConfig+0x88>
 8001152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001156:	e000      	b.n	800115a <ETH_SetMACConfig+0x8a>
 8001158:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800115a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	7bdb      	ldrb	r3, [r3, #15]
 8001160:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001162:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001168:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001170:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001172:	4313      	orrs	r3, r2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff fe1c 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d101      	bne.n	80011be <ETH_SetMACConfig+0xee>
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	e000      	b.n	80011c0 <ETH_SetMACConfig+0xf0>
 80011be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80011ce:	2a01      	cmp	r2, #1
 80011d0:	d101      	bne.n	80011d6 <ETH_SetMACConfig+0x106>
 80011d2:	2208      	movs	r2, #8
 80011d4:	e000      	b.n	80011d8 <ETH_SetMACConfig+0x108>
 80011d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80011d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80011e0:	2a01      	cmp	r2, #1
 80011e2:	d101      	bne.n	80011e8 <ETH_SetMACConfig+0x118>
 80011e4:	2204      	movs	r2, #4
 80011e6:	e000      	b.n	80011ea <ETH_SetMACConfig+0x11a>
 80011e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80011ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80011f2:	2a01      	cmp	r2, #1
 80011f4:	d101      	bne.n	80011fa <ETH_SetMACConfig+0x12a>
 80011f6:	2202      	movs	r2, #2
 80011f8:	e000      	b.n	80011fc <ETH_SetMACConfig+0x12c>
 80011fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011fc:	4313      	orrs	r3, r2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001214:	2001      	movs	r0, #1
 8001216:	f7ff fdd7 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	ff20810f 	.word	0xff20810f

08001230 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <ETH_SetDMAConfig+0x110>)
 800124a:	4013      	ands	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	7b1b      	ldrb	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <ETH_SetDMAConfig+0x2c>
 8001256:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800125a:	e000      	b.n	800125e <ETH_SetDMAConfig+0x2e>
 800125c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	7b5b      	ldrb	r3, [r3, #13]
 8001262:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001264:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	7f52      	ldrb	r2, [r2, #29]
 800126a:	2a00      	cmp	r2, #0
 800126c:	d102      	bne.n	8001274 <ETH_SetDMAConfig+0x44>
 800126e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001272:	e000      	b.n	8001276 <ETH_SetDMAConfig+0x46>
 8001274:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001276:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	7b9b      	ldrb	r3, [r3, #14]
 800127c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800127e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001284:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	7f1b      	ldrb	r3, [r3, #28]
 800128a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800128c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	7f9b      	ldrb	r3, [r3, #30]
 8001292:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001294:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800129a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012a4:	4313      	orrs	r3, r2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b4:	461a      	mov	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff fd7e 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d4:	461a      	mov	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80012ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80012f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80012fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001302:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001308:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001312:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001316:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff fd4f 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	f8de3f23 	.word	0xf8de3f23

08001344 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0a6      	sub	sp, #152	; 0x98
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800134c:	2301      	movs	r3, #1
 800134e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001352:	2301      	movs	r3, #1
 8001354:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001362:	2301      	movs	r3, #1
 8001364:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800136e:	2301      	movs	r3, #1
 8001370:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001380:	2300      	movs	r3, #0
 8001382:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800138a:	2300      	movs	r3, #0
 800138c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80013a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80013ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80013b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fe86 	bl	80010d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80013f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80013fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001406:	2301      	movs	r3, #1
 8001408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800140c:	2300      	movs	r3, #0
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	4619      	mov	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff08 	bl	8001230 <ETH_SetDMAConfig>
}
 8001420:	bf00      	nop
 8001422:	3798      	adds	r7, #152	; 0x98
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3305      	adds	r3, #5
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	3204      	adds	r2, #4
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	4313      	orrs	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <ETH_MACAddressConfig+0x68>)
 800144a:	4413      	add	r3, r2
 800144c:	461a      	mov	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3303      	adds	r3, #3
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	061a      	lsls	r2, r3, #24
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3302      	adds	r3, #2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4313      	orrs	r3, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <ETH_MACAddressConfig+0x6c>)
 800147a:	4413      	add	r3, r2
 800147c:	461a      	mov	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40028040 	.word	0x40028040
 8001494:	40028044 	.word	0x40028044

08001498 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e03e      	b.n	8001524 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68d9      	ldr	r1, [r3, #12]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	3206      	adds	r2, #6
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d80c      	bhi.n	8001508 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68d9      	ldr	r1, [r3, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	461a      	mov	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	e004      	b.n	8001512 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	461a      	mov	r2, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d9bd      	bls.n	80014a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	611a      	str	r2, [r3, #16]
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e046      	b.n	80015e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6919      	ldr	r1, [r3, #16]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2200      	movs	r2, #0
 8001574:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001594:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800159c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	3212      	adds	r2, #18
 80015b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d80c      	bhi.n	80015d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6919      	ldr	r1, [r3, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	440b      	add	r3, r1
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	e004      	b.n	80015e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d9b5      	bls.n	8001558 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001616:	60da      	str	r2, [r3, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e177      	b.n	8001930 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8166 	bne.w	800192a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80c0 	beq.w	800192a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a61      	ldr	r2, [pc, #388]	; (800194c <HAL_GPIO_Init+0x328>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_GPIO_Init+0x32c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d037      	beq.n	8001862 <HAL_GPIO_Init+0x23e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a57      	ldr	r2, [pc, #348]	; (8001954 <HAL_GPIO_Init+0x330>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_GPIO_Init+0x23a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a56      	ldr	r2, [pc, #344]	; (8001958 <HAL_GPIO_Init+0x334>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d02b      	beq.n	800185a <HAL_GPIO_Init+0x236>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_GPIO_Init+0x338>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x232>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <HAL_GPIO_Init+0x33c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x22e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a53      	ldr	r2, [pc, #332]	; (8001964 <HAL_GPIO_Init+0x340>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x22a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x344>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x226>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_GPIO_Init+0x348>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x222>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_GPIO_Init+0x34c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x350>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x21a>
 800183a:	2309      	movs	r3, #9
 800183c:	e012      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800183e:	230a      	movs	r3, #10
 8001840:	e010      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001842:	2308      	movs	r3, #8
 8001844:	e00e      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001846:	2307      	movs	r3, #7
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184a:	2306      	movs	r3, #6
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x328>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae84 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40021c00 	.word	0x40021c00
 8001970:	40022000 	.word	0x40022000
 8001974:	40022400 	.word	0x40022400
 8001978:	40013c00 	.word	0x40013c00

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c0:	887a      	ldrh	r2, [r7, #2]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	041a      	lsls	r2, r3, #16
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	400b      	ands	r3, r1
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e4:	b08f      	sub	sp, #60	; 0x3c
 80019e6:	af0a      	add	r7, sp, #40	; 0x28
 80019e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e10f      	b.n	8001c14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f00a fb08 	bl	800c024 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2203      	movs	r2, #3
 8001a18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fdcf 	bl	80045d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	687e      	ldr	r6, [r7, #4]
 8001a40:	466d      	mov	r5, sp
 8001a42:	f106 0410 	add.w	r4, r6, #16
 8001a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a56:	1d33      	adds	r3, r6, #4
 8001a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a5a:	6838      	ldr	r0, [r7, #0]
 8001a5c:	f002 fca6 	bl	80043ac <USB_CoreInit>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d005      	beq.n	8001a72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0d0      	b.n	8001c14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2100      	movs	r1, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fdbd 	bl	80045f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73fb      	strb	r3, [r7, #15]
 8001a82:	e04a      	b.n	8001b1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	333d      	adds	r3, #61	; 0x3d
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a98:	7bfa      	ldrb	r2, [r7, #15]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	333c      	adds	r3, #60	; 0x3c
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	b298      	uxth	r0, r3
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	3344      	adds	r3, #68	; 0x44
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3340      	adds	r3, #64	; 0x40
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3348      	adds	r3, #72	; 0x48
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	334c      	adds	r3, #76	; 0x4c
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3354      	adds	r3, #84	; 0x54
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3301      	adds	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d3af      	bcc.n	8001a84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e044      	b.n	8001bb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3b5      	bcc.n	8001b2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	687e      	ldr	r6, [r7, #4]
 8001bc6:	466d      	mov	r5, sp
 8001bc8:	f106 0410 	add.w	r4, r6, #16
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bdc:	1d33      	adds	r3, r6, #4
 8001bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	f002 fd55 	bl	8004690 <USB_DevInit>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e00d      	b.n	8001c14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fea4 	bl	800595a <USB_DevDisconnect>

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_PCD_Start+0x1c>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e020      	b.n	8001c7a <HAL_PCD_Start+0x5e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d109      	bne.n	8001c5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d005      	beq.n	8001c5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fca7 	bl	80045b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fe54 	bl	8005918 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c82:	b590      	push	{r4, r7, lr}
 8001c84:	b08d      	sub	sp, #52	; 0x34
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 ff12 	bl	8005ac2 <USB_GetMode>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 848a 	bne.w	80025ba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fe76 	bl	800599c <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8480 	beq.w	80025b8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fe63 	bl	800599c <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d107      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f002 0202 	and.w	r2, r2, #2
 8001cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fe51 	bl	800599c <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d161      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0210 	bic.w	r2, r2, #16
 8001d12:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f003 020f 	and.w	r2, r3, #15
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	0c5b      	lsrs	r3, r3, #17
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d124      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d035      	beq.n	8001db8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	091b      	lsrs	r3, r3, #4
 8001d54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6a38      	ldr	r0, [r7, #32]
 8001d60:	f003 fc88 	bl	8005674 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d70:	441a      	add	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d82:	441a      	add	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	621a      	str	r2, [r3, #32]
 8001d88:	e016      	b.n	8001db8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	0c5b      	lsrs	r3, r3, #17
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d110      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	4619      	mov	r1, r3
 8001da0:	6a38      	ldr	r0, [r7, #32]
 8001da2:	f003 fc67 	bl	8005674 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db2:	441a      	add	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0210 	orr.w	r2, r2, #16
 8001dc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fde5 	bl	800599c <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ddc:	f040 80a7 	bne.w	8001f2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fdea 	bl	80059c2 <USB_ReadDevAllOutEpInterrupt>
 8001dee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001df0:	e099      	b.n	8001f26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 808e 	beq.w	8001f1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	4611      	mov	r1, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 fe0e 	bl	8005a2a <USB_ReadDevOutEPInterrupt>
 8001e0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00c      	beq.n	8001e34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e26:	461a      	mov	r2, r3
 8001e28:	2301      	movs	r3, #1
 8001e2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fef0 	bl	8002c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 ffc6 	bl	8002de4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2310      	movs	r3, #16
 8001e72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d030      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	2b80      	cmp	r3, #128	; 0x80
 8001e88:	d109      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	78db      	ldrb	r3, [r3, #3]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f00a f9bf 	bl	800c24c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eda:	461a      	mov	r2, r3
 8001edc:	2302      	movs	r3, #2
 8001ede:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2320      	movs	r3, #32
 8001efa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	461a      	mov	r2, r3
 8001f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f af62 	bne.w	8001df2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fd32 	bl	800599c <USB_ReadInterrupts>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f42:	f040 80db 	bne.w	80020fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fd53 	bl	80059f6 <USB_ReadDevAllInEpInterrupt>
 8001f50:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f56:	e0cd      	b.n	80020f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80c2 	beq.w	80020e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fd79 	bl	8005a66 <USB_ReadDevInEPInterrupt>
 8001f74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d057      	beq.n	8002030 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	2201      	movs	r2, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69f9      	ldr	r1, [r7, #28]
 8001f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d132      	bne.n	8002024 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	334c      	adds	r3, #76	; 0x4c
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4403      	add	r3, r0
 8001fde:	3348      	adds	r3, #72	; 0x48
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4419      	add	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4403      	add	r3, r0
 8001ff2:	334c      	adds	r3, #76	; 0x4c
 8001ff4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d113      	bne.n	8002024 <HAL_PCD_IRQHandler+0x3a2>
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3354      	adds	r3, #84	; 0x54
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800201c:	461a      	mov	r2, r3
 800201e:	2101      	movs	r1, #1
 8002020:	f003 fd80 	bl	8005b24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f00a f889 	bl	800c142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002046:	461a      	mov	r2, r3
 8002048:	2308      	movs	r3, #8
 800204a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002062:	461a      	mov	r2, r3
 8002064:	2310      	movs	r3, #16
 8002066:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d008      	beq.n	8002084 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800207e:	461a      	mov	r2, r3
 8002080:	2340      	movs	r3, #64	; 0x40
 8002082:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d023      	beq.n	80020d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800208e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002090:	6a38      	ldr	r0, [r7, #32]
 8002092:	f002 fc61 	bl	8004958 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	3338      	adds	r3, #56	; 0x38
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	3304      	adds	r3, #4
 80020a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	78db      	ldrb	r3, [r3, #3]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f00a f8d6 	bl	800c270 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d0:	461a      	mov	r2, r3
 80020d2:	2302      	movs	r3, #2
 80020d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fd08 	bl	8002af8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	3301      	adds	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f47f af2e 	bne.w	8001f58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fc4b 	bl	800599c <USB_ReadInterrupts>
 8002106:	4603      	mov	r3, r0
 8002108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800210c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002110:	d122      	bne.n	8002158 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800212c:	2b01      	cmp	r3, #1
 800212e:	d108      	bne.n	8002142 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002138:	2100      	movs	r1, #0
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fef0 	bl	8002f20 <HAL_PCDEx_LPM_Callback>
 8002140:	e002      	b.n	8002148 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f00a f874 	bl	800c230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fc1d 	bl	800599c <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800216c:	d112      	bne.n	8002194 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d102      	bne.n	8002184 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f00a f830 	bl	800c1e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002192:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fbff 	bl	800599c <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a8:	f040 80b7 	bne.w	800231a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2110      	movs	r1, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fbc6 	bl	8004958 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d0:	e046      	b.n	8002260 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021de:	461a      	mov	r2, r3
 80021e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f6:	0151      	lsls	r1, r2, #5
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	440a      	add	r2, r1
 80021fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002204:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	4413      	add	r3, r2
 800220e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002212:	461a      	mov	r2, r3
 8002214:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002218:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222a:	0151      	lsls	r1, r2, #5
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	440a      	add	r2, r1
 8002230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002234:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002238:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224a:	0151      	lsls	r1, r2, #5
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	440a      	add	r2, r1
 8002250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002254:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002258:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	3301      	adds	r3, #1
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002266:	429a      	cmp	r2, r3
 8002268:	d3b3      	bcc.n	80021d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002278:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800227c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	2b00      	cmp	r3, #0
 8002284:	d016      	beq.n	80022b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002296:	f043 030b 	orr.w	r3, r3, #11
 800229a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ac:	f043 030b 	orr.w	r3, r3, #11
 80022b0:	6453      	str	r3, [r2, #68]	; 0x44
 80022b2:	e015      	b.n	80022e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022da:	f043 030b 	orr.w	r3, r3, #11
 80022de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002304:	461a      	mov	r2, r3
 8002306:	f003 fc0d 	bl	8005b24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fb3c 	bl	800599c <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232e:	d124      	bne.n	800237a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fbd2 	bl	8005ade <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fb87 	bl	8004a52 <USB_GetDevSpeed>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681c      	ldr	r4, [r3, #0]
 8002350:	f001 fa56 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8002354:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4620      	mov	r0, r4
 8002360:	f002 f886 	bl	8004470 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f009 ff14 	bl	800c192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002378:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fb0c 	bl	800599c <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b08      	cmp	r3, #8
 800238c:	d10a      	bne.n	80023a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f009 fef1 	bl	800c176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f002 0208 	and.w	r2, r2, #8
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 faf7 	bl	800599c <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d122      	bne.n	80023fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c4:	2301      	movs	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
 80023c8:	e014      	b.n	80023f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fb27 	bl	8002a3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	3301      	adds	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3e5      	bcc.n	80023ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f003 faca 	bl	800599c <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002412:	d13b      	bne.n	800248c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002414:	2301      	movs	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
 8002418:	e02b      	b.n	8002472 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3340      	adds	r3, #64	; 0x40
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d115      	bne.n	800246c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002440:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002442:	2b00      	cmp	r3, #0
 8002444:	da12      	bge.n	800246c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	333f      	adds	r3, #63	; 0x3f
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fae8 	bl	8002a3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3301      	adds	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	429a      	cmp	r2, r3
 800247a:	d3ce      	bcc.n	800241a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800248a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fa83 	bl	800599c <USB_ReadInterrupts>
 8002496:	4603      	mov	r3, r0
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024a0:	d155      	bne.n	800254e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a2:	2301      	movs	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	e045      	b.n	8002534 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d12e      	bne.n	800252e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	da2b      	bge.n	800252e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80024e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d121      	bne.n	800252e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800252a:	6053      	str	r3, [r2, #4]
            break;
 800252c:	e007      	b.n	800253e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	429a      	cmp	r2, r3
 800253c:	d3b4      	bcc.n	80024a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800254c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fa22 	bl	800599c <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d10a      	bne.n	800257a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f009 fe95 	bl	800c294 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fa0c 	bl	800599c <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b04      	cmp	r3, #4
 800258c:	d115      	bne.n	80025ba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f009 fe85 	bl	800c2b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	e000      	b.n	80025ba <HAL_PCD_IRQHandler+0x938>
      return;
 80025b8:	bf00      	nop
    }
  }
}
 80025ba:	3734      	adds	r7, #52	; 0x34
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_PCD_SetAddress+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e013      	b.n	8002602 <HAL_PCD_SetAddress+0x42>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 f96a 	bl	80058cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	4608      	mov	r0, r1
 8002614:	4611      	mov	r1, r2
 8002616:	461a      	mov	r2, r3
 8002618:	4603      	mov	r3, r0
 800261a:	70fb      	strb	r3, [r7, #3]
 800261c:	460b      	mov	r3, r1
 800261e:	803b      	strh	r3, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800262c:	2b00      	cmp	r3, #0
 800262e:	da0f      	bge.n	8002650 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 020f 	and.w	r2, r3, #15
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	3338      	adds	r3, #56	; 0x38
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	705a      	strb	r2, [r3, #1]
 800264e:	e00f      	b.n	8002670 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	f003 020f 	and.w	r2, r3, #15
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800267c:	883a      	ldrh	r2, [r7, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	78ba      	ldrb	r2, [r7, #2]
 8002686:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800269a:	78bb      	ldrb	r3, [r7, #2]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d102      	bne.n	80026a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_PCD_EP_Open+0xaa>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e00e      	b.n	80026d2 <HAL_PCD_EP_Open+0xc8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 f9ea 	bl	8004a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80026d0:	7afb      	ldrb	r3, [r7, #11]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	da0f      	bge.n	800270e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	f003 020f 	and.w	r2, r3, #15
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	3338      	adds	r3, #56	; 0x38
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	4413      	add	r3, r2
 8002702:	3304      	adds	r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2201      	movs	r2, #1
 800270a:	705a      	strb	r2, [r3, #1]
 800270c:	e00f      	b.n	800272e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_PCD_EP_Close+0x6e>
 8002744:	2302      	movs	r3, #2
 8002746:	e00e      	b.n	8002766 <HAL_PCD_EP_Close+0x8c>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fa28 	bl	8004bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b086      	sub	sp, #24
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	460b      	mov	r3, r1
 800277c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800277e:	7afb      	ldrb	r3, [r7, #11]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2200      	movs	r2, #0
 80027a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b0:	7afb      	ldrb	r3, [r7, #11]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d102      	bne.n	80027ca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	6979      	ldr	r1, [r7, #20]
 80027e2:	f002 fd07 	bl	80051f4 <USB_EP0StartXfer>
 80027e6:	e008      	b.n	80027fa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	6979      	ldr	r1, [r7, #20]
 80027f6:	f002 fab5 	bl	8004d64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	f003 020f 	and.w	r2, r3, #15
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	460b      	mov	r3, r1
 8002842:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	f003 020f 	and.w	r2, r3, #15
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	3338      	adds	r3, #56	; 0x38
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	3304      	adds	r3, #4
 800285a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2200      	movs	r2, #0
 800286c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2201      	movs	r2, #1
 8002872:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002874:	7afb      	ldrb	r3, [r7, #11]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2da      	uxtb	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800288e:	7afb      	ldrb	r3, [r7, #11]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	f002 fca5 	bl	80051f4 <USB_EP0StartXfer>
 80028aa:	e008      	b.n	80028be <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6979      	ldr	r1, [r7, #20]
 80028ba:	f002 fa53 	bl	8004d64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 020f 	and.w	r2, r3, #15
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d901      	bls.n	80028e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e050      	b.n	8002988 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da0f      	bge.n	800290e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	3338      	adds	r3, #56	; 0x38
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	705a      	strb	r2, [r3, #1]
 800290c:	e00d      	b.n	800292a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	3304      	adds	r3, #4
 8002922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_PCD_EP_SetStall+0x82>
 8002946:	2302      	movs	r3, #2
 8002948:	e01e      	b.n	8002988 <HAL_PCD_EP_SetStall+0xc0>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	4618      	mov	r0, r3
 800295a:	f002 fee3 	bl	8005724 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	b2d9      	uxtb	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002978:	461a      	mov	r2, r3
 800297a:	f003 f8d3 	bl	8005b24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d901      	bls.n	80029ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e042      	b.n	8002a34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da0f      	bge.n	80029d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2201      	movs	r2, #1
 80029d2:	705a      	strb	r2, [r3, #1]
 80029d4:	e00f      	b.n	80029f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 020f 	and.w	r2, r3, #15
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_EP_ClrStall+0x86>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e00e      	b.n	8002a34 <HAL_PCD_EP_ClrStall+0xa4>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 feeb 	bl	8005800 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da0c      	bge.n	8002a6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	3338      	adds	r3, #56	; 0x38
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4413      	add	r3, r2
 8002a64:	3304      	adds	r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e00c      	b.n	8002a84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	3304      	adds	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fd0a 	bl	80054a4 <USB_EPStopXfer>
 8002a90:	4603      	mov	r3, r0
 8002a92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a94:	7afb      	ldrb	r3, [r7, #11]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_EP_Flush+0x1a>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e01b      	b.n	8002af0 <HAL_PCD_EP_Flush+0x52>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8002ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	da09      	bge.n	8002adc <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f001 ff3f 	bl	8004958 <USB_FlushTxFifo>
 8002ada:	e004      	b.n	8002ae6 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 ff6d 	bl	80049c0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3338      	adds	r3, #56	; 0x38
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d901      	bls.n	8002b30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e06c      	b.n	8002c0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d902      	bls.n	8002b4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	3303      	adds	r3, #3
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b54:	e02b      	b.n	8002bae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d902      	bls.n	8002b72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3303      	adds	r3, #3
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6919      	ldr	r1, [r3, #16]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6978      	ldr	r0, [r7, #20]
 8002b92:	f002 fd31 	bl	80055f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	441a      	add	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d809      	bhi.n	8002bd8 <PCD_WriteEmptyTxFifo+0xe0>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a1a      	ldr	r2, [r3, #32]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d203      	bcs.n	8002bd8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1be      	bne.n	8002b56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	699a      	ldr	r2, [r3, #24]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d811      	bhi.n	8002c08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	2201      	movs	r2, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	6939      	ldr	r1, [r7, #16]
 8002c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c04:	4013      	ands	r3, r2
 8002c06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	333c      	adds	r3, #60	; 0x3c
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d17b      	bne.n	8002d42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4a61      	ldr	r2, [pc, #388]	; (8002ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	f240 80b9 	bls.w	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80b3 	beq.w	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c7c:	6093      	str	r3, [r2, #8]
 8002c7e:	e0a7      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c96:	461a      	mov	r2, r3
 8002c98:	2320      	movs	r3, #32
 8002c9a:	6093      	str	r3, [r2, #8]
 8002c9c:	e098      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 8093 	bne.w	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4a4b      	ldr	r2, [pc, #300]	; (8002ddc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d90f      	bls.n	8002cd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cce:	6093      	str	r3, [r2, #8]
 8002cd0:	e07e      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	0159      	lsls	r1, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	1ad2      	subs	r2, r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2101      	movs	r1, #1
 8002d20:	f002 ff00 	bl	8005b24 <USB_EP0_OutStart>
 8002d24:	e006      	b.n	8002d34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	441a      	add	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	4619      	mov	r1, r3
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f009 f9e6 	bl	800c10c <HAL_PCD_DataOutStageCallback>
 8002d40:	e046      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	4a26      	ldr	r2, [pc, #152]	; (8002de0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d124      	bne.n	8002d94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d60:	461a      	mov	r2, r3
 8002d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d66:	6093      	str	r3, [r2, #8]
 8002d68:	e032      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	2320      	movs	r3, #32
 8002d84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f009 f9bd 	bl	800c10c <HAL_PCD_DataOutStageCallback>
 8002d92:	e01d      	b.n	8002dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d114      	bne.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	f002 feb0 	bl	8005b24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f009 f99e 	bl	800c10c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	4f54300a 	.word	0x4f54300a
 8002de0:	4f54310a 	.word	0x4f54310a

08002de4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	333c      	adds	r3, #60	; 0x3c
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d90e      	bls.n	8002e38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f009 f955 	bl	800c0e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d90c      	bls.n	8002e60 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d108      	bne.n	8002e60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	f002 fe62 	bl	8005b24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	4f54300a 	.word	0x4f54300a

08002e70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e8e:	883b      	ldrh	r3, [r7, #0]
 8002e90:	0419      	lsls	r1, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9c:	e028      	b.n	8002ef0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	e00d      	b.n	8002ece <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3ec      	bcc.n	8002eb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ed8:	883b      	ldrh	r3, [r7, #0]
 8002eda:	0418      	lsls	r0, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	4302      	orrs	r2, r0
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e267      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d075      	beq.n	8003042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b85      	ldr	r3, [pc, #532]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d112      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4b7e      	ldr	r3, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05b      	beq.n	8003040 <HAL_RCC_OscConfig+0x108>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d157      	bne.n	8003040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e242      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x74>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x98>
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6f      	ldr	r2, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xb0>
 8002fd0:	4b69      	ldr	r3, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a68      	ldr	r2, [pc, #416]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b66      	ldr	r3, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a65      	ldr	r2, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fede 	bl	8000db0 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fd feda 	bl	8000db0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e207      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xc0>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fd feca 	bl	8000db0 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7fd fec6 	bl	8000db0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1f3      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b51      	ldr	r3, [pc, #324]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0xe8>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1c7      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4937      	ldr	r1, [pc, #220]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b34      	ldr	r3, [pc, #208]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fd fe7f 	bl	8000db0 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b6:	f7fd fe7b 	bl	8000db0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1a8      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4925      	ldr	r1, [pc, #148]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x244>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fd fe5e 	bl	8000db0 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fd fe5a 	bl	8000db0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e187      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d036      	beq.n	8003190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003130:	f7fd fe3e 	bl	8000db0 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003138:	f7fd fe3a 	bl	8000db0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e167      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x240>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x200>
 8003156:	e01b      	b.n	8003190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x248>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fd fe27 	bl	8000db0 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	e00e      	b.n	8003184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003166:	f7fd fe23 	bl	8000db0 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d907      	bls.n	8003184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e150      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	42470000 	.word	0x42470000
 8003180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ea      	bne.n	8003166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8097 	beq.w	80032cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a2:	4b81      	ldr	r3, [pc, #516]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10f      	bne.n	80031ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	4b7d      	ldr	r3, [pc, #500]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	4a7c      	ldr	r2, [pc, #496]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031bc:	6413      	str	r3, [r2, #64]	; 0x40
 80031be:	4b7a      	ldr	r3, [pc, #488]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b77      	ldr	r3, [pc, #476]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031da:	4b74      	ldr	r3, [pc, #464]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a73      	ldr	r2, [pc, #460]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 80031e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e6:	f7fd fde3 	bl	8000db0 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fd fddf 	bl	8000db0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e10c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_OscConfig+0x474>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x2ea>
 8003214:	4b64      	ldr	r3, [pc, #400]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a63      	ldr	r2, [pc, #396]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e01c      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b05      	cmp	r3, #5
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x30c>
 800322a:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a5e      	ldr	r2, [pc, #376]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b5c      	ldr	r3, [pc, #368]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a5b      	ldr	r2, [pc, #364]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0x324>
 8003244:	4b58      	ldr	r3, [pc, #352]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a54      	ldr	r2, [pc, #336]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003256:	f023 0304 	bic.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d015      	beq.n	8003290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fd fda4 	bl	8000db0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fd fda0 	bl	8000db0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	; 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0cb      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	4b49      	ldr	r3, [pc, #292]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0ee      	beq.n	800326c <HAL_RCC_OscConfig+0x334>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fd fd8e 	bl	8000db0 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003296:	e00a      	b.n	80032ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fd fd8a 	bl	8000db0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0b5      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1ee      	bne.n	8003298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d105      	bne.n	80032cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4a38      	ldr	r2, [pc, #224]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a1 	beq.w	8003418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d05c      	beq.n	800339c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d141      	bne.n	800336e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b31      	ldr	r3, [pc, #196]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fd fd5e 	bl	8000db0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fd fd5a 	bl	8000db0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e087      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	019b      	lsls	r3, r3, #6
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	3b01      	subs	r3, #1
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	491b      	ldr	r1, [pc, #108]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fd fd33 	bl	8000db0 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334e:	f7fd fd2f 	bl	8000db0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e05c      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x416>
 800336c:	e054      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <HAL_RCC_OscConfig+0x478>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fd fd1c 	bl	8000db0 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fd fd18 	bl	8000db0 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e045      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x470>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x444>
 800339a:	e03d      	b.n	8003418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e038      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40007000 	.word	0x40007000
 80033b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x4ec>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d028      	beq.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d121      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d11a      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d111      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	3b01      	subs	r3, #1
 80033fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d107      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0cc      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800343c:	4b68      	ldr	r3, [pc, #416]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d90c      	bls.n	8003464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b8      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d020      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800347c:	4b59      	ldr	r3, [pc, #356]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4a58      	ldr	r2, [pc, #352]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	494d      	ldr	r1, [pc, #308]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d044      	beq.n	8003548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d119      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e06f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e067      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b37      	ldr	r3, [pc, #220]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4934      	ldr	r1, [pc, #208]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003518:	f7fd fc4a 	bl	8000db0 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fd fc46 	bl	8000db0 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e04f      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d20c      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e032      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4916      	ldr	r1, [pc, #88]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	490e      	ldr	r1, [pc, #56]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ae:	f000 f821 	bl	80035f4 <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fad6 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00
 80035e4:	40023800 	.word	0x40023800
 80035e8:	0800c980 	.word	0x0800c980
 80035ec:	20000000 	.word	0x20000000
 80035f0:	20000004 	.word	0x20000004

080035f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f8:	b094      	sub	sp, #80	; 0x50
 80035fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003600:	2300      	movs	r3, #0
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	2300      	movs	r3, #0
 8003606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360c:	4b79      	ldr	r3, [pc, #484]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d00d      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x40>
 8003618:	2b08      	cmp	r3, #8
 800361a:	f200 80e1 	bhi.w	80037e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x34>
 8003622:	2b04      	cmp	r3, #4
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x3a>
 8003626:	e0db      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800362c:	e0db      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362e:	4b73      	ldr	r3, [pc, #460]	; (80037fc <HAL_RCC_GetSysClockFreq+0x208>)
 8003630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003632:	e0d8      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b6f      	ldr	r3, [pc, #444]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363e:	4b6d      	ldr	r3, [pc, #436]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364a:	4b6a      	ldr	r3, [pc, #424]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2200      	movs	r2, #0
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
 8003654:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
 8003662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003666:	4622      	mov	r2, r4
 8003668:	462b      	mov	r3, r5
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	0159      	lsls	r1, r3, #5
 8003674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003678:	0150      	lsls	r0, r2, #5
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4621      	mov	r1, r4
 8003680:	1a51      	subs	r1, r2, r1
 8003682:	6139      	str	r1, [r7, #16]
 8003684:	4629      	mov	r1, r5
 8003686:	eb63 0301 	sbc.w	r3, r3, r1
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003698:	4659      	mov	r1, fp
 800369a:	018b      	lsls	r3, r1, #6
 800369c:	4651      	mov	r1, sl
 800369e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a2:	4651      	mov	r1, sl
 80036a4:	018a      	lsls	r2, r1, #6
 80036a6:	4651      	mov	r1, sl
 80036a8:	ebb2 0801 	subs.w	r8, r2, r1
 80036ac:	4659      	mov	r1, fp
 80036ae:	eb63 0901 	sbc.w	r9, r3, r1
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c6:	4690      	mov	r8, r2
 80036c8:	4699      	mov	r9, r3
 80036ca:	4623      	mov	r3, r4
 80036cc:	eb18 0303 	adds.w	r3, r8, r3
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	462b      	mov	r3, r5
 80036d4:	eb49 0303 	adc.w	r3, r9, r3
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e6:	4629      	mov	r1, r5
 80036e8:	024b      	lsls	r3, r1, #9
 80036ea:	4621      	mov	r1, r4
 80036ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f0:	4621      	mov	r1, r4
 80036f2:	024a      	lsls	r2, r1, #9
 80036f4:	4610      	mov	r0, r2
 80036f6:	4619      	mov	r1, r3
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	2200      	movs	r2, #0
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003704:	f7fc fd74 	bl	80001f0 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4613      	mov	r3, r2
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003710:	e058      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	2200      	movs	r2, #0
 800371a:	4618      	mov	r0, r3
 800371c:	4611      	mov	r1, r2
 800371e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	2300      	movs	r3, #0
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
 8003728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800372c:	4642      	mov	r2, r8
 800372e:	464b      	mov	r3, r9
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	0159      	lsls	r1, r3, #5
 800373a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373e:	0150      	lsls	r0, r2, #5
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4641      	mov	r1, r8
 8003746:	ebb2 0a01 	subs.w	sl, r2, r1
 800374a:	4649      	mov	r1, r9
 800374c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800375c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003764:	ebb2 040a 	subs.w	r4, r2, sl
 8003768:	eb63 050b 	sbc.w	r5, r3, fp
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	00eb      	lsls	r3, r5, #3
 8003776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377a:	00e2      	lsls	r2, r4, #3
 800377c:	4614      	mov	r4, r2
 800377e:	461d      	mov	r5, r3
 8003780:	4643      	mov	r3, r8
 8003782:	18e3      	adds	r3, r4, r3
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	464b      	mov	r3, r9
 8003788:	eb45 0303 	adc.w	r3, r5, r3
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379a:	4629      	mov	r1, r5
 800379c:	028b      	lsls	r3, r1, #10
 800379e:	4621      	mov	r1, r4
 80037a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a4:	4621      	mov	r1, r4
 80037a6:	028a      	lsls	r2, r1, #10
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	61fa      	str	r2, [r7, #28]
 80037b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b8:	f7fc fd1a 	bl	80001f0 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	3301      	adds	r3, #1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037de:	e002      	b.n	80037e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3750      	adds	r7, #80	; 0x50
 80037ec:	46bd      	mov	sp, r7
 80037ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	0800c990 	.word	0x0800c990

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003844:	f7ff ffdc 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0b5b      	lsrs	r3, r3, #13
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	0800c990 	.word	0x0800c990

08003868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	220f      	movs	r2, #15
 8003876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0203 	and.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_GetClockConfig+0x5c>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	08db      	lsrs	r3, r3, #3
 80038a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <HAL_RCC_GetClockConfig+0x60>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 020f 	and.w	r2, r3, #15
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40023c00 	.word	0x40023c00

080038cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e041      	b.n	8003962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f839 	bl	800396a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 f9d8 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	d001      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e04e      	b.n	8003a36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a23      	ldr	r2, [pc, #140]	; (8003a44 <HAL_TIM_Base_Start_IT+0xc4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d022      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d01d      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_TIM_Base_Start_IT+0xc8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d018      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <HAL_TIM_Base_Start_IT+0xcc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x80>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d111      	bne.n	8003a24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d010      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a22:	e007      	b.n	8003a34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40010000 	.word	0x40010000
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40000c00 	.word	0x40000c00
 8003a54:	40010400 	.word	0x40010400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40001800 	.word	0x40001800

08003a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d122      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d11b      	bne.n	8003abc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0202 	mvn.w	r2, #2
 8003a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8ee 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8e0 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f8f1 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d122      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11b      	bne.n	8003b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0204 	mvn.w	r2, #4
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8c4 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8b6 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8c7 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d122      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d11b      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0208 	mvn.w	r2, #8
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2204      	movs	r2, #4
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f89a 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f88c 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f89d 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d122      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0210 	mvn.w	r2, #16
 8003b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f870 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f862 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f873 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10e      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0201 	mvn.w	r2, #1
 8003bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fc fe7c 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d10e      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d107      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f902 	bl	8003e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f838 	bl	8003cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0220 	mvn.w	r2, #32
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8cc 	bl	8003e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a40      	ldr	r2, [pc, #256]	; (8003dd4 <TIM_Base_SetConfig+0x114>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d00f      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3d      	ldr	r2, [pc, #244]	; (8003dd8 <TIM_Base_SetConfig+0x118>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <TIM_Base_SetConfig+0x11c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3b      	ldr	r2, [pc, #236]	; (8003de0 <TIM_Base_SetConfig+0x120>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <TIM_Base_SetConfig+0x124>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2f      	ldr	r2, [pc, #188]	; (8003dd4 <TIM_Base_SetConfig+0x114>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d20:	d027      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <TIM_Base_SetConfig+0x118>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d023      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2b      	ldr	r2, [pc, #172]	; (8003ddc <TIM_Base_SetConfig+0x11c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2a      	ldr	r2, [pc, #168]	; (8003de0 <TIM_Base_SetConfig+0x120>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <TIM_Base_SetConfig+0x124>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d017      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <TIM_Base_SetConfig+0x128>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <TIM_Base_SetConfig+0x12c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <TIM_Base_SetConfig+0x130>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <TIM_Base_SetConfig+0x134>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <TIM_Base_SetConfig+0x138>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a23      	ldr	r2, [pc, #140]	; (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <TIM_Base_SetConfig+0x114>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0xf8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <TIM_Base_SetConfig+0x124>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	615a      	str	r2, [r3, #20]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400
 8003df0:	40014800 	.word	0x40014800
 8003df4:	40001800 	.word	0x40001800
 8003df8:	40001c00 	.word	0x40001c00
 8003dfc:	40002000 	.word	0x40002000

08003e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e03f      	b.n	8003eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fc fe4e 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f829 	bl	8003ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec8:	b0c0      	sub	sp, #256	; 0x100
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	ea40 0301 	orr.w	r3, r0, r1
 8003eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f1c:	f021 010c 	bic.w	r1, r1, #12
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	6999      	ldr	r1, [r3, #24]
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	ea40 0301 	orr.w	r3, r0, r1
 8003f4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b8f      	ldr	r3, [pc, #572]	; (8004190 <UART_SetConfig+0x2cc>)
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d005      	beq.n	8003f64 <UART_SetConfig+0xa0>
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b8d      	ldr	r3, [pc, #564]	; (8004194 <UART_SetConfig+0x2d0>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d104      	bne.n	8003f6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7ff fc6c 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8003f68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f6c:	e003      	b.n	8003f76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6e:	f7ff fc53 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8003f72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f80:	f040 810c 	bne.w	800419c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	1891      	adds	r1, r2, r2
 8003f9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f9e:	415b      	adcs	r3, r3
 8003fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	eb12 0801 	adds.w	r8, r2, r1
 8003fac:	4629      	mov	r1, r5
 8003fae:	eb43 0901 	adc.w	r9, r3, r1
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc6:	4690      	mov	r8, r2
 8003fc8:	4699      	mov	r9, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	eb18 0303 	adds.w	r3, r8, r3
 8003fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	eb49 0303 	adc.w	r3, r9, r3
 8003fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	18db      	adds	r3, r3, r3
 8003ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	eb42 0303 	adc.w	r3, r2, r3
 8003ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8004000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004008:	f7fc f8f2 	bl	80001f0 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <UART_SetConfig+0x2d4>)
 8004012:	fba3 2302 	umull	r2, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	011c      	lsls	r4, r3, #4
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004024:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	1891      	adds	r1, r2, r2
 8004032:	64b9      	str	r1, [r7, #72]	; 0x48
 8004034:	415b      	adcs	r3, r3
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800403c:	4641      	mov	r1, r8
 800403e:	eb12 0a01 	adds.w	sl, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0b01 	adc.w	fp, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800405c:	4692      	mov	sl, r2
 800405e:	469b      	mov	fp, r3
 8004060:	4643      	mov	r3, r8
 8004062:	eb1a 0303 	adds.w	r3, sl, r3
 8004066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800406a:	464b      	mov	r3, r9
 800406c:	eb4b 0303 	adc.w	r3, fp, r3
 8004070:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004080:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004088:	460b      	mov	r3, r1
 800408a:	18db      	adds	r3, r3, r3
 800408c:	643b      	str	r3, [r7, #64]	; 0x40
 800408e:	4613      	mov	r3, r2
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	647b      	str	r3, [r7, #68]	; 0x44
 8004096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800409a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800409e:	f7fc f8a7 	bl	80001f0 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <UART_SetConfig+0x2d4>)
 80040aa:	fba3 2301 	umull	r2, r3, r3, r1
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2264      	movs	r2, #100	; 0x64
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	1acb      	subs	r3, r1, r3
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <UART_SetConfig+0x2d4>)
 80040c0:	fba3 2302 	umull	r2, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040cc:	441c      	add	r4, r3
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	1891      	adds	r1, r2, r2
 80040e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040e8:	415b      	adcs	r3, r3
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040f0:	4641      	mov	r1, r8
 80040f2:	1851      	adds	r1, r2, r1
 80040f4:	6339      	str	r1, [r7, #48]	; 0x30
 80040f6:	4649      	mov	r1, r9
 80040f8:	414b      	adcs	r3, r1
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004108:	4659      	mov	r1, fp
 800410a:	00cb      	lsls	r3, r1, #3
 800410c:	4651      	mov	r1, sl
 800410e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004112:	4651      	mov	r1, sl
 8004114:	00ca      	lsls	r2, r1, #3
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	4603      	mov	r3, r0
 800411c:	4642      	mov	r2, r8
 800411e:	189b      	adds	r3, r3, r2
 8004120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004124:	464b      	mov	r3, r9
 8004126:	460a      	mov	r2, r1
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800413c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004144:	460b      	mov	r3, r1
 8004146:	18db      	adds	r3, r3, r3
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
 800414a:	4613      	mov	r3, r2
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800415a:	f7fc f849 	bl	80001f0 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <UART_SetConfig+0x2d4>)
 8004164:	fba3 1302 	umull	r1, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2164      	movs	r1, #100	; 0x64
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	3332      	adds	r3, #50	; 0x32
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <UART_SetConfig+0x2d4>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	f003 0207 	and.w	r2, r3, #7
 8004182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4422      	add	r2, r4
 800418a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800418c:	e106      	b.n	800439c <UART_SetConfig+0x4d8>
 800418e:	bf00      	nop
 8004190:	40011000 	.word	0x40011000
 8004194:	40011400 	.word	0x40011400
 8004198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800419c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ae:	4642      	mov	r2, r8
 80041b0:	464b      	mov	r3, r9
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	6239      	str	r1, [r7, #32]
 80041b6:	415b      	adcs	r3, r3
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041be:	4641      	mov	r1, r8
 80041c0:	1854      	adds	r4, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0501 	adc.w	r5, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	00eb      	lsls	r3, r5, #3
 80041d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d6:	00e2      	lsls	r2, r4, #3
 80041d8:	4614      	mov	r4, r2
 80041da:	461d      	mov	r5, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e4:	464b      	mov	r3, r9
 80041e6:	eb45 0303 	adc.w	r3, r5, r3
 80041ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800420a:	4629      	mov	r1, r5
 800420c:	008b      	lsls	r3, r1, #2
 800420e:	4621      	mov	r1, r4
 8004210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004214:	4621      	mov	r1, r4
 8004216:	008a      	lsls	r2, r1, #2
 8004218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800421c:	f7fb ffe8 	bl	80001f0 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b60      	ldr	r3, [pc, #384]	; (80043a8 <UART_SetConfig+0x4e4>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011c      	lsls	r4, r3, #4
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004238:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800423c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	61b9      	str	r1, [r7, #24]
 8004248:	415b      	adcs	r3, r3
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004250:	4641      	mov	r1, r8
 8004252:	1851      	adds	r1, r2, r1
 8004254:	6139      	str	r1, [r7, #16]
 8004256:	4649      	mov	r1, r9
 8004258:	414b      	adcs	r3, r1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004268:	4659      	mov	r1, fp
 800426a:	00cb      	lsls	r3, r1, #3
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004272:	4651      	mov	r1, sl
 8004274:	00ca      	lsls	r2, r1, #3
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	4603      	mov	r3, r0
 800427c:	4642      	mov	r2, r8
 800427e:	189b      	adds	r3, r3, r2
 8004280:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004284:	464b      	mov	r3, r9
 8004286:	460a      	mov	r2, r1
 8004288:	eb42 0303 	adc.w	r3, r2, r3
 800428c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	67bb      	str	r3, [r7, #120]	; 0x78
 800429a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042a8:	4649      	mov	r1, r9
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	4641      	mov	r1, r8
 80042ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b2:	4641      	mov	r1, r8
 80042b4:	008a      	lsls	r2, r1, #2
 80042b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ba:	f7fb ff99 	bl	80001f0 <__aeabi_uldivmod>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <UART_SetConfig+0x4e4>)
 80042c6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2264      	movs	r2, #100	; 0x64
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	1acb      	subs	r3, r1, r3
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	3332      	adds	r3, #50	; 0x32
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <UART_SetConfig+0x4e4>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e4:	441c      	add	r4, r3
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	673b      	str	r3, [r7, #112]	; 0x70
 80042ee:	677a      	str	r2, [r7, #116]	; 0x74
 80042f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	415b      	adcs	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004304:	4641      	mov	r1, r8
 8004306:	1851      	adds	r1, r2, r1
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	4649      	mov	r1, r9
 800430c:	414b      	adcs	r3, r1
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800431c:	4659      	mov	r1, fp
 800431e:	00cb      	lsls	r3, r1, #3
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004326:	4651      	mov	r1, sl
 8004328:	00ca      	lsls	r2, r1, #3
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4603      	mov	r3, r0
 8004330:	4642      	mov	r2, r8
 8004332:	189b      	adds	r3, r3, r2
 8004334:	66bb      	str	r3, [r7, #104]	; 0x68
 8004336:	464b      	mov	r3, r9
 8004338:	460a      	mov	r2, r1
 800433a:	eb42 0303 	adc.w	r3, r2, r3
 800433e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	663b      	str	r3, [r7, #96]	; 0x60
 800434a:	667a      	str	r2, [r7, #100]	; 0x64
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004358:	4649      	mov	r1, r9
 800435a:	008b      	lsls	r3, r1, #2
 800435c:	4641      	mov	r1, r8
 800435e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004362:	4641      	mov	r1, r8
 8004364:	008a      	lsls	r2, r1, #2
 8004366:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800436a:	f7fb ff41 	bl	80001f0 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <UART_SetConfig+0x4e4>)
 8004374:	fba3 1302 	umull	r1, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2164      	movs	r1, #100	; 0x64
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	3332      	adds	r3, #50	; 0x32
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <UART_SetConfig+0x4e4>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4422      	add	r2, r4
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043a2:	46bd      	mov	sp, r7
 80043a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a8:	51eb851f 	.word	0x51eb851f

080043ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043ac:	b084      	sub	sp, #16
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	f107 001c 	add.w	r0, r7, #28
 80043ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d122      	bne.n	800440a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 fbee 	bl	8005be0 <USB_CoreReset>
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e01a      	b.n	8004440 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 fbe2 	bl	8005be0 <USB_CoreReset>
 800441c:	4603      	mov	r3, r0
 800441e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
 8004432:	e005      	b.n	8004440 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10b      	bne.n	800445e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f043 0206 	orr.w	r2, r3, #6
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800446a:	b004      	add	sp, #16
 800446c:	4770      	bx	lr
	...

08004470 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4613      	mov	r3, r2
 800447c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d165      	bne.n	8004550 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4a41      	ldr	r2, [pc, #260]	; (800458c <USB_SetTurnaroundTime+0x11c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d906      	bls.n	800449a <USB_SetTurnaroundTime+0x2a>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4a40      	ldr	r2, [pc, #256]	; (8004590 <USB_SetTurnaroundTime+0x120>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d202      	bcs.n	800449a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004494:	230f      	movs	r3, #15
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e062      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <USB_SetTurnaroundTime+0x120>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d306      	bcc.n	80044b0 <USB_SetTurnaroundTime+0x40>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4a3b      	ldr	r2, [pc, #236]	; (8004594 <USB_SetTurnaroundTime+0x124>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d202      	bcs.n	80044b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044aa:	230e      	movs	r3, #14
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e057      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4a38      	ldr	r2, [pc, #224]	; (8004594 <USB_SetTurnaroundTime+0x124>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d306      	bcc.n	80044c6 <USB_SetTurnaroundTime+0x56>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a37      	ldr	r2, [pc, #220]	; (8004598 <USB_SetTurnaroundTime+0x128>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d202      	bcs.n	80044c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044c0:	230d      	movs	r3, #13
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e04c      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4a33      	ldr	r2, [pc, #204]	; (8004598 <USB_SetTurnaroundTime+0x128>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d306      	bcc.n	80044dc <USB_SetTurnaroundTime+0x6c>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a32      	ldr	r2, [pc, #200]	; (800459c <USB_SetTurnaroundTime+0x12c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d802      	bhi.n	80044dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044d6:	230c      	movs	r3, #12
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e041      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a2f      	ldr	r2, [pc, #188]	; (800459c <USB_SetTurnaroundTime+0x12c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d906      	bls.n	80044f2 <USB_SetTurnaroundTime+0x82>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a2e      	ldr	r2, [pc, #184]	; (80045a0 <USB_SetTurnaroundTime+0x130>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d802      	bhi.n	80044f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044ec:	230b      	movs	r3, #11
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e036      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4a2a      	ldr	r2, [pc, #168]	; (80045a0 <USB_SetTurnaroundTime+0x130>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d906      	bls.n	8004508 <USB_SetTurnaroundTime+0x98>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a29      	ldr	r2, [pc, #164]	; (80045a4 <USB_SetTurnaroundTime+0x134>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d802      	bhi.n	8004508 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004502:	230a      	movs	r3, #10
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	e02b      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a26      	ldr	r2, [pc, #152]	; (80045a4 <USB_SetTurnaroundTime+0x134>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d906      	bls.n	800451e <USB_SetTurnaroundTime+0xae>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4a25      	ldr	r2, [pc, #148]	; (80045a8 <USB_SetTurnaroundTime+0x138>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d202      	bcs.n	800451e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004518:	2309      	movs	r3, #9
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e020      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <USB_SetTurnaroundTime+0x138>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d306      	bcc.n	8004534 <USB_SetTurnaroundTime+0xc4>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a20      	ldr	r2, [pc, #128]	; (80045ac <USB_SetTurnaroundTime+0x13c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d802      	bhi.n	8004534 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800452e:	2308      	movs	r3, #8
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e015      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4a1d      	ldr	r2, [pc, #116]	; (80045ac <USB_SetTurnaroundTime+0x13c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d906      	bls.n	800454a <USB_SetTurnaroundTime+0xda>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <USB_SetTurnaroundTime+0x140>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d202      	bcs.n	800454a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004544:	2307      	movs	r3, #7
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e00a      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800454a:	2306      	movs	r3, #6
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e007      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004556:	2309      	movs	r3, #9
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e001      	b.n	8004560 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800455c:	2309      	movs	r3, #9
 800455e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	00d8acbf 	.word	0x00d8acbf
 8004590:	00e4e1c0 	.word	0x00e4e1c0
 8004594:	00f42400 	.word	0x00f42400
 8004598:	01067380 	.word	0x01067380
 800459c:	011a499f 	.word	0x011a499f
 80045a0:	01312cff 	.word	0x01312cff
 80045a4:	014ca43f 	.word	0x014ca43f
 80045a8:	016e3600 	.word	0x016e3600
 80045ac:	01a6ab1f 	.word	0x01a6ab1f
 80045b0:	01e84800 	.word	0x01e84800

080045b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f043 0201 	orr.w	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d115      	bne.n	8004646 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004626:	2001      	movs	r0, #1
 8004628:	f7fc fbce 	bl	8000dc8 <HAL_Delay>
      ms++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3301      	adds	r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 fa45 	bl	8005ac2 <USB_GetMode>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d01e      	beq.n	800467c <USB_SetCurrentMode+0x84>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b31      	cmp	r3, #49	; 0x31
 8004642:	d9f0      	bls.n	8004626 <USB_SetCurrentMode+0x2e>
 8004644:	e01a      	b.n	800467c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d115      	bne.n	8004678 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004658:	2001      	movs	r0, #1
 800465a:	f7fc fbb5 	bl	8000dc8 <HAL_Delay>
      ms++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fa2c 	bl	8005ac2 <USB_GetMode>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <USB_SetCurrentMode+0x84>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b31      	cmp	r3, #49	; 0x31
 8004674:	d9f0      	bls.n	8004658 <USB_SetCurrentMode+0x60>
 8004676:	e001      	b.n	800467c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e005      	b.n	8004688 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b32      	cmp	r3, #50	; 0x32
 8004680:	d101      	bne.n	8004686 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004690:	b084      	sub	sp, #16
 8004692:	b580      	push	{r7, lr}
 8004694:	b086      	sub	sp, #24
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800469e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	e009      	b.n	80046c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	3340      	adds	r3, #64	; 0x40
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	2200      	movs	r2, #0
 80046bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	3301      	adds	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b0e      	cmp	r3, #14
 80046c8:	d9f2      	bls.n	80046b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11c      	bne.n	800470a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046de:	f043 0302 	orr.w	r3, r3, #2
 80046e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
 8004708:	e00b      	b.n	8004722 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004728:	461a      	mov	r2, r3
 800472a:	2300      	movs	r3, #0
 800472c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004734:	4619      	mov	r1, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473c:	461a      	mov	r2, r3
 800473e:	680b      	ldr	r3, [r1, #0]
 8004740:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	2b01      	cmp	r3, #1
 8004746:	d10c      	bne.n	8004762 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800474e:	2100      	movs	r1, #0
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f965 	bl	8004a20 <USB_SetDevSpeed>
 8004756:	e008      	b.n	800476a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004758:	2101      	movs	r1, #1
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f960 	bl	8004a20 <USB_SetDevSpeed>
 8004760:	e003      	b.n	800476a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004762:	2103      	movs	r1, #3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f95b 	bl	8004a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800476a:	2110      	movs	r1, #16
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8f3 	bl	8004958 <USB_FlushTxFifo>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f91f 	bl	80049c0 <USB_FlushRxFifo>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	461a      	mov	r2, r3
 8004794:	2300      	movs	r3, #0
 8004796:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	e043      	b.n	800483e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047cc:	d118      	bne.n	8004800 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	461a      	mov	r2, r3
 80047e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	e013      	b.n	8004812 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	461a      	mov	r2, r3
 80047f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e008      	b.n	8004812 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	461a      	mov	r2, r3
 8004832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004836:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	3301      	adds	r3, #1
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3b7      	bcc.n	80047b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e043      	b.n	80048d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800485e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004862:	d118      	bne.n	8004896 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	461a      	mov	r2, r3
 8004878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e013      	b.n	80048a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	461a      	mov	r2, r3
 800488e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	e008      	b.n	80048a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	461a      	mov	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b4:	461a      	mov	r2, r3
 80048b6:	2300      	movs	r3, #0
 80048b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	461a      	mov	r2, r3
 80048c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3301      	adds	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d3b7      	bcc.n	800484c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f043 0210 	orr.w	r2, r3, #16
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <USB_DevInit+0x2c4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f043 0208 	orr.w	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800492e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004944:	7dfb      	ldrb	r3, [r7, #23]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004950:	b004      	add	sp, #16
 8004952:	4770      	bx	lr
 8004954:	803c3800 	.word	0x803c3800

08004958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3301      	adds	r3, #1
 800496a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a13      	ldr	r2, [pc, #76]	; (80049bc <USB_FlushTxFifo+0x64>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d901      	bls.n	8004978 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e01b      	b.n	80049b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	daf2      	bge.n	8004966 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	019b      	lsls	r3, r3, #6
 8004988:	f043 0220 	orr.w	r2, r3, #32
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <USB_FlushTxFifo+0x64>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e006      	b.n	80049b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d0f0      	beq.n	8004990 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	00030d40 	.word	0x00030d40

080049c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4a11      	ldr	r2, [pc, #68]	; (8004a1c <USB_FlushRxFifo+0x5c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e018      	b.n	8004a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	daf2      	bge.n	80049cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2210      	movs	r2, #16
 80049ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <USB_FlushRxFifo+0x5c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e006      	b.n	8004a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d0f0      	beq.n	80049f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	00030d40 	.word	0x00030d40

08004a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b087      	sub	sp, #28
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 0306 	and.w	r3, r3, #6
 8004a6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
 8004a76:	e00a      	b.n	8004a8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d002      	beq.n	8004a84 <USB_GetDevSpeed+0x32>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b06      	cmp	r3, #6
 8004a82:	d102      	bne.n	8004a8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a84:	2302      	movs	r3, #2
 8004a86:	75fb      	strb	r3, [r7, #23]
 8004a88:	e001      	b.n	8004a8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a8a:	230f      	movs	r3, #15
 8004a8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d13a      	bne.n	8004b2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f003 030f 	and.w	r3, r3, #15
 8004ac8:	2101      	movs	r1, #1
 8004aca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d155      	bne.n	8004b9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	791b      	ldrb	r3, [r3, #4]
 8004b0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	059b      	lsls	r3, r3, #22
 8004b12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b14:	4313      	orrs	r3, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	e036      	b.n	8004b9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	2101      	movs	r1, #1
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	041b      	lsls	r3, r3, #16
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11a      	bne.n	8004b9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	791b      	ldrb	r3, [r3, #4]
 8004b80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b82:	430b      	orrs	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	0151      	lsls	r1, r2, #5
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	440a      	add	r2, r1
 8004b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d161      	bne.n	8004c8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bde:	d11f      	bne.n	8004c20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c40:	4013      	ands	r3, r2
 8004c42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	2101      	movs	r1, #1
 8004c56:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c64:	4013      	ands	r3, r2
 8004c66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	0159      	lsls	r1, r3, #5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	440b      	add	r3, r1
 8004c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c82:	4619      	mov	r1, r3
 8004c84:	4b35      	ldr	r3, [pc, #212]	; (8004d5c <USB_DeactivateEndpoint+0x1b0>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
 8004c8a:	e060      	b.n	8004d4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca2:	d11f      	bne.n	8004ce4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cc2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	68f9      	ldr	r1, [r7, #12]
 8004d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d04:	4013      	ands	r3, r2
 8004d06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	2101      	movs	r1, #1
 8004d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1e:	041b      	lsls	r3, r3, #16
 8004d20:	43db      	mvns	r3, r3
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	0159      	lsls	r1, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	440b      	add	r3, r1
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	4619      	mov	r1, r3
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <USB_DeactivateEndpoint+0x1b4>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	ec337800 	.word	0xec337800
 8004d60:	eff37800 	.word	0xeff37800

08004d64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	; 0x28
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	785b      	ldrb	r3, [r3, #1]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	f040 815c 	bne.w	800503e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d132      	bne.n	8004df4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dec:	0cdb      	lsrs	r3, r3, #19
 8004dee:	04db      	lsls	r3, r3, #19
 8004df0:	6113      	str	r3, [r2, #16]
 8004df2:	e074      	b.n	8004ede <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	0cdb      	lsrs	r3, r3, #19
 8004e10:	04db      	lsls	r3, r3, #19
 8004e12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	0151      	lsls	r1, r2, #5
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	440a      	add	r2, r1
 8004e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	440b      	add	r3, r1
 8004e50:	1e59      	subs	r1, r3, #1
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e5c:	4b9d      	ldr	r3, [pc, #628]	; (80050d4 <USB_EPStartXfer+0x370>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	0148      	lsls	r0, r1, #5
 8004e64:	69f9      	ldr	r1, [r7, #28]
 8004e66:	4401      	add	r1, r0
 8004e68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	0148      	lsls	r0, r1, #5
 8004e8a:	69f9      	ldr	r1, [r7, #28]
 8004e8c:	4401      	add	r1, r0
 8004e8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	791b      	ldrb	r3, [r3, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d11f      	bne.n	8004ede <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ebc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004edc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d14b      	bne.n	8004f7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	791b      	ldrb	r3, [r3, #4]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d128      	bne.n	8004f5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d110      	bne.n	8004f3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	e00f      	b.n	8004f5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e133      	b.n	80051e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	791b      	ldrb	r3, [r3, #4]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d015      	beq.n	8004fd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 811b 	beq.w	80051e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	634b      	str	r3, [r1, #52]	; 0x34
 8004fce:	e109      	b.n	80051e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	0151      	lsls	r1, r2, #5
 8004ff2:	69fa      	ldr	r2, [r7, #28]
 8004ff4:	440a      	add	r2, r1
 8004ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e00f      	b.n	8005022 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	015a      	lsls	r2, r3, #5
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	4413      	add	r3, r2
 800500a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	0151      	lsls	r1, r2, #5
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	440a      	add	r2, r1
 8005018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	6919      	ldr	r1, [r3, #16]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	b298      	uxth	r0, r3
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	4603      	mov	r3, r0
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fade 	bl	80055f8 <USB_WritePacket>
 800503c:	e0d2      	b.n	80051e4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005058:	0cdb      	lsrs	r3, r3, #19
 800505a:	04db      	lsls	r3, r3, #19
 800505c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	0151      	lsls	r1, r2, #5
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	440a      	add	r2, r1
 8005074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800507c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005080:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d126      	bne.n	80050d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	0148      	lsls	r0, r1, #5
 80050a4:	69f9      	ldr	r1, [r7, #28]
 80050a6:	4401      	add	r1, r0
 80050a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050ac:	4313      	orrs	r3, r2
 80050ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ce:	6113      	str	r3, [r2, #16]
 80050d0:	e03a      	b.n	8005148 <USB_EPStartXfer+0x3e4>
 80050d2:	bf00      	nop
 80050d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	1e5a      	subs	r2, r3, #1
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	8afa      	ldrh	r2, [r7, #22]
 80050f4:	fb03 f202 	mul.w	r2, r3, r2
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	8afb      	ldrh	r3, [r7, #22]
 800510c:	04d9      	lsls	r1, r3, #19
 800510e:	4b38      	ldr	r3, [pc, #224]	; (80051f0 <USB_EPStartXfer+0x48c>)
 8005110:	400b      	ands	r3, r1
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	0148      	lsls	r0, r1, #5
 8005116:	69f9      	ldr	r1, [r7, #28]
 8005118:	4401      	add	r1, r0
 800511a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800511e:	4313      	orrs	r3, r2
 8005120:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	0148      	lsls	r0, r1, #5
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	4401      	add	r1, r0
 8005140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005144:	4313      	orrs	r3, r2
 8005146:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10d      	bne.n	800516a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6919      	ldr	r1, [r3, #16]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	460a      	mov	r2, r1
 8005168:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	791b      	ldrb	r3, [r3, #4]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d128      	bne.n	80051c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d110      	bne.n	80051a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	440a      	add	r2, r1
 8005198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	e00f      	b.n	80051c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	0151      	lsls	r1, r2, #5
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	440a      	add	r2, r1
 80051ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	1ff80000 	.word	0x1ff80000

080051f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b01      	cmp	r3, #1
 8005212:	f040 80ce 	bne.w	80053b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d132      	bne.n	8005284 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800523c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	0cdb      	lsrs	r3, r3, #19
 800527e:	04db      	lsls	r3, r3, #19
 8005280:	6113      	str	r3, [r2, #16]
 8005282:	e04e      	b.n	8005322 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	0cdb      	lsrs	r3, r3, #19
 80052a0:	04db      	lsls	r3, r3, #19
 80052a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d903      	bls.n	80052dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	0151      	lsls	r1, r2, #5
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	440a      	add	r2, r1
 80052f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005312:	6939      	ldr	r1, [r7, #16]
 8005314:	0148      	lsls	r0, r1, #5
 8005316:	6979      	ldr	r1, [r7, #20]
 8005318:	4401      	add	r1, r0
 800531a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800531e:	4313      	orrs	r3, r2
 8005320:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d11e      	bne.n	8005366 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d009      	beq.n	8005344 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e097      	b.n	8005496 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005384:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8083 	beq.w	8005496 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	f003 030f 	and.w	r3, r3, #15
 80053a0:	2101      	movs	r1, #1
 80053a2:	fa01 f303 	lsl.w	r3, r1, r3
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ac:	4313      	orrs	r3, r2
 80053ae:	634b      	str	r3, [r1, #52]	; 0x34
 80053b0:	e071      	b.n	8005496 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053cc:	0cdb      	lsrs	r3, r3, #19
 80053ce:	04db      	lsls	r3, r3, #19
 80053d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800542c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005444:	6939      	ldr	r1, [r7, #16]
 8005446:	0148      	lsls	r0, r1, #5
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	4401      	add	r1, r0
 800544c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005450:	4313      	orrs	r3, r2
 8005452:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10d      	bne.n	8005476 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6919      	ldr	r1, [r3, #16]
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	460a      	mov	r2, r1
 8005474:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	440a      	add	r2, r1
 800548c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005490:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005494:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d14a      	bne.n	8005558 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054da:	f040 8086 	bne.w	80055ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005500:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005524:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005532:	4293      	cmp	r3, r2
 8005534:	d902      	bls.n	800553c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	75fb      	strb	r3, [r7, #23]
          break;
 800553a:	e056      	b.n	80055ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005554:	d0e7      	beq.n	8005526 <USB_EPStopXfer+0x82>
 8005556:	e048      	b.n	80055ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005570:	d13b      	bne.n	80055ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	7812      	ldrb	r2, [r2, #0]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005594:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d902      	bls.n	80055d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	75fb      	strb	r3, [r7, #23]
          break;
 80055ce:	e00c      	b.n	80055ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e8:	d0e7      	beq.n	80055ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80055ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b089      	sub	sp, #36	; 0x24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4611      	mov	r1, r2
 8005604:	461a      	mov	r2, r3
 8005606:	460b      	mov	r3, r1
 8005608:	71fb      	strb	r3, [r7, #7]
 800560a:	4613      	mov	r3, r2
 800560c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005616:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d123      	bne.n	8005666 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800561e:	88bb      	ldrh	r3, [r7, #4]
 8005620:	3303      	adds	r3, #3
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	e018      	b.n	800565e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	031a      	lsls	r2, r3, #12
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005638:	461a      	mov	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	3301      	adds	r3, #1
 8005644:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3301      	adds	r3, #1
 800564a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	3301      	adds	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	3301      	adds	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d3e2      	bcc.n	800562c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3724      	adds	r7, #36	; 0x24
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005674:	b480      	push	{r7}
 8005676:	b08b      	sub	sp, #44	; 0x2c
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	b29b      	uxth	r3, r3
 8005690:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	e014      	b.n	80056ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	3301      	adds	r3, #1
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	3301      	adds	r3, #1
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	3301      	adds	r3, #1
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	3301      	adds	r3, #1
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d3e6      	bcc.n	80056a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056d2:	8bfb      	ldrh	r3, [r7, #30]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01e      	beq.n	8005716 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e2:	461a      	mov	r2, r3
 80056e4:	f107 0310 	add.w	r3, r7, #16
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	701a      	strb	r2, [r3, #0]
      i++;
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	3301      	adds	r3, #1
 8005702:	623b      	str	r3, [r7, #32]
      pDest++;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	3301      	adds	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800570a:	8bfb      	ldrh	r3, [r7, #30]
 800570c:	3b01      	subs	r3, #1
 800570e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005710:	8bfb      	ldrh	r3, [r7, #30]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ea      	bne.n	80056ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005718:	4618      	mov	r0, r3
 800571a:	372c      	adds	r7, #44	; 0x2c
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d12c      	bne.n	800579a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	db12      	blt.n	8005778 <USB_EPSetStall+0x54>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00f      	beq.n	8005778 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005776:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e02b      	b.n	80057f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	db12      	blt.n	80057d2 <USB_EPSetStall+0xae>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00f      	beq.n	80057d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d128      	bne.n	800586e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	791b      	ldrb	r3, [r3, #4]
 8005840:	2b03      	cmp	r3, #3
 8005842:	d003      	beq.n	800584c <USB_EPClearStall+0x4c>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	791b      	ldrb	r3, [r3, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d138      	bne.n	80058be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	e027      	b.n	80058be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005888:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800588c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	791b      	ldrb	r3, [r3, #4]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d003      	beq.n	800589e <USB_EPClearStall+0x9e>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	791b      	ldrb	r3, [r3, #4]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d10f      	bne.n	80058be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80058ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005900:	68f9      	ldr	r1, [r7, #12]
 8005902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005906:	4313      	orrs	r3, r2
 8005908:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005932:	f023 0303 	bic.w	r3, r3, #3
 8005936:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005946:	f023 0302 	bic.w	r3, r3, #2
 800594a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005974:	f023 0303 	bic.w	r3, r3, #3
 8005978:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005988:	f043 0302 	orr.w	r3, r3, #2
 800598c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4013      	ands	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059b4:	68fb      	ldr	r3, [r7, #12]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b085      	sub	sp, #20
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	0c1b      	lsrs	r3, r3, #16
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	4013      	ands	r3, r2
 8005a18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	b29b      	uxth	r3, r3
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a58:	68bb      	ldr	r3, [r7, #8]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b087      	sub	sp, #28
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	f003 030f 	and.w	r3, r3, #15
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	01db      	lsls	r3, r3, #7
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0301 	and.w	r3, r3, #1
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005afc:	f023 0307 	bic.w	r3, r3, #7
 8005b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	333c      	adds	r3, #60	; 0x3c
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4a26      	ldr	r2, [pc, #152]	; (8005bdc <USB_EP0_OutStart+0xb8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d90a      	bls.n	8005b5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b58:	d101      	bne.n	8005b5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e037      	b.n	8005bce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8c:	f043 0318 	orr.w	r3, r3, #24
 8005b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005ba4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d10f      	bne.n	8005bcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	4f54300a 	.word	0x4f54300a

08005be0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a13      	ldr	r2, [pc, #76]	; (8005c44 <USB_CoreReset+0x64>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e01b      	b.n	8005c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	daf2      	bge.n	8005bec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	f043 0201 	orr.w	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <USB_CoreReset+0x64>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e006      	b.n	8005c36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d0f0      	beq.n	8005c16 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	00030d40 	.word	0x00030d40

08005c48 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8005c54:	f44f 701d 	mov.w	r0, #628	; 0x274
 8005c58:	f006 fce2 	bl	800c620 <USBD_static_malloc>
 8005c5c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	32b0      	adds	r2, #176	; 0xb0
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c74:	2302      	movs	r3, #2
 8005c76:	e06e      	b.n	8005d56 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	32b0      	adds	r2, #176	; 0xb0
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	32b0      	adds	r2, #176	; 0xb0
 8005c92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	7c1b      	ldrb	r3, [r3, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d12b      	bne.n	8005cfc <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005ca4:	4b2e      	ldr	r3, [pc, #184]	; (8005d60 <USBD_MSC_Init+0x118>)
 8005ca6:	7819      	ldrb	r1, [r3, #0]
 8005ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cac:	2202      	movs	r2, #2
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f006 fb73 	bl	800c39a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8005cb4:	4b2a      	ldr	r3, [pc, #168]	; (8005d60 <USBD_MSC_Init+0x118>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ccc:	2201      	movs	r2, #1
 8005cce:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <USBD_MSC_Init+0x11c>)
 8005cd2:	7819      	ldrb	r1, [r3, #0]
 8005cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cd8:	2202      	movs	r2, #2
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f006 fb5d 	bl	800c39a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8005ce0:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <USBD_MSC_Init+0x11c>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 020f 	and.w	r2, r3, #15
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3324      	adds	r3, #36	; 0x24
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e028      	b.n	8005d4e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <USBD_MSC_Init+0x118>)
 8005cfe:	7819      	ldrb	r1, [r3, #0]
 8005d00:	2340      	movs	r3, #64	; 0x40
 8005d02:	2202      	movs	r2, #2
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f006 fb48 	bl	800c39a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8005d0a:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <USBD_MSC_Init+0x118>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	f003 020f 	and.w	r2, r3, #15
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d22:	2201      	movs	r2, #1
 8005d24:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <USBD_MSC_Init+0x11c>)
 8005d28:	7819      	ldrb	r1, [r3, #0]
 8005d2a:	2340      	movs	r3, #64	; 0x40
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f006 fb33 	bl	800c39a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <USBD_MSC_Init+0x11c>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f003 020f 	and.w	r2, r3, #15
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	3324      	adds	r3, #36	; 0x24
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa2c 	bl	80061ac <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	2000006f 	.word	0x2000006f
 8005d64:	2000006e 	.word	0x2000006e

08005d68 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8005d74:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <USBD_MSC_DeInit+0xa8>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f006 fb33 	bl	800c3e6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8005d80:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <USBD_MSC_DeInit+0xa8>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d98:	2200      	movs	r2, #0
 8005d9a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8005d9c:	4b1d      	ldr	r3, [pc, #116]	; (8005e14 <USBD_MSC_DeInit+0xac>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f006 fb1f 	bl	800c3e6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <USBD_MSC_DeInit+0xac>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f003 020f 	and.w	r2, r3, #15
 8005db0:	6879      	ldr	r1, [r7, #4]
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	440b      	add	r3, r1
 8005dbc:	3324      	adds	r3, #36	; 0x24
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	32b0      	adds	r2, #176	; 0xb0
 8005dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d018      	beq.n	8005e06 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa67 	bl	80062a8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	32b0      	adds	r2, #176	; 0xb0
 8005de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f006 fc27 	bl	800c63c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32b0      	adds	r2, #176	; 0xb0
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	2000006f 	.word	0x2000006f
 8005e14:	2000006e 	.word	0x2000006e

08005e18 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32b0      	adds	r2, #176	; 0xb0
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e0e1      	b.n	8006008 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d053      	beq.n	8005ef8 <USBD_MSC_Setup+0xe0>
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	f040 80d1 	bne.w	8005ff8 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2bfe      	cmp	r3, #254	; 0xfe
 8005e5c:	d002      	beq.n	8005e64 <USBD_MSC_Setup+0x4c>
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d02a      	beq.n	8005eb8 <USBD_MSC_Setup+0xa0>
 8005e62:	e041      	b.n	8005ee8 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	885b      	ldrh	r3, [r3, #2]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d11e      	bne.n	8005eaa <USBD_MSC_Setup+0x92>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	88db      	ldrh	r3, [r3, #6]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d11a      	bne.n	8005eaa <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da15      	bge.n	8005eaa <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	33b0      	adds	r3, #176	; 0xb0
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	4798      	blx	r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	461a      	mov	r2, r3
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f003 f8f9 	bl	8009098 <USBD_CtlSendData>
 8005ea6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ea8:	e025      	b.n	8005ef6 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f003 f882 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8005eb6:	e01e      	b.n	8005ef6 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	885b      	ldrh	r3, [r3, #2]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10c      	bne.n	8005eda <USBD_MSC_Setup+0xc2>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	88db      	ldrh	r3, [r3, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d108      	bne.n	8005eda <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	db03      	blt.n	8005eda <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f9b4 	bl	8006240 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ed8:	e00d      	b.n	8005ef6 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f003 f86a 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ee6:	e006      	b.n	8005ef6 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f003 f863 	bl	8008fb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef4:	bf00      	nop
      }
      break;
 8005ef6:	e086      	b.n	8006006 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b0b      	cmp	r3, #11
 8005efe:	d872      	bhi.n	8005fe6 <USBD_MSC_Setup+0x1ce>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <USBD_MSC_Setup+0xf0>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005fb5 	.word	0x08005fb5
 8005f10:	08005fe7 	.word	0x08005fe7
 8005f14:	08005fe7 	.word	0x08005fe7
 8005f18:	08005fe7 	.word	0x08005fe7
 8005f1c:	08005fe7 	.word	0x08005fe7
 8005f20:	08005fe7 	.word	0x08005fe7
 8005f24:	08005fe7 	.word	0x08005fe7
 8005f28:	08005fe7 	.word	0x08005fe7
 8005f2c:	08005fe7 	.word	0x08005fe7
 8005f30:	08005f63 	.word	0x08005f63
 8005f34:	08005f8d 	.word	0x08005f8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d107      	bne.n	8005f54 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f44:	f107 030e 	add.w	r3, r7, #14
 8005f48:	2202      	movs	r2, #2
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f003 f8a3 	bl	8009098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f52:	e050      	b.n	8005ff6 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f003 f82d 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	75fb      	strb	r3, [r7, #23]
          break;
 8005f60:	e049      	b.n	8005ff6 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d107      	bne.n	8005f7e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3304      	adds	r3, #4
 8005f72:	2201      	movs	r2, #1
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f003 f88e 	bl	8009098 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005f7c:	e03b      	b.n	8005ff6 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f003 f818 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005f86:	2303      	movs	r3, #3
 8005f88:	75fb      	strb	r3, [r7, #23]
          break;
 8005f8a:	e034      	b.n	8005ff6 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d106      	bne.n	8005fa6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	885b      	ldrh	r3, [r3, #2]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fa4:	e027      	b.n	8005ff6 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f003 f804 	bl	8008fb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fb2:	e020      	b.n	8005ff6 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d119      	bne.n	8005ff4 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	885b      	ldrh	r3, [r3, #2]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d115      	bne.n	8005ff4 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	889b      	ldrh	r3, [r3, #4]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f006 fa27 	bl	800c424 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	889b      	ldrh	r3, [r3, #4]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fb2e 	bl	8006640 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8005fe4:	e006      	b.n	8005ff4 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f002 ffe4 	bl	8008fb6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8005ff2:	e000      	b.n	8005ff6 <USBD_MSC_Setup+0x1de>
          break;
 8005ff4:	bf00      	nop
      }
      break;
 8005ff6:	e006      	b.n	8006006 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8005ff8:	6839      	ldr	r1, [r7, #0]
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 ffdb 	bl	8008fb6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	75fb      	strb	r3, [r7, #23]
      break;
 8006004:	bf00      	nop
  }

  return (uint8_t)ret;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f959 	bl	80062d8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f983 	bl	800634c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006058:	2181      	movs	r1, #129	; 0x81
 800605a:	4812      	ldr	r0, [pc, #72]	; (80060a4 <USBD_MSC_GetHSCfgDesc+0x54>)
 800605c:	f002 f972 	bl	8008344 <USBD_GetEpDesc>
 8006060:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006062:	2101      	movs	r1, #1
 8006064:	480f      	ldr	r0, [pc, #60]	; (80060a4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8006066:	f002 f96d 	bl	8008344 <USBD_GetEpDesc>
 800606a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d006      	beq.n	8006080 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	711a      	strb	r2, [r3, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f042 0202 	orr.w	r2, r2, #2
 800607e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d006      	beq.n	8006094 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2200      	movs	r2, #0
 800608a:	711a      	strb	r2, [r3, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f042 0202 	orr.w	r2, r2, #2
 8006092:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800609a:	4b02      	ldr	r3, [pc, #8]	; (80060a4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000044 	.word	0x20000044

080060a8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80060b0:	2181      	movs	r1, #129	; 0x81
 80060b2:	4812      	ldr	r0, [pc, #72]	; (80060fc <USBD_MSC_GetFSCfgDesc+0x54>)
 80060b4:	f002 f946 	bl	8008344 <USBD_GetEpDesc>
 80060b8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80060ba:	2101      	movs	r1, #1
 80060bc:	480f      	ldr	r0, [pc, #60]	; (80060fc <USBD_MSC_GetFSCfgDesc+0x54>)
 80060be:	f002 f941 	bl	8008344 <USBD_GetEpDesc>
 80060c2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d006      	beq.n	80060d8 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d2:	711a      	strb	r2, [r3, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d006      	beq.n	80060ec <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060e6:	711a      	strb	r2, [r3, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2220      	movs	r2, #32
 80060f0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80060f2:	4b02      	ldr	r3, [pc, #8]	; (80060fc <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000044 	.word	0x20000044

08006100 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8006108:	2181      	movs	r1, #129	; 0x81
 800610a:	4812      	ldr	r0, [pc, #72]	; (8006154 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800610c:	f002 f91a 	bl	8008344 <USBD_GetEpDesc>
 8006110:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8006112:	2101      	movs	r1, #1
 8006114:	480f      	ldr	r0, [pc, #60]	; (8006154 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8006116:	f002 f915 	bl	8008344 <USBD_GetEpDesc>
 800611a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800612a:	711a      	strb	r2, [r3, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2200      	movs	r2, #0
 800613a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613e:	711a      	strb	r2, [r3, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800614a:	4b02      	ldr	r3, [pc, #8]	; (8006154 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000044 	.word	0x20000044

08006158 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	220a      	movs	r2, #10
 8006164:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006166:	4b03      	ldr	r3, [pc, #12]	; (8006174 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006168:	4618      	mov	r0, r3
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	20000064 	.word	0x20000064

08006178 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	e009      	b.n	80061a0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	33b0      	adds	r3, #176	; 0xb0
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	; 0xb0
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d032      	beq.n	8006230 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	33b0      	adds	r3, #176	; 0xb0
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2000      	movs	r0, #0
 8006202:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8006204:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <MSC_BOT_Init+0x8c>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f006 f90a 	bl	800c424 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8006210:	4b0a      	ldr	r3, [pc, #40]	; (800623c <MSC_BOT_Init+0x90>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f006 f904 	bl	800c424 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <MSC_BOT_Init+0x8c>)
 800621e:	7819      	ldrb	r1, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006226:	231f      	movs	r3, #31
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f006 f9c4 	bl	800c5b6 <USBD_LL_PrepareReceive>
 800622e:	e000      	b.n	8006232 <MSC_BOT_Init+0x86>
    return;
 8006230:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	2000006f 	.word	0x2000006f
 800623c:	2000006e 	.word	0x2000006e

08006240 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	32b0      	adds	r2, #176	; 0xb0
 8006252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006256:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01b      	beq.n	8006296 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <MSC_BOT_Reset+0x60>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f006 f915 	bl	800c4a0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8006276:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <MSC_BOT_Reset+0x64>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f006 f90f 	bl	800c4a0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <MSC_BOT_Reset+0x64>)
 8006284:	7819      	ldrb	r1, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800628c:	231f      	movs	r3, #31
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f006 f991 	bl	800c5b6 <USBD_LL_PrepareReceive>
 8006294:	e000      	b.n	8006298 <MSC_BOT_Reset+0x58>
    return;
 8006296:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	2000006e 	.word	0x2000006e
 80062a4:	2000006f 	.word	0x2000006f

080062a8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	32b0      	adds	r2, #176	; 0xb0
 80062ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062be:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	721a      	strb	r2, [r3, #8]
  }
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	32b0      	adds	r2, #176	; 0xb0
 80062ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d020      	beq.n	800633c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	7a1b      	ldrb	r3, [r3, #8]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d005      	beq.n	800630e <MSC_BOT_DataIn+0x36>
 8006302:	2b02      	cmp	r3, #2
 8006304:	db1c      	blt.n	8006340 <MSC_BOT_DataIn+0x68>
 8006306:	3b03      	subs	r3, #3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d819      	bhi.n	8006340 <MSC_BOT_DataIn+0x68>
 800630c:	e011      	b.n	8006332 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800631a:	461a      	mov	r2, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f9c9 	bl	80066b4 <SCSI_ProcessCmd>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	da0d      	bge.n	8006344 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006328:	2101      	movs	r1, #1
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f90c 	bl	8006548 <MSC_BOT_SendCSW>
      }
      break;
 8006330:	e008      	b.n	8006344 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f907 	bl	8006548 <MSC_BOT_SendCSW>
      break;
 800633a:	e004      	b.n	8006346 <MSC_BOT_DataIn+0x6e>
    return;
 800633c:	bf00      	nop
 800633e:	e002      	b.n	8006346 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8006340:	bf00      	nop
 8006342:	e000      	b.n	8006346 <MSC_BOT_DataIn+0x6e>
      break;
 8006344:	bf00      	nop
  }
}
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	32b0      	adds	r2, #176	; 0xb0
 8006362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006366:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d01c      	beq.n	80063a8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	7a1b      	ldrb	r3, [r3, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <MSC_BOT_DataOut+0x30>
 8006376:	2b01      	cmp	r3, #1
 8006378:	d004      	beq.n	8006384 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800637a:	e018      	b.n	80063ae <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f819 	bl	80063b4 <MSC_BOT_CBW_Decode>
      break;
 8006382:	e014      	b.n	80063ae <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006390:	461a      	mov	r2, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f98e 	bl	80066b4 <SCSI_ProcessCmd>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	da06      	bge.n	80063ac <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800639e:	2101      	movs	r1, #1
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f8d1 	bl	8006548 <MSC_BOT_SendCSW>
      break;
 80063a6:	e001      	b.n	80063ac <MSC_BOT_DataOut+0x60>
    return;
 80063a8:	bf00      	nop
 80063aa:	e000      	b.n	80063ae <MSC_BOT_DataOut+0x62>
      break;
 80063ac:	bf00      	nop
  }
}
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	32b0      	adds	r2, #176	; 0xb0
 80063c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d079      	beq.n	80064c6 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80063ea:	4b3a      	ldr	r3, [pc, #232]	; (80064d4 <MSC_BOT_CBW_Decode+0x120>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f006 f901 	bl	800c5f8 <USBD_LL_GetRxDataSize>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b1f      	cmp	r3, #31
 80063fa:	d114      	bne.n	8006426 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8006402:	4a35      	ldr	r2, [pc, #212]	; (80064d8 <MSC_BOT_CBW_Decode+0x124>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d10e      	bne.n	8006426 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800640e:	2b01      	cmp	r3, #1
 8006410:	d809      	bhi.n	8006426 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006422:	2b10      	cmp	r3, #16
 8006424:	d90e      	bls.n	8006444 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800642c:	2320      	movs	r3, #32
 800642e:	2205      	movs	r2, #5
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fe28 	bl	8007086 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2202      	movs	r2, #2
 800643a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f8bd 	bl	80065bc <MSC_BOT_Abort>
 8006442:	e043      	b.n	80064cc <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006450:	461a      	mov	r2, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f92e 	bl	80066b4 <SCSI_ProcessCmd>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	da0c      	bge.n	8006478 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	7a1b      	ldrb	r3, [r3, #8]
 8006462:	2b05      	cmp	r3, #5
 8006464:	d104      	bne.n	8006470 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006466:	2101      	movs	r1, #1
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f86d 	bl	8006548 <MSC_BOT_SendCSW>
 800646e:	e02d      	b.n	80064cc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8a3 	bl	80065bc <MSC_BOT_Abort>
 8006476:	e029      	b.n	80064cc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	7a1b      	ldrb	r3, [r3, #8]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d024      	beq.n	80064ca <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006484:	2b01      	cmp	r3, #1
 8006486:	d020      	beq.n	80064ca <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800648c:	2b03      	cmp	r3, #3
 800648e:	d01c      	beq.n	80064ca <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f103 0110 	add.w	r1, r3, #16
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f819 	bl	80064dc <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80064aa:	e00f      	b.n	80064cc <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d104      	bne.n	80064be <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80064b4:	2100      	movs	r1, #0
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f846 	bl	8006548 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80064bc:	e006      	b.n	80064cc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f87c 	bl	80065bc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80064c4:	e002      	b.n	80064cc <MSC_BOT_CBW_Decode+0x118>
    return;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80064ca:	bf00      	nop
    }
  }
}
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	2000006f 	.word	0x2000006f
 80064d8:	43425355 	.word	0x43425355

080064dc <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	32b0      	adds	r2, #176	; 0xb0
 80064f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f6:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01e      	beq.n	800653c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	4293      	cmp	r3, r2
 8006508:	bf28      	it	cs
 800650a:	4613      	movcs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1ad2      	subs	r2, r2, r3
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2204      	movs	r2, #4
 800652a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <MSC_BOT_SendData+0x68>)
 800652e:	7819      	ldrb	r1, [r3, #0]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f006 f81d 	bl	800c574 <USBD_LL_Transmit>
 800653a:	e000      	b.n	800653e <MSC_BOT_SendData+0x62>
    return;
 800653c:	bf00      	nop
}
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	2000006e 	.word	0x2000006e

08006548 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	32b0      	adds	r2, #176	; 0xb0
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01d      	beq.n	80065a6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a10      	ldr	r2, [pc, #64]	; (80065b0 <MSC_BOT_SendCSW+0x68>)
 800656e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8006580:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <MSC_BOT_SendCSW+0x6c>)
 8006582:	7819      	ldrb	r1, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800658a:	230d      	movs	r3, #13
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f005 fff1 	bl	800c574 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8006592:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <MSC_BOT_SendCSW+0x70>)
 8006594:	7819      	ldrb	r1, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800659c:	231f      	movs	r3, #31
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f006 f809 	bl	800c5b6 <USBD_LL_PrepareReceive>
 80065a4:	e000      	b.n	80065a8 <MSC_BOT_SendCSW+0x60>
    return;
 80065a6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	53425355 	.word	0x53425355
 80065b4:	2000006e 	.word	0x2000006e
 80065b8:	2000006f 	.word	0x2000006f

080065bc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32b0      	adds	r2, #176	; 0xb0
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d02a      	beq.n	8006630 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10e      	bne.n	8006602 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d009      	beq.n	8006602 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d105      	bne.n	8006602 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <MSC_BOT_Abort+0x7c>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f005 ff30 	bl	800c462 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8006602:	4b0e      	ldr	r3, [pc, #56]	; (800663c <MSC_BOT_Abort+0x80>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f005 ff2a 	bl	800c462 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	7a5b      	ldrb	r3, [r3, #9]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d10d      	bne.n	8006632 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <MSC_BOT_Abort+0x80>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f005 ff20 	bl	800c462 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <MSC_BOT_Abort+0x7c>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f005 ff1a 	bl	800c462 <USBD_LL_StallEP>
 800662e:	e000      	b.n	8006632 <MSC_BOT_Abort+0x76>
    return;
 8006630:	bf00      	nop
  }
}
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	2000006f 	.word	0x2000006f
 800663c:	2000006e 	.word	0x2000006e

08006640 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32b0      	adds	r2, #176	; 0xb0
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d01d      	beq.n	800669e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	7a5b      	ldrb	r3, [r3, #9]
 8006666:	2b02      	cmp	r3, #2
 8006668:	d10c      	bne.n	8006684 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <MSC_BOT_CplClrFeature+0x6c>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f005 fef6 	bl	800c462 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <MSC_BOT_CplClrFeature+0x70>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f005 fef0 	bl	800c462 <USBD_LL_StallEP>
 8006682:	e00f      	b.n	80066a4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006688:	2b00      	cmp	r3, #0
 800668a:	da0a      	bge.n	80066a2 <MSC_BOT_CplClrFeature+0x62>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	7a5b      	ldrb	r3, [r3, #9]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d006      	beq.n	80066a2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006694:	2101      	movs	r1, #1
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff ff56 	bl	8006548 <MSC_BOT_SendCSW>
 800669c:	e002      	b.n	80066a4 <MSC_BOT_CplClrFeature+0x64>
    return;
 800669e:	bf00      	nop
 80066a0:	e000      	b.n	80066a4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80066a2:	bf00      	nop
  }
}
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	2000006e 	.word	0x2000006e
 80066b0:	2000006f 	.word	0x2000006f

080066b4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	460b      	mov	r3, r1
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	32b0      	adds	r2, #176	; 0xb0
 80066cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80066d8:	f04f 33ff 	mov.w	r3, #4294967295
 80066dc:	e168      	b.n	80069b0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2baa      	cmp	r3, #170	; 0xaa
 80066e4:	f000 8144 	beq.w	8006970 <SCSI_ProcessCmd+0x2bc>
 80066e8:	2baa      	cmp	r3, #170	; 0xaa
 80066ea:	f300 8153 	bgt.w	8006994 <SCSI_ProcessCmd+0x2e0>
 80066ee:	2ba8      	cmp	r3, #168	; 0xa8
 80066f0:	f000 812c 	beq.w	800694c <SCSI_ProcessCmd+0x298>
 80066f4:	2ba8      	cmp	r3, #168	; 0xa8
 80066f6:	f300 814d 	bgt.w	8006994 <SCSI_ProcessCmd+0x2e0>
 80066fa:	2b5a      	cmp	r3, #90	; 0x5a
 80066fc:	f300 80c0 	bgt.w	8006880 <SCSI_ProcessCmd+0x1cc>
 8006700:	2b00      	cmp	r3, #0
 8006702:	f2c0 8147 	blt.w	8006994 <SCSI_ProcessCmd+0x2e0>
 8006706:	2b5a      	cmp	r3, #90	; 0x5a
 8006708:	f200 8144 	bhi.w	8006994 <SCSI_ProcessCmd+0x2e0>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <SCSI_ProcessCmd+0x60>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006887 	.word	0x08006887
 8006718:	08006995 	.word	0x08006995
 800671c:	08006995 	.word	0x08006995
 8006720:	08006899 	.word	0x08006899
 8006724:	08006995 	.word	0x08006995
 8006728:	08006995 	.word	0x08006995
 800672c:	08006995 	.word	0x08006995
 8006730:	08006995 	.word	0x08006995
 8006734:	08006995 	.word	0x08006995
 8006738:	08006995 	.word	0x08006995
 800673c:	08006995 	.word	0x08006995
 8006740:	08006995 	.word	0x08006995
 8006744:	08006995 	.word	0x08006995
 8006748:	08006995 	.word	0x08006995
 800674c:	08006995 	.word	0x08006995
 8006750:	08006995 	.word	0x08006995
 8006754:	08006995 	.word	0x08006995
 8006758:	08006995 	.word	0x08006995
 800675c:	080068ab 	.word	0x080068ab
 8006760:	08006995 	.word	0x08006995
 8006764:	08006995 	.word	0x08006995
 8006768:	08006995 	.word	0x08006995
 800676c:	08006995 	.word	0x08006995
 8006770:	08006995 	.word	0x08006995
 8006774:	08006995 	.word	0x08006995
 8006778:	08006995 	.word	0x08006995
 800677c:	080068e1 	.word	0x080068e1
 8006780:	080068bd 	.word	0x080068bd
 8006784:	08006995 	.word	0x08006995
 8006788:	08006995 	.word	0x08006995
 800678c:	080068cf 	.word	0x080068cf
 8006790:	08006995 	.word	0x08006995
 8006794:	08006995 	.word	0x08006995
 8006798:	08006995 	.word	0x08006995
 800679c:	08006995 	.word	0x08006995
 80067a0:	08006905 	.word	0x08006905
 80067a4:	08006995 	.word	0x08006995
 80067a8:	08006917 	.word	0x08006917
 80067ac:	08006995 	.word	0x08006995
 80067b0:	08006995 	.word	0x08006995
 80067b4:	0800693b 	.word	0x0800693b
 80067b8:	08006995 	.word	0x08006995
 80067bc:	0800695f 	.word	0x0800695f
 80067c0:	08006995 	.word	0x08006995
 80067c4:	08006995 	.word	0x08006995
 80067c8:	08006995 	.word	0x08006995
 80067cc:	08006995 	.word	0x08006995
 80067d0:	08006983 	.word	0x08006983
 80067d4:	08006995 	.word	0x08006995
 80067d8:	08006995 	.word	0x08006995
 80067dc:	08006995 	.word	0x08006995
 80067e0:	08006995 	.word	0x08006995
 80067e4:	08006995 	.word	0x08006995
 80067e8:	08006995 	.word	0x08006995
 80067ec:	08006995 	.word	0x08006995
 80067f0:	08006995 	.word	0x08006995
 80067f4:	08006995 	.word	0x08006995
 80067f8:	08006995 	.word	0x08006995
 80067fc:	08006995 	.word	0x08006995
 8006800:	08006995 	.word	0x08006995
 8006804:	08006995 	.word	0x08006995
 8006808:	08006995 	.word	0x08006995
 800680c:	08006995 	.word	0x08006995
 8006810:	08006995 	.word	0x08006995
 8006814:	08006995 	.word	0x08006995
 8006818:	08006995 	.word	0x08006995
 800681c:	08006995 	.word	0x08006995
 8006820:	08006995 	.word	0x08006995
 8006824:	08006995 	.word	0x08006995
 8006828:	08006995 	.word	0x08006995
 800682c:	08006995 	.word	0x08006995
 8006830:	08006995 	.word	0x08006995
 8006834:	08006995 	.word	0x08006995
 8006838:	08006995 	.word	0x08006995
 800683c:	08006995 	.word	0x08006995
 8006840:	08006995 	.word	0x08006995
 8006844:	08006995 	.word	0x08006995
 8006848:	08006995 	.word	0x08006995
 800684c:	08006995 	.word	0x08006995
 8006850:	08006995 	.word	0x08006995
 8006854:	08006995 	.word	0x08006995
 8006858:	08006995 	.word	0x08006995
 800685c:	08006995 	.word	0x08006995
 8006860:	08006995 	.word	0x08006995
 8006864:	08006995 	.word	0x08006995
 8006868:	08006995 	.word	0x08006995
 800686c:	08006995 	.word	0x08006995
 8006870:	08006995 	.word	0x08006995
 8006874:	08006995 	.word	0x08006995
 8006878:	08006995 	.word	0x08006995
 800687c:	080068f3 	.word	0x080068f3
 8006880:	2b9e      	cmp	r3, #158	; 0x9e
 8006882:	d051      	beq.n	8006928 <SCSI_ProcessCmd+0x274>
 8006884:	e086      	b.n	8006994 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8006886:	7afb      	ldrb	r3, [r7, #11]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4619      	mov	r1, r3
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f893 	bl	80069b8 <SCSI_TestUnitReady>
 8006892:	4603      	mov	r3, r0
 8006894:	75fb      	strb	r3, [r7, #23]
      break;
 8006896:	e089      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4619      	mov	r1, r3
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fb6e 	bl	8006f80 <SCSI_RequestSense>
 80068a4:	4603      	mov	r3, r0
 80068a6:	75fb      	strb	r3, [r7, #23]
      break;
 80068a8:	e080      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	4619      	mov	r1, r3
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f8db 	bl	8006a6c <SCSI_Inquiry>
 80068b6:	4603      	mov	r3, r0
 80068b8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ba:	e077      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80068bc:	7afb      	ldrb	r3, [r7, #11]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4619      	mov	r1, r3
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fc2a 	bl	800711c <SCSI_StartStopUnit>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]
      break;
 80068cc:	e06e      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4619      	mov	r1, r3
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 fc76 	bl	80071c6 <SCSI_AllowPreventRemovable>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]
      break;
 80068de:	e065      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4619      	mov	r1, r3
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 faea 	bl	8006ec0 <SCSI_ModeSense6>
 80068ec:	4603      	mov	r3, r0
 80068ee:	75fb      	strb	r3, [r7, #23]
      break;
 80068f0:	e05c      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4619      	mov	r1, r3
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fb11 	bl	8006f20 <SCSI_ModeSense10>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]
      break;
 8006902:	e053      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fa5d 	bl	8006dca <SCSI_ReadFormatCapacity>
 8006910:	4603      	mov	r3, r0
 8006912:	75fb      	strb	r3, [r7, #23]
      break;
 8006914:	e04a      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	4619      	mov	r1, r3
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f923 	bl	8006b68 <SCSI_ReadCapacity10>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]
      break;
 8006926:	e041      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f998 	bl	8006c64 <SCSI_ReadCapacity16>
 8006934:	4603      	mov	r3, r0
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	e038      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	4619      	mov	r1, r3
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 fc6d 	bl	8007220 <SCSI_Read10>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]
      break;
 800694a:	e02f      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4619      	mov	r1, r3
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fd0e 	bl	8007374 <SCSI_Read12>
 8006958:	4603      	mov	r3, r0
 800695a:	75fb      	strb	r3, [r7, #23]
      break;
 800695c:	e026      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800695e:	7afb      	ldrb	r3, [r7, #11]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4619      	mov	r1, r3
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fdb9 	bl	80074dc <SCSI_Write10>
 800696a:	4603      	mov	r3, r0
 800696c:	75fb      	strb	r3, [r7, #23]
      break;
 800696e:	e01d      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4619      	mov	r1, r3
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fe86 	bl	8007688 <SCSI_Write12>
 800697c:	4603      	mov	r3, r0
 800697e:	75fb      	strb	r3, [r7, #23]
      break;
 8006980:	e014      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8006982:	7afb      	ldrb	r3, [r7, #11]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4619      	mov	r1, r3
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 ff63 	bl	8007854 <SCSI_Verify10>
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]
      break;
 8006992:	e00b      	b.n	80069ac <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006994:	7af9      	ldrb	r1, [r7, #11]
 8006996:	2320      	movs	r3, #32
 8006998:	2205      	movs	r2, #5
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fb73 	bl	8007086 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2202      	movs	r2, #2
 80069a4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80069a6:	23ff      	movs	r3, #255	; 0xff
 80069a8:	75fb      	strb	r3, [r7, #23]
      break;
 80069aa:	bf00      	nop
  }

  return ret;
 80069ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	460b      	mov	r3, r1
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	32b0      	adds	r2, #176	; 0xb0
 80069d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d102      	bne.n	80069e2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295
 80069e0:	e03f      	b.n	8006a62 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80069f2:	2320      	movs	r3, #32
 80069f4:	2205      	movs	r2, #5
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fb45 	bl	8007086 <SCSI_SenseCode>

    return -1;
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006a00:	e02f      	b.n	8006a62 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d10b      	bne.n	8006a24 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006a0c:	7af9      	ldrb	r1, [r7, #11]
 8006a0e:	233a      	movs	r3, #58	; 0x3a
 8006a10:	2202      	movs	r2, #2
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 fb37 	bl	8007086 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2205      	movs	r2, #5
 8006a1c:	721a      	strb	r2, [r3, #8]
    return -1;
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a22:	e01e      	b.n	8006a62 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	33b0      	adds	r3, #176	; 0xb0
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	7afa      	ldrb	r2, [r7, #11]
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4798      	blx	r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006a42:	7af9      	ldrb	r1, [r7, #11]
 8006a44:	233a      	movs	r3, #58	; 0x3a
 8006a46:	2202      	movs	r2, #2
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fb1c 	bl	8007086 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2205      	movs	r2, #5
 8006a52:	721a      	strb	r2, [r3, #8]

    return -1;
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	e003      	b.n	8006a62 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	60da      	str	r2, [r3, #12]

  return 0;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	460b      	mov	r3, r1
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	32b0      	adds	r2, #176	; 0xb0
 8006a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a88:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8006a90:	f04f 33ff 	mov.w	r3, #4294967295
 8006a94:	e05f      	b.n	8006b56 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006aa6:	2320      	movs	r3, #32
 8006aa8:	2205      	movs	r2, #5
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 faeb 	bl	8007086 <SCSI_SenseCode>
    return -1;
 8006ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab4:	e04f      	b.n	8006b56 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d020      	beq.n	8006b06 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8006ace:	2206      	movs	r2, #6
 8006ad0:	4923      	ldr	r1, [pc, #140]	; (8006b60 <SCSI_Inquiry+0xf4>)
 8006ad2:	69b8      	ldr	r0, [r7, #24]
 8006ad4:	f001 f844 	bl	8007b60 <SCSI_UpdateBotData>
 8006ad8:	e03c      	b.n	8006b54 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3302      	adds	r3, #2
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d105      	bne.n	8006af0 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	491f      	ldr	r1, [pc, #124]	; (8006b64 <SCSI_Inquiry+0xf8>)
 8006ae8:	69b8      	ldr	r0, [r7, #24]
 8006aea:	f001 f839 	bl	8007b60 <SCSI_UpdateBotData>
 8006aee:	e031      	b.n	8006b54 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006af6:	2324      	movs	r3, #36	; 0x24
 8006af8:	2205      	movs	r2, #5
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fac3 	bl	8007086 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8006b00:	f04f 33ff 	mov.w	r3, #4294967295
 8006b04:	e027      	b.n	8006b56 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	33b0      	adds	r3, #176	; 0xb0
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	69d9      	ldr	r1, [r3, #28]
 8006b18:	7afa      	ldrb	r2, [r7, #11]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	440b      	add	r3, r1
 8006b24:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3305      	adds	r3, #5
 8006b30:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3304      	adds	r3, #4
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8bfa      	ldrh	r2, [r7, #30]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d303      	bcc.n	8006b48 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8006b48:	8bfb      	ldrh	r3, [r7, #30]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6979      	ldr	r1, [r7, #20]
 8006b4e:	69b8      	ldr	r0, [r7, #24]
 8006b50:	f001 f806 	bl	8007b60 <SCSI_UpdateBotData>
  }

  return 0;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000070 	.word	0x20000070
 8006b64:	20000078 	.word	0x20000078

08006b68 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	460b      	mov	r3, r1
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	32b0      	adds	r2, #176	; 0xb0
 8006b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b84:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8006b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b90:	e064      	b.n	8006c5c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	33b0      	adds	r3, #176	; 0xb0
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006bb0:	7af8      	ldrb	r0, [r7, #11]
 8006bb2:	4798      	blx	r3
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006bb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <SCSI_ReadCapacity10+0x62>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d108      	bne.n	8006bdc <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006bca:	7af9      	ldrb	r1, [r7, #11]
 8006bcc:	233a      	movs	r3, #58	; 0x3a
 8006bce:	2202      	movs	r2, #2
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fa58 	bl	8007086 <SCSI_SenseCode>
    return -1;
 8006bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bda:	e03f      	b.n	8006c5c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006be2:	3b01      	subs	r3, #1
 8006be4:	0e1b      	lsrs	r3, r3, #24
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c02:	3b01      	subs	r3, #1
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c22:	161b      	asrs	r3, r3, #24
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c30:	141b      	asrs	r3, r3, #16
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2208      	movs	r2, #8
 8006c58:	60da      	str	r2, [r3, #12]

  return 0;
 8006c5a:	2300      	movs	r3, #0

}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	32b0      	adds	r2, #176	; 0xb0
 8006c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c80:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8006c88:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8c:	e099      	b.n	8006dc2 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	33b0      	adds	r3, #176	; 0xb0
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8006ca6:	69ba      	ldr	r2, [r7, #24]
 8006ca8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8006cac:	7af8      	ldrb	r0, [r7, #11]
 8006cae:	4798      	blx	r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006cb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <SCSI_ReadCapacity16+0x62>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d108      	bne.n	8006cd8 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006cc6:	7af9      	ldrb	r1, [r7, #11]
 8006cc8:	233a      	movs	r3, #58	; 0x3a
 8006cca:	2202      	movs	r2, #2
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f9da 	bl	8007086 <SCSI_SenseCode>
    return -1;
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	e074      	b.n	8006dc2 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	330a      	adds	r3, #10
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	330b      	adds	r3, #11
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006ce8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	330c      	adds	r3, #12
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006cf2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	320d      	adds	r2, #13
 8006cf8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006cfa:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006d00:	2300      	movs	r3, #0
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e007      	b.n	8006d16 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8006d06:	7ffb      	ldrb	r3, [r7, #31]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8006d10:	7ffb      	ldrb	r3, [r7, #31]
 8006d12:	3301      	adds	r3, #1
 8006d14:	77fb      	strb	r3, [r7, #31]
 8006d16:	7ffa      	ldrb	r2, [r7, #31]
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d3f2      	bcc.n	8006d06 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d26:	3b01      	subs	r3, #1
 8006d28:	0e1b      	lsrs	r3, r3, #24
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d36:	3b01      	subs	r3, #1
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d46:	3b01      	subs	r3, #1
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d66:	161b      	asrs	r3, r3, #24
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d74:	141b      	asrs	r3, r3, #16
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d82:	0a1b      	lsrs	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	330a      	adds	r3, #10
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	330b      	adds	r3, #11
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006da8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	330c      	adds	r3, #12
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8006db2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	320d      	adds	r2, #13
 8006db8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8006dba:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	60da      	str	r2, [r3, #12]

  return 0;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b088      	sub	sp, #32
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	32b0      	adds	r2, #176	; 0xb0
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8006dee:	f04f 33ff 	mov.w	r3, #4294967295
 8006df2:	e061      	b.n	8006eb8 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	33b0      	adds	r3, #176	; 0xb0
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f107 0214 	add.w	r2, r7, #20
 8006e0a:	f107 0110 	add.w	r1, r7, #16
 8006e0e:	7af8      	ldrb	r0, [r7, #11]
 8006e10:	4798      	blx	r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8006e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <SCSI_ReadFormatCapacity+0x5e>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d108      	bne.n	8006e3a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006e28:	7af9      	ldrb	r1, [r7, #11]
 8006e2a:	233a      	movs	r3, #58	; 0x3a
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f929 	bl	8007086 <SCSI_SenseCode>
    return -1;
 8006e34:	f04f 33ff 	mov.w	r3, #4294967295
 8006e38:	e03e      	b.n	8006eb8 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	83fb      	strh	r3, [r7, #30]
 8006e3e:	e007      	b.n	8006e50 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8006e40:	8bfb      	ldrh	r3, [r7, #30]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	4413      	add	r3, r2
 8006e46:	2200      	movs	r2, #0
 8006e48:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8006e4a:	8bfb      	ldrh	r3, [r7, #30]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	83fb      	strh	r3, [r7, #30]
 8006e50:	8bfb      	ldrh	r3, [r7, #30]
 8006e52:	2b0b      	cmp	r3, #11
 8006e54:	d9f4      	bls.n	8006e40 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	0e1b      	lsrs	r3, r3, #24
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	0c1b      	lsrs	r3, r3, #16
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	0a1b      	lsrs	r3, r3, #8
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006e92:	8abb      	ldrh	r3, [r7, #20]
 8006e94:	141b      	asrs	r3, r3, #16
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006e9c:	8abb      	ldrh	r3, [r7, #20]
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8006ea8:	8abb      	ldrh	r3, [r7, #20]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	220c      	movs	r2, #12
 8006eb4:	60da      	str	r2, [r3, #12]

  return 0;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	32b0      	adds	r2, #176	; 0xb0
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8006ede:	2317      	movs	r3, #23
 8006ee0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eec:	e011      	b.n	8006f12 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	8afa      	ldrh	r2, [r7, #22]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d303      	bcc.n	8006f04 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3304      	adds	r3, #4
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8006f04:	8afb      	ldrh	r3, [r7, #22]
 8006f06:	461a      	mov	r2, r3
 8006f08:	4904      	ldr	r1, [pc, #16]	; (8006f1c <SCSI_ModeSense6+0x5c>)
 8006f0a:	6938      	ldr	r0, [r7, #16]
 8006f0c:	f000 fe28 	bl	8007b60 <SCSI_UpdateBotData>

  return 0;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000080 	.word	0x20000080

08006f20 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	32b0      	adds	r2, #176	; 0xb0
 8006f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8006f3e:	231b      	movs	r3, #27
 8006f40:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8006f48:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4c:	e011      	b.n	8006f72 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3308      	adds	r3, #8
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8afa      	ldrh	r2, [r7, #22]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d303      	bcc.n	8006f64 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8006f64:	8afb      	ldrh	r3, [r7, #22]
 8006f66:	461a      	mov	r2, r3
 8006f68:	4904      	ldr	r1, [pc, #16]	; (8006f7c <SCSI_ModeSense10+0x5c>)
 8006f6a:	6938      	ldr	r0, [r7, #16]
 8006f6c:	f000 fdf8 	bl	8007b60 <SCSI_UpdateBotData>

  return 0;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000098 	.word	0x20000098

08006f80 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	32b0      	adds	r2, #176	; 0xb0
 8006f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d102      	bne.n	8006faa <SCSI_RequestSense+0x2a>
  {
    return -1;
 8006fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa8:	e069      	b.n	800707e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006fba:	2320      	movs	r3, #32
 8006fbc:	2205      	movs	r2, #5
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f861 	bl	8007086 <SCSI_SenseCode>
    return -1;
 8006fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc8:	e059      	b.n	800707e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]
 8006fce:	e007      	b.n	8006fe0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b11      	cmp	r3, #17
 8006fe4:	d9f4      	bls.n	8006fd0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2270      	movs	r2, #112	; 0x70
 8006fea:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	220c      	movs	r2, #12
 8006ff0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d02e      	beq.n	8007060 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007008:	461a      	mov	r2, r3
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	3248      	adds	r2, #72	; 0x48
 800700e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	3348      	adds	r3, #72	; 0x48
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	4413      	add	r3, r2
 8007024:	791a      	ldrb	r2, [r3, #4]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	3348      	adds	r3, #72	; 0x48
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	4413      	add	r3, r2
 8007038:	795a      	ldrb	r2, [r3, #5]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007044:	3301      	adds	r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007054:	2b04      	cmp	r3, #4
 8007056:	d103      	bne.n	8007060 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2212      	movs	r2, #18
 8007064:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b12      	cmp	r3, #18
 800706e:	d805      	bhi.n	800707c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	461a      	mov	r2, r3
 8007094:	4603      	mov	r3, r0
 8007096:	70fb      	strb	r3, [r7, #3]
 8007098:	460b      	mov	r3, r1
 800709a:	70bb      	strb	r3, [r7, #2]
 800709c:	4613      	mov	r3, r2
 800709e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	32b0      	adds	r2, #176	; 0xb0
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d02c      	beq.n	8007110 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80070bc:	461a      	mov	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3248      	adds	r2, #72	; 0x48
 80070c2:	78b9      	ldrb	r1, [r7, #2]
 80070c4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	3348      	adds	r3, #72	; 0x48
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	787a      	ldrb	r2, [r7, #1]
 80070d8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	3348      	adds	r3, #72	; 0x48
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	4413      	add	r3, r2
 80070e8:	2200      	movs	r2, #0
 80070ea:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80070f2:	3301      	adds	r3, #1
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007102:	2b04      	cmp	r3, #4
 8007104:	d105      	bne.n	8007112 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800710e:	e000      	b.n	8007112 <SCSI_SenseCode+0x8c>
    return;
 8007110:	bf00      	nop
  }
}
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	460b      	mov	r3, r1
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	32b0      	adds	r2, #176	; 0xb0
 8007134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007138:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8007140:	f04f 33ff 	mov.w	r3, #4294967295
 8007144:	e03b      	b.n	80071be <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10f      	bne.n	8007170 <SCSI_StartStopUnit+0x54>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d108      	bne.n	8007170 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800715e:	7af9      	ldrb	r1, [r7, #11]
 8007160:	2324      	movs	r3, #36	; 0x24
 8007162:	2205      	movs	r2, #5
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7ff ff8e 	bl	8007086 <SCSI_SenseCode>

    return -1;
 800716a:	f04f 33ff 	mov.w	r3, #4294967295
 800716e:	e026      	b.n	80071be <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d104      	bne.n	8007188 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007186:	e016      	b.n	80071b6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	f003 0303 	and.w	r3, r3, #3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d104      	bne.n	80071a0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800719e:	e00a      	b.n	80071b6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3304      	adds	r3, #4
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d103      	bne.n	80071b6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2200      	movs	r2, #0
 80071ba:	60da      	str	r2, [r3, #12]

  return 0;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b087      	sub	sp, #28
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	460b      	mov	r3, r1
 80071d0:	607a      	str	r2, [r7, #4]
 80071d2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	32b0      	adds	r2, #176	; 0xb0
 80071de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 80071ea:	f04f 33ff 	mov.w	r3, #4294967295
 80071ee:	e011      	b.n	8007214 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007202:	e003      	b.n	800720c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2200      	movs	r2, #0
 8007210:	60da      	str	r2, [r3, #12]

  return 0;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	460b      	mov	r3, r1
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	32b0      	adds	r2, #176	; 0xb0
 8007238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <SCSI_Read10+0x2a>
  {
    return -1;
 8007244:	f04f 33ff 	mov.w	r3, #4294967295
 8007248:	e090      	b.n	800736c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	7a1b      	ldrb	r3, [r3, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f040 8082 	bne.w	8007358 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800725a:	b25b      	sxtb	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	db0a      	blt.n	8007276 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007266:	2320      	movs	r3, #32
 8007268:	2205      	movs	r2, #5
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff ff0b 	bl	8007086 <SCSI_SenseCode>
      return -1;
 8007270:	f04f 33ff 	mov.w	r3, #4294967295
 8007274:	e07a      	b.n	800736c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800727c:	2b02      	cmp	r3, #2
 800727e:	d108      	bne.n	8007292 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007280:	7af9      	ldrb	r1, [r7, #11]
 8007282:	233a      	movs	r3, #58	; 0x3a
 8007284:	2202      	movs	r2, #2
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f7ff fefd 	bl	8007086 <SCSI_SenseCode>

      return -1;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	e06c      	b.n	800736c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	33b0      	adds	r3, #176	; 0xb0
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	7afa      	ldrb	r2, [r7, #11]
 80072a6:	4610      	mov	r0, r2
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80072b0:	7af9      	ldrb	r1, [r7, #11]
 80072b2:	233a      	movs	r3, #58	; 0x3a
 80072b4:	2202      	movs	r2, #2
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff fee5 	bl	8007086 <SCSI_SenseCode>
      return -1;
 80072bc:	f04f 33ff 	mov.w	r3, #4294967295
 80072c0:	e054      	b.n	800736c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3302      	adds	r3, #2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3303      	adds	r3, #3
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80072dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	3205      	adds	r2, #5
 80072e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80072e4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3307      	adds	r3, #7
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	3208      	adds	r2, #8
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800730e:	7af9      	ldrb	r1, [r7, #11]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fadc 	bl	80078ce <SCSI_CheckAddressRange>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	da02      	bge.n	8007322 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800731c:	f04f 33ff 	mov.w	r3, #4294967295
 8007320:	e024      	b.n	800736c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800732e:	6979      	ldr	r1, [r7, #20]
 8007330:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	429a      	cmp	r2, r3
 800733a:	d00a      	beq.n	8007352 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007342:	2320      	movs	r3, #32
 8007344:	2205      	movs	r2, #5
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff fe9d 	bl	8007086 <SCSI_SenseCode>
      return -1;
 800734c:	f04f 33ff 	mov.w	r3, #4294967295
 8007350:	e00c      	b.n	800736c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2202      	movs	r2, #2
 8007356:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	4619      	mov	r1, r3
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fadf 	bl	8007928 <SCSI_ProcessRead>
 800736a:	4603      	mov	r3, r0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	460b      	mov	r3, r1
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	32b0      	adds	r2, #176	; 0xb0
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <SCSI_Read12+0x2a>
  {
    return -1;
 8007398:	f04f 33ff 	mov.w	r3, #4294967295
 800739c:	e09a      	b.n	80074d4 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	7a1b      	ldrb	r3, [r3, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f040 808c 	bne.w	80074c0 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80073ae:	b25b      	sxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	db0a      	blt.n	80073ca <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80073ba:	2320      	movs	r3, #32
 80073bc:	2205      	movs	r2, #5
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff fe61 	bl	8007086 <SCSI_SenseCode>
      return -1;
 80073c4:	f04f 33ff 	mov.w	r3, #4294967295
 80073c8:	e084      	b.n	80074d4 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d108      	bne.n	80073e6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073d4:	7af9      	ldrb	r1, [r7, #11]
 80073d6:	233a      	movs	r3, #58	; 0x3a
 80073d8:	2202      	movs	r2, #2
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff fe53 	bl	8007086 <SCSI_SenseCode>
      return -1;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295
 80073e4:	e076      	b.n	80074d4 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	33b0      	adds	r3, #176	; 0xb0
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	7afa      	ldrb	r2, [r7, #11]
 80073fa:	4610      	mov	r0, r2
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007404:	7af9      	ldrb	r1, [r7, #11]
 8007406:	233a      	movs	r3, #58	; 0x3a
 8007408:	2202      	movs	r2, #2
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fe3b 	bl	8007086 <SCSI_SenseCode>
      return -1;
 8007410:	f04f 33ff 	mov.w	r3, #4294967295
 8007414:	e05e      	b.n	80074d4 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	3302      	adds	r3, #2
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3303      	adds	r3, #3
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007426:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007430:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	3205      	adds	r2, #5
 8007436:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007438:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3306      	adds	r3, #6
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3307      	adds	r3, #7
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007450:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3308      	adds	r3, #8
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800745a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	3209      	adds	r2, #9
 8007460:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007462:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007476:	7af9      	ldrb	r1, [r7, #11]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fa28 	bl	80078ce <SCSI_CheckAddressRange>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	da02      	bge.n	800748a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007484:	f04f 33ff 	mov.w	r3, #4294967295
 8007488:	e024      	b.n	80074d4 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007496:	6979      	ldr	r1, [r7, #20]
 8007498:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d00a      	beq.n	80074ba <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80074aa:	2320      	movs	r3, #32
 80074ac:	2205      	movs	r2, #5
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f7ff fde9 	bl	8007086 <SCSI_SenseCode>
      return -1;
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295
 80074b8:	e00c      	b.n	80074d4 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2202      	movs	r2, #2
 80074be:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	4619      	mov	r1, r3
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 fa2b 	bl	8007928 <SCSI_ProcessRead>
 80074d2:	4603      	mov	r3, r0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	460b      	mov	r3, r1
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	32b0      	adds	r2, #176	; 0xb0
 80074f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <SCSI_Write10+0x2a>
  {
    return -1;
 8007500:	f04f 33ff 	mov.w	r3, #4294967295
 8007504:	e0ba      	b.n	800767c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	7a1b      	ldrb	r3, [r3, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 80b0 	bne.w	8007670 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10a      	bne.n	8007530 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007520:	2320      	movs	r3, #32
 8007522:	2205      	movs	r2, #5
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fdae 	bl	8007086 <SCSI_SenseCode>
      return -1;
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
 800752e:	e0a5      	b.n	800767c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007536:	b25b      	sxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	da0a      	bge.n	8007552 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007542:	2320      	movs	r3, #32
 8007544:	2205      	movs	r2, #5
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f7ff fd9d 	bl	8007086 <SCSI_SenseCode>
      return -1;
 800754c:	f04f 33ff 	mov.w	r3, #4294967295
 8007550:	e094      	b.n	800767c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	33b0      	adds	r3, #176	; 0xb0
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	7afa      	ldrb	r2, [r7, #11]
 8007566:	4610      	mov	r0, r2
 8007568:	4798      	blx	r3
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007570:	7af9      	ldrb	r1, [r7, #11]
 8007572:	233a      	movs	r3, #58	; 0x3a
 8007574:	2202      	movs	r2, #2
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7ff fd85 	bl	8007086 <SCSI_SenseCode>
      return -1;
 800757c:	f04f 33ff 	mov.w	r3, #4294967295
 8007580:	e07c      	b.n	800767c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	33b0      	adds	r3, #176	; 0xb0
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	7afa      	ldrb	r2, [r7, #11]
 8007596:	4610      	mov	r0, r2
 8007598:	4798      	blx	r3
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80075a0:	7af9      	ldrb	r1, [r7, #11]
 80075a2:	2327      	movs	r3, #39	; 0x27
 80075a4:	2202      	movs	r2, #2
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fd6d 	bl	8007086 <SCSI_SenseCode>
      return -1;
 80075ac:	f04f 33ff 	mov.w	r3, #4294967295
 80075b0:	e064      	b.n	800767c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3302      	adds	r3, #2
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3303      	adds	r3, #3
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80075c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3304      	adds	r3, #4
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80075cc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	3205      	adds	r2, #5
 80075d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80075d4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3307      	adds	r3, #7
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	3208      	adds	r2, #8
 80075e8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80075ea:	431a      	orrs	r2, r3
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80075fe:	7af9      	ldrb	r1, [r7, #11]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f964 	bl	80078ce <SCSI_CheckAddressRange>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	da02      	bge.n	8007612 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800760c:	f04f 33ff 	mov.w	r3, #4294967295
 8007610:	e034      	b.n	800767c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	d00a      	beq.n	8007646 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007636:	2320      	movs	r3, #32
 8007638:	2205      	movs	r2, #5
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f7ff fd23 	bl	8007086 <SCSI_SenseCode>
      return -1;
 8007640:	f04f 33ff 	mov.w	r3, #4294967295
 8007644:	e01a      	b.n	800767c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764c:	bf28      	it	cs
 800764e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007652:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2201      	movs	r2, #1
 8007658:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800765a:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <SCSI_Write10+0x1a8>)
 800765c:	7819      	ldrb	r1, [r3, #0]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f103 0210 	add.w	r2, r3, #16
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f004 ffa5 	bl	800c5b6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800766c:	2300      	movs	r3, #0
 800766e:	e005      	b.n	800767c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	4619      	mov	r1, r3
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f9dd 	bl	8007a34 <SCSI_ProcessWrite>
 800767a:	4603      	mov	r3, r0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	2000006f 	.word	0x2000006f

08007688 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	460b      	mov	r3, r1
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	32b0      	adds	r2, #176	; 0xb0
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <SCSI_Write12+0x2a>
  {
    return -1;
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295
 80076b0:	e0ca      	b.n	8007848 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	7a1b      	ldrb	r3, [r3, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f040 80c0 	bne.w	800783c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076cc:	2320      	movs	r3, #32
 80076ce:	2205      	movs	r2, #5
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f7ff fcd8 	bl	8007086 <SCSI_SenseCode>
      return -1;
 80076d6:	f04f 33ff 	mov.w	r3, #4294967295
 80076da:	e0b5      	b.n	8007848 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80076e2:	b25b      	sxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da0a      	bge.n	80076fe <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80076ee:	2320      	movs	r3, #32
 80076f0:	2205      	movs	r2, #5
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff fcc7 	bl	8007086 <SCSI_SenseCode>
      return -1;
 80076f8:	f04f 33ff 	mov.w	r3, #4294967295
 80076fc:	e0a4      	b.n	8007848 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	33b0      	adds	r3, #176	; 0xb0
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	7afa      	ldrb	r2, [r7, #11]
 8007712:	4610      	mov	r0, r2
 8007714:	4798      	blx	r3
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800771c:	7af9      	ldrb	r1, [r7, #11]
 800771e:	233a      	movs	r3, #58	; 0x3a
 8007720:	2202      	movs	r2, #2
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff fcaf 	bl	8007086 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2205      	movs	r2, #5
 800772c:	721a      	strb	r2, [r3, #8]
      return -1;
 800772e:	f04f 33ff 	mov.w	r3, #4294967295
 8007732:	e089      	b.n	8007848 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	33b0      	adds	r3, #176	; 0xb0
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	7afa      	ldrb	r2, [r7, #11]
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00b      	beq.n	800776a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007752:	7af9      	ldrb	r1, [r7, #11]
 8007754:	2327      	movs	r3, #39	; 0x27
 8007756:	2202      	movs	r2, #2
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff fc94 	bl	8007086 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2205      	movs	r2, #5
 8007762:	721a      	strb	r2, [r3, #8]
      return -1;
 8007764:	f04f 33ff 	mov.w	r3, #4294967295
 8007768:	e06e      	b.n	8007848 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3302      	adds	r3, #2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3303      	adds	r3, #3
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800777a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007784:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	3205      	adds	r2, #5
 800778a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800778c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3306      	adds	r3, #6
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3307      	adds	r3, #7
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80077a4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3308      	adds	r3, #8
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80077ae:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	3209      	adds	r2, #9
 80077b4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80077b6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80077ca:	7af9      	ldrb	r1, [r7, #11]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f87e 	bl	80078ce <SCSI_CheckAddressRange>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	da02      	bge.n	80077de <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80077d8:	f04f 33ff 	mov.w	r3, #4294967295
 80077dc:	e034      	b.n	8007848 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d00a      	beq.n	8007812 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007802:	2320      	movs	r3, #32
 8007804:	2205      	movs	r2, #5
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff fc3d 	bl	8007086 <SCSI_SenseCode>
      return -1;
 800780c:	f04f 33ff 	mov.w	r3, #4294967295
 8007810:	e01a      	b.n	8007848 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007818:	bf28      	it	cs
 800781a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800781e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2201      	movs	r2, #1
 8007824:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <SCSI_Write12+0x1c8>)
 8007828:	7819      	ldrb	r1, [r3, #0]
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f103 0210 	add.w	r2, r3, #16
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f004 febf 	bl	800c5b6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007838:	2300      	movs	r3, #0
 800783a:	e005      	b.n	8007848 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800783c:	7afb      	ldrb	r3, [r7, #11]
 800783e:	4619      	mov	r1, r3
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f8f7 	bl	8007a34 <SCSI_ProcessWrite>
 8007846:	4603      	mov	r3, r0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	2000006f 	.word	0x2000006f

08007854 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	460b      	mov	r3, r1
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	32b0      	adds	r2, #176	; 0xb0
 800786c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007870:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <SCSI_Verify10+0x2a>
  {
    return -1;
 8007878:	f04f 33ff 	mov.w	r3, #4294967295
 800787c:	e023      	b.n	80078c6 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3301      	adds	r3, #1
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d008      	beq.n	800789e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800788c:	7af9      	ldrb	r1, [r7, #11]
 800788e:	2324      	movs	r3, #36	; 0x24
 8007890:	2205      	movs	r2, #5
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7ff fbf7 	bl	8007086 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007898:	f04f 33ff 	mov.w	r3, #4294967295
 800789c:	e013      	b.n	80078c6 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80078aa:	7af9      	ldrb	r1, [r7, #11]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f80e 	bl	80078ce <SCSI_CheckAddressRange>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	da02      	bge.n	80078be <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80078b8:	f04f 33ff 	mov.w	r3, #4294967295
 80078bc:	e003      	b.n	80078c6 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2200      	movs	r2, #0
 80078c2:	60da      	str	r2, [r3, #12]

  return 0;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b086      	sub	sp, #24
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	460b      	mov	r3, r1
 80078dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	32b0      	adds	r2, #176	; 0xb0
 80078e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80078f4:	f04f 33ff 	mov.w	r3, #4294967295
 80078f8:	e011      	b.n	800791e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	441a      	add	r2, r3
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007906:	429a      	cmp	r2, r3
 8007908:	d908      	bls.n	800791c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800790a:	7af9      	ldrb	r1, [r7, #11]
 800790c:	2321      	movs	r3, #33	; 0x21
 800790e:	2205      	movs	r2, #5
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f7ff fbb8 	bl	8007086 <SCSI_SenseCode>
    return -1;
 8007916:	f04f 33ff 	mov.w	r3, #4294967295
 800791a:	e000      	b.n	800791e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32b0      	adds	r2, #176	; 0xb0
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	e06a      	b.n	8007a26 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800795c:	fb02 f303 	mul.w	r3, r2, r3
 8007960:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007968:	bf28      	it	cs
 800796a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800796e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	33b0      	adds	r3, #176	; 0xb0
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	691c      	ldr	r4, [r3, #16]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f103 0110 	add.w	r1, r3, #16
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007994:	4618      	mov	r0, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800799c:	b29b      	uxth	r3, r3
 800799e:	78f8      	ldrb	r0, [r7, #3]
 80079a0:	47a0      	blx	r4
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	da08      	bge.n	80079ba <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80079a8:	78f9      	ldrb	r1, [r7, #3]
 80079aa:	2311      	movs	r3, #17
 80079ac:	2204      	movs	r2, #4
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fb69 	bl	8007086 <SCSI_SenseCode>
    return -1;
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	e035      	b.n	8007a26 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80079ba:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <SCSI_ProcessRead+0x108>)
 80079bc:	7819      	ldrb	r1, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f103 0210 	add.w	r2, r3, #16
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f004 fdd4 	bl	800c574 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80079d8:	4619      	mov	r1, r3
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80079f4:	4619      	mov	r1, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80079fc:	1ad2      	subs	r2, r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	1ad2      	subs	r2, r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2203      	movs	r2, #3
 8007a22:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd90      	pop	{r4, r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000006e 	.word	0x2000006e

08007a34 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8007a34:	b590      	push	{r4, r7, lr}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	32b0      	adds	r2, #176	; 0xb0
 8007a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a4e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8007a56:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5a:	e07a      	b.n	8007b52 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a74:	bf28      	it	cs
 8007a76:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007a7a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	33b0      	adds	r3, #176	; 0xb0
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	695c      	ldr	r4, [r3, #20]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f103 0110 	add.w	r1, r3, #16
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	78f8      	ldrb	r0, [r7, #3]
 8007aac:	47a0      	blx	r4
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	da08      	bge.n	8007ac6 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007ab4:	78f9      	ldrb	r1, [r7, #3]
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	2204      	movs	r2, #4
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fae3 	bl	8007086 <SCSI_SenseCode>
    return -1;
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac4:	e045      	b.n	8007b52 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ada:	441a      	add	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007aee:	4619      	mov	r1, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007af6:	1ad2      	subs	r2, r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	1ad2      	subs	r2, r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007b18:	2100      	movs	r1, #0
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fe fd14 	bl	8006548 <MSC_BOT_SendCSW>
 8007b20:	e016      	b.n	8007b50 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007b2e:	fb02 f303 	mul.w	r3, r2, r3
 8007b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b36:	bf28      	it	cs
 8007b38:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b3c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <SCSI_ProcessWrite+0x128>)
 8007b40:	7819      	ldrb	r1, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f103 0210 	add.w	r2, r3, #16
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f004 fd33 	bl	800c5b6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd90      	pop	{r4, r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000006f 	.word	0x2000006f

08007b60 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8007b6e:	88fb      	ldrh	r3, [r7, #6]
 8007b70:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d102      	bne.n	8007b7e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8007b78:	f04f 33ff 	mov.w	r3, #4294967295
 8007b7c:	e013      	b.n	8007ba6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8007b7e:	8afa      	ldrh	r2, [r7, #22]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8007b84:	e00b      	b.n	8007b9e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8007b86:	8afb      	ldrh	r3, [r7, #22]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8007b8c:	8afb      	ldrh	r3, [r7, #22]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	441a      	add	r2, r3
 8007b92:	8afb      	ldrh	r3, [r7, #22]
 8007b94:	7811      	ldrb	r1, [r2, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	460a      	mov	r2, r1
 8007b9c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8007b9e:	8afb      	ldrh	r3, [r7, #22]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1f0      	bne.n	8007b86 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	371c      	adds	r7, #28
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b086      	sub	sp, #24
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e01f      	b.n	8007c0a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	79fa      	ldrb	r2, [r7, #7]
 8007bfc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f004 fb64 	bl	800c2cc <USBD_LL_Init>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e025      	b.n	8007c76 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	32ae      	adds	r2, #174	; 0xae
 8007c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00f      	beq.n	8007c66 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	32ae      	adds	r2, #174	; 0xae
 8007c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	f107 020e 	add.w	r2, r7, #14
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	4798      	blx	r3
 8007c5e:	4602      	mov	r2, r0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f004 fb6c 	bl	800c364 <USBD_LL_Start>
 8007c8c:	4603      	mov	r3, r0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c9e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 f909 	bl	8008f42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d01a      	beq.n	8007d8a <USBD_LL_SetupStage+0x72>
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d822      	bhi.n	8007d9e <USBD_LL_SetupStage+0x86>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <USBD_LL_SetupStage+0x4a>
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d00a      	beq.n	8007d76 <USBD_LL_SetupStage+0x5e>
 8007d60:	e01d      	b.n	8007d9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fb60 	bl	8008430 <USBD_StdDevReq>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]
      break;
 8007d74:	e020      	b.n	8007db8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fbc8 	bl	8008514 <USBD_StdItfReq>
 8007d84:	4603      	mov	r3, r0
 8007d86:	73fb      	strb	r3, [r7, #15]
      break;
 8007d88:	e016      	b.n	8007db8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fc2a 	bl	80085ec <USBD_StdEPReq>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d9c:	e00c      	b.n	8007db8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007da4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f004 fb58 	bl	800c462 <USBD_LL_StallEP>
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
      break;
 8007db6:	bf00      	nop
  }

  return ret;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b086      	sub	sp, #24
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d16e      	bne.n	8007eb8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007de0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	f040 8098 	bne.w	8007f1e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d913      	bls.n	8007e22 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4293      	cmp	r3, r2
 8007e12:	bf28      	it	cs
 8007e14:	4613      	movcs	r3, r2
 8007e16:	461a      	mov	r2, r3
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f001 f968 	bl	80090f0 <USBD_CtlContinueRx>
 8007e20:	e07d      	b.n	8007f1e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d014      	beq.n	8007e5a <USBD_LL_DataOutStage+0x98>
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d81d      	bhi.n	8007e70 <USBD_LL_DataOutStage+0xae>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <USBD_LL_DataOutStage+0x7c>
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d003      	beq.n	8007e44 <USBD_LL_DataOutStage+0x82>
 8007e3c:	e018      	b.n	8007e70 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	75bb      	strb	r3, [r7, #22]
            break;
 8007e42:	e018      	b.n	8007e76 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f000 fa5e 	bl	8008310 <USBD_CoreFindIF>
 8007e54:	4603      	mov	r3, r0
 8007e56:	75bb      	strb	r3, [r7, #22]
            break;
 8007e58:	e00d      	b.n	8007e76 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	4619      	mov	r1, r3
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fa60 	bl	800832a <USBD_CoreFindEP>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	75bb      	strb	r3, [r7, #22]
            break;
 8007e6e:	e002      	b.n	8007e76 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	75bb      	strb	r3, [r7, #22]
            break;
 8007e74:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e76:	7dbb      	ldrb	r3, [r7, #22]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d119      	bne.n	8007eb0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d113      	bne.n	8007eb0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e88:	7dba      	ldrb	r2, [r7, #22]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	32ae      	adds	r2, #174	; 0xae
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e98:	7dba      	ldrb	r2, [r7, #22]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ea0:	7dba      	ldrb	r2, [r7, #22]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	32ae      	adds	r2, #174	; 0xae
 8007ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f001 f92e 	bl	8009112 <USBD_CtlSendStatus>
 8007eb6:	e032      	b.n	8007f1e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 fa31 	bl	800832a <USBD_CoreFindEP>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ecc:	7dbb      	ldrb	r3, [r7, #22]
 8007ece:	2bff      	cmp	r3, #255	; 0xff
 8007ed0:	d025      	beq.n	8007f1e <USBD_LL_DataOutStage+0x15c>
 8007ed2:	7dbb      	ldrb	r3, [r7, #22]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d122      	bne.n	8007f1e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d117      	bne.n	8007f14 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ee4:	7dba      	ldrb	r2, [r7, #22]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	32ae      	adds	r2, #174	; 0xae
 8007eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00f      	beq.n	8007f14 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ef4:	7dba      	ldrb	r2, [r7, #22]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007efc:	7dba      	ldrb	r2, [r7, #22]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	32ae      	adds	r2, #174	; 0xae
 8007f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	7afa      	ldrb	r2, [r7, #11]
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	4798      	blx	r3
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	e000      	b.n	8007f20 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	460b      	mov	r3, r1
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d16f      	bne.n	800801c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d15a      	bne.n	8008002 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d914      	bls.n	8007f82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	1ad2      	subs	r2, r2, r3
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f001 f8ad 	bl	80090ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f74:	2300      	movs	r3, #0
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f004 fb1b 	bl	800c5b6 <USBD_LL_PrepareReceive>
 8007f80:	e03f      	b.n	8008002 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d11c      	bne.n	8007fc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d316      	bcc.n	8007fc8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d20f      	bcs.n	8007fc8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2100      	movs	r1, #0
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f001 f88e 	bl	80090ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f004 faf8 	bl	800c5b6 <USBD_LL_PrepareReceive>
 8007fc6:	e01c      	b.n	8008002 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d10f      	bne.n	8007ff4 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d009      	beq.n	8007ff4 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ff4:	2180      	movs	r1, #128	; 0x80
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f004 fa33 	bl	800c462 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f001 f89b 	bl	8009138 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d03a      	beq.n	8008082 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff fe42 	bl	8007c96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800801a:	e032      	b.n	8008082 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800801c:	7afb      	ldrb	r3, [r7, #11]
 800801e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4619      	mov	r1, r3
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f97f 	bl	800832a <USBD_CoreFindEP>
 800802c:	4603      	mov	r3, r0
 800802e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2bff      	cmp	r3, #255	; 0xff
 8008034:	d025      	beq.n	8008082 <USBD_LL_DataInStage+0x15a>
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d122      	bne.n	8008082 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b03      	cmp	r3, #3
 8008046:	d11c      	bne.n	8008082 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008048:	7dfa      	ldrb	r2, [r7, #23]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	32ae      	adds	r2, #174	; 0xae
 800804e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d014      	beq.n	8008082 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008058:	7dfa      	ldrb	r2, [r7, #23]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008060:	7dfa      	ldrb	r2, [r7, #23]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	32ae      	adds	r2, #174	; 0xae
 8008066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	7afa      	ldrb	r2, [r7, #11]
 800806e:	4611      	mov	r1, r2
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	4798      	blx	r3
 8008074:	4603      	mov	r3, r0
 8008076:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008078:	7dbb      	ldrb	r3, [r7, #22]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800807e:	7dbb      	ldrb	r3, [r7, #22]
 8008080:	e000      	b.n	8008084 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d014      	beq.n	80080f2 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00e      	beq.n	80080f2 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6852      	ldr	r2, [r2, #4]
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	4611      	mov	r1, r2
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080f2:	2340      	movs	r3, #64	; 0x40
 80080f4:	2200      	movs	r2, #0
 80080f6:	2100      	movs	r1, #0
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f004 f94e 	bl	800c39a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2240      	movs	r2, #64	; 0x40
 800810a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800810e:	2340      	movs	r3, #64	; 0x40
 8008110:	2200      	movs	r2, #0
 8008112:	2180      	movs	r1, #128	; 0x80
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f004 f940 	bl	800c39a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2240      	movs	r2, #64	; 0x40
 8008124:	621a      	str	r2, [r3, #32]

  return ret;
 8008126:	7bfb      	ldrb	r3, [r7, #15]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800815e:	b2da      	uxtb	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2204      	movs	r2, #4
 800816a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b04      	cmp	r3, #4
 800818e:	d106      	bne.n	800819e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008196:	b2da      	uxtb	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d110      	bne.n	80081e2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00b      	beq.n	80081e2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d005      	beq.n	80081e2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	32ae      	adds	r2, #174	; 0xae
 8008202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800820a:	2303      	movs	r3, #3
 800820c:	e01c      	b.n	8008248 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b03      	cmp	r3, #3
 8008218:	d115      	bne.n	8008246 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	32ae      	adds	r2, #174	; 0xae
 8008224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	32ae      	adds	r2, #174	; 0xae
 8008238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	78fa      	ldrb	r2, [r7, #3]
 8008240:	4611      	mov	r1, r2
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32ae      	adds	r2, #174	; 0xae
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800826e:	2303      	movs	r3, #3
 8008270:	e01c      	b.n	80082ac <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d115      	bne.n	80082aa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	32ae      	adds	r2, #174	; 0xae
 8008288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	32ae      	adds	r2, #174	; 0xae
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	4611      	mov	r1, r2
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00e      	beq.n	8008306 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6852      	ldr	r2, [r2, #4]
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	4611      	mov	r1, r2
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800831c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008336:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	885b      	ldrh	r3, [r3, #2]
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	429a      	cmp	r2, r3
 800836a:	d920      	bls.n	80083ae <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b29b      	uxth	r3, r3
 8008372:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008374:	e013      	b.n	800839e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008376:	f107 030a 	add.w	r3, r7, #10
 800837a:	4619      	mov	r1, r3
 800837c:	6978      	ldr	r0, [r7, #20]
 800837e:	f000 f81b 	bl	80083b8 <USBD_GetNextDesc>
 8008382:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	2b05      	cmp	r3, #5
 800838a:	d108      	bne.n	800839e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	789b      	ldrb	r3, [r3, #2]
 8008394:	78fa      	ldrb	r2, [r7, #3]
 8008396:	429a      	cmp	r2, r3
 8008398:	d008      	beq.n	80083ac <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	885b      	ldrh	r3, [r3, #2]
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	897b      	ldrh	r3, [r7, #10]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d8e5      	bhi.n	8008376 <USBD_GetEpDesc+0x32>
 80083aa:	e000      	b.n	80083ae <USBD_GetEpDesc+0x6a>
          break;
 80083ac:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083ae:	693b      	ldr	r3, [r7, #16]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	881a      	ldrh	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	4413      	add	r3, r2
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	461a      	mov	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4413      	add	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083e4:	68fb      	ldr	r3, [r7, #12]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3301      	adds	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008410:	8a3b      	ldrh	r3, [r7, #16]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	b21a      	sxth	r2, r3
 8008416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800841a:	4313      	orrs	r3, r2
 800841c:	b21b      	sxth	r3, r3
 800841e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008420:	89fb      	ldrh	r3, [r7, #14]
}
 8008422:	4618      	mov	r0, r3
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
	...

08008430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d005      	beq.n	8008456 <USBD_StdDevReq+0x26>
 800844a:	2b40      	cmp	r3, #64	; 0x40
 800844c:	d857      	bhi.n	80084fe <USBD_StdDevReq+0xce>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00f      	beq.n	8008472 <USBD_StdDevReq+0x42>
 8008452:	2b20      	cmp	r3, #32
 8008454:	d153      	bne.n	80084fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	32ae      	adds	r2, #174	; 0xae
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
      break;
 8008470:	e04a      	b.n	8008508 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	785b      	ldrb	r3, [r3, #1]
 8008476:	2b09      	cmp	r3, #9
 8008478:	d83b      	bhi.n	80084f2 <USBD_StdDevReq+0xc2>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <USBD_StdDevReq+0x50>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084e9 	.word	0x080084e9
 8008488:	080084f3 	.word	0x080084f3
 800848c:	080084df 	.word	0x080084df
 8008490:	080084f3 	.word	0x080084f3
 8008494:	080084b3 	.word	0x080084b3
 8008498:	080084a9 	.word	0x080084a9
 800849c:	080084f3 	.word	0x080084f3
 80084a0:	080084cb 	.word	0x080084cb
 80084a4:	080084bd 	.word	0x080084bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa3c 	bl	8008928 <USBD_GetDescriptor>
          break;
 80084b0:	e024      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fba1 	bl	8008bfc <USBD_SetAddress>
          break;
 80084ba:	e01f      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fbe0 	bl	8008c84 <USBD_SetConfig>
 80084c4:	4603      	mov	r3, r0
 80084c6:	73fb      	strb	r3, [r7, #15]
          break;
 80084c8:	e018      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc83 	bl	8008dd8 <USBD_GetConfig>
          break;
 80084d2:	e013      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fcb4 	bl	8008e44 <USBD_GetStatus>
          break;
 80084dc:	e00e      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fce3 	bl	8008eac <USBD_SetFeature>
          break;
 80084e6:	e009      	b.n	80084fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fd07 	bl	8008efe <USBD_ClrFeature>
          break;
 80084f0:	e004      	b.n	80084fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084f2:	6839      	ldr	r1, [r7, #0]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fd5e 	bl	8008fb6 <USBD_CtlError>
          break;
 80084fa:	bf00      	nop
      }
      break;
 80084fc:	e004      	b.n	8008508 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fd58 	bl	8008fb6 <USBD_CtlError>
      break;
 8008506:	bf00      	nop
  }

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop

08008514 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	d005      	beq.n	800853a <USBD_StdItfReq+0x26>
 800852e:	2b40      	cmp	r3, #64	; 0x40
 8008530:	d852      	bhi.n	80085d8 <USBD_StdItfReq+0xc4>
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <USBD_StdItfReq+0x26>
 8008536:	2b20      	cmp	r3, #32
 8008538:	d14e      	bne.n	80085d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008540:	b2db      	uxtb	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	2b02      	cmp	r3, #2
 8008546:	d840      	bhi.n	80085ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	889b      	ldrh	r3, [r3, #4]
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b01      	cmp	r3, #1
 8008550:	d836      	bhi.n	80085c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	889b      	ldrh	r3, [r3, #4]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fed8 	bl	8008310 <USBD_CoreFindIF>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	2bff      	cmp	r3, #255	; 0xff
 8008568:	d01d      	beq.n	80085a6 <USBD_StdItfReq+0x92>
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d11a      	bne.n	80085a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008570:	7bba      	ldrb	r2, [r7, #14]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	32ae      	adds	r2, #174	; 0xae
 8008576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00f      	beq.n	80085a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008580:	7bba      	ldrb	r2, [r7, #14]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008588:	7bba      	ldrb	r2, [r7, #14]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	; 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800859e:	e004      	b.n	80085aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085a4:	e001      	b.n	80085aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085a6:	2303      	movs	r3, #3
 80085a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	88db      	ldrh	r3, [r3, #6]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d110      	bne.n	80085d4 <USBD_StdItfReq+0xc0>
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10d      	bne.n	80085d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fdaa 	bl	8009112 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085be:	e009      	b.n	80085d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fcf7 	bl	8008fb6 <USBD_CtlError>
          break;
 80085c8:	e004      	b.n	80085d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fcf2 	bl	8008fb6 <USBD_CtlError>
          break;
 80085d2:	e000      	b.n	80085d6 <USBD_StdItfReq+0xc2>
          break;
 80085d4:	bf00      	nop
      }
      break;
 80085d6:	e004      	b.n	80085e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fceb 	bl	8008fb6 <USBD_CtlError>
      break;
 80085e0:	bf00      	nop
  }

  return ret;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	889b      	ldrh	r3, [r3, #4]
 80085fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008608:	2b40      	cmp	r3, #64	; 0x40
 800860a:	d007      	beq.n	800861c <USBD_StdEPReq+0x30>
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	f200 817f 	bhi.w	8008910 <USBD_StdEPReq+0x324>
 8008612:	2b00      	cmp	r3, #0
 8008614:	d02a      	beq.n	800866c <USBD_StdEPReq+0x80>
 8008616:	2b20      	cmp	r3, #32
 8008618:	f040 817a 	bne.w	8008910 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fe82 	bl	800832a <USBD_CoreFindEP>
 8008626:	4603      	mov	r3, r0
 8008628:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800862a:	7b7b      	ldrb	r3, [r7, #13]
 800862c:	2bff      	cmp	r3, #255	; 0xff
 800862e:	f000 8174 	beq.w	800891a <USBD_StdEPReq+0x32e>
 8008632:	7b7b      	ldrb	r3, [r7, #13]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f040 8170 	bne.w	800891a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800863a:	7b7a      	ldrb	r2, [r7, #13]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008642:	7b7a      	ldrb	r2, [r7, #13]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	32ae      	adds	r2, #174	; 0xae
 8008648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 8163 	beq.w	800891a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008654:	7b7a      	ldrb	r2, [r7, #13]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	32ae      	adds	r2, #174	; 0xae
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800866a:	e156      	b.n	800891a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b03      	cmp	r3, #3
 8008672:	d008      	beq.n	8008686 <USBD_StdEPReq+0x9a>
 8008674:	2b03      	cmp	r3, #3
 8008676:	f300 8145 	bgt.w	8008904 <USBD_StdEPReq+0x318>
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 809b 	beq.w	80087b6 <USBD_StdEPReq+0x1ca>
 8008680:	2b01      	cmp	r3, #1
 8008682:	d03c      	beq.n	80086fe <USBD_StdEPReq+0x112>
 8008684:	e13e      	b.n	8008904 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d002      	beq.n	8008698 <USBD_StdEPReq+0xac>
 8008692:	2b03      	cmp	r3, #3
 8008694:	d016      	beq.n	80086c4 <USBD_StdEPReq+0xd8>
 8008696:	e02c      	b.n	80086f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00d      	beq.n	80086ba <USBD_StdEPReq+0xce>
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b80      	cmp	r3, #128	; 0x80
 80086a2:	d00a      	beq.n	80086ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f003 feda 	bl	800c462 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ae:	2180      	movs	r1, #128	; 0x80
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f003 fed6 	bl	800c462 <USBD_LL_StallEP>
 80086b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086b8:	e020      	b.n	80086fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fc7a 	bl	8008fb6 <USBD_CtlError>
              break;
 80086c2:	e01b      	b.n	80086fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	885b      	ldrh	r3, [r3, #2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10e      	bne.n	80086ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <USBD_StdEPReq+0xfe>
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b80      	cmp	r3, #128	; 0x80
 80086d6:	d008      	beq.n	80086ea <USBD_StdEPReq+0xfe>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	88db      	ldrh	r3, [r3, #6]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f003 febc 	bl	800c462 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fd11 	bl	8009112 <USBD_CtlSendStatus>

              break;
 80086f0:	e004      	b.n	80086fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fc5e 	bl	8008fb6 <USBD_CtlError>
              break;
 80086fa:	bf00      	nop
          }
          break;
 80086fc:	e107      	b.n	800890e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d002      	beq.n	8008710 <USBD_StdEPReq+0x124>
 800870a:	2b03      	cmp	r3, #3
 800870c:	d016      	beq.n	800873c <USBD_StdEPReq+0x150>
 800870e:	e04b      	b.n	80087a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00d      	beq.n	8008732 <USBD_StdEPReq+0x146>
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b80      	cmp	r3, #128	; 0x80
 800871a:	d00a      	beq.n	8008732 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f003 fe9e 	bl	800c462 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008726:	2180      	movs	r1, #128	; 0x80
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f003 fe9a 	bl	800c462 <USBD_LL_StallEP>
 800872e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008730:	e040      	b.n	80087b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fc3e 	bl	8008fb6 <USBD_CtlError>
              break;
 800873a:	e03b      	b.n	80087b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	885b      	ldrh	r3, [r3, #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d136      	bne.n	80087b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f003 fea4 	bl	800c4a0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fcda 	bl	8009112 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fde1 	bl	800832a <USBD_CoreFindEP>
 8008768:	4603      	mov	r3, r0
 800876a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800876c:	7b7b      	ldrb	r3, [r7, #13]
 800876e:	2bff      	cmp	r3, #255	; 0xff
 8008770:	d01f      	beq.n	80087b2 <USBD_StdEPReq+0x1c6>
 8008772:	7b7b      	ldrb	r3, [r7, #13]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11c      	bne.n	80087b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008778:	7b7a      	ldrb	r2, [r7, #13]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008780:	7b7a      	ldrb	r2, [r7, #13]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	32ae      	adds	r2, #174	; 0xae
 8008786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d010      	beq.n	80087b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008790:	7b7a      	ldrb	r2, [r7, #13]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	32ae      	adds	r2, #174	; 0xae
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
 80087a2:	4603      	mov	r3, r0
 80087a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087a6:	e004      	b.n	80087b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fc03 	bl	8008fb6 <USBD_CtlError>
              break;
 80087b0:	e000      	b.n	80087b4 <USBD_StdEPReq+0x1c8>
              break;
 80087b2:	bf00      	nop
          }
          break;
 80087b4:	e0ab      	b.n	800890e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d002      	beq.n	80087c8 <USBD_StdEPReq+0x1dc>
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d032      	beq.n	800882c <USBD_StdEPReq+0x240>
 80087c6:	e097      	b.n	80088f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <USBD_StdEPReq+0x1f2>
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b80      	cmp	r3, #128	; 0x80
 80087d2:	d004      	beq.n	80087de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fbed 	bl	8008fb6 <USBD_CtlError>
                break;
 80087dc:	e091      	b.n	8008902 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	da0b      	bge.n	80087fe <USBD_StdEPReq+0x212>
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	3310      	adds	r3, #16
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	4413      	add	r3, r2
 80087fa:	3304      	adds	r3, #4
 80087fc:	e00b      	b.n	8008816 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008804:	4613      	mov	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	3304      	adds	r3, #4
 8008816:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2202      	movs	r2, #2
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc37 	bl	8009098 <USBD_CtlSendData>
              break;
 800882a:	e06a      	b.n	8008902 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800882c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008830:	2b00      	cmp	r3, #0
 8008832:	da11      	bge.n	8008858 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008834:	7bbb      	ldrb	r3, [r7, #14]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	3324      	adds	r3, #36	; 0x24
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d117      	bne.n	800887e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fbb0 	bl	8008fb6 <USBD_CtlError>
                  break;
 8008856:	e054      	b.n	8008902 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	f003 020f 	and.w	r2, r3, #15
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fb9d 	bl	8008fb6 <USBD_CtlError>
                  break;
 800887c:	e041      	b.n	8008902 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800887e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008882:	2b00      	cmp	r3, #0
 8008884:	da0b      	bge.n	800889e <USBD_StdEPReq+0x2b2>
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	3310      	adds	r3, #16
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	4413      	add	r3, r2
 800889a:	3304      	adds	r3, #4
 800889c:	e00b      	b.n	80088b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	4413      	add	r3, r2
 80088b4:	3304      	adds	r3, #4
 80088b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088b8:	7bbb      	ldrb	r3, [r7, #14]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <USBD_StdEPReq+0x2d8>
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d103      	bne.n	80088cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	e00e      	b.n	80088ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f003 fe04 	bl	800c4de <USBD_LL_IsStallEP>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e002      	b.n	80088ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2202      	movs	r2, #2
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fbd1 	bl	8009098 <USBD_CtlSendData>
              break;
 80088f6:	e004      	b.n	8008902 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fb5b 	bl	8008fb6 <USBD_CtlError>
              break;
 8008900:	bf00      	nop
          }
          break;
 8008902:	e004      	b.n	800890e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fb55 	bl	8008fb6 <USBD_CtlError>
          break;
 800890c:	bf00      	nop
      }
      break;
 800890e:	e005      	b.n	800891c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fb4f 	bl	8008fb6 <USBD_CtlError>
      break;
 8008918:	e000      	b.n	800891c <USBD_StdEPReq+0x330>
      break;
 800891a:	bf00      	nop
  }

  return ret;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
	...

08008928 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008932:	2300      	movs	r3, #0
 8008934:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	885b      	ldrh	r3, [r3, #2]
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	b29b      	uxth	r3, r3
 8008946:	3b01      	subs	r3, #1
 8008948:	2b06      	cmp	r3, #6
 800894a:	f200 8128 	bhi.w	8008b9e <USBD_GetDescriptor+0x276>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <USBD_GetDescriptor+0x2c>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	08008971 	.word	0x08008971
 8008958:	08008989 	.word	0x08008989
 800895c:	080089c9 	.word	0x080089c9
 8008960:	08008b9f 	.word	0x08008b9f
 8008964:	08008b9f 	.word	0x08008b9f
 8008968:	08008b3f 	.word	0x08008b3f
 800896c:	08008b6b 	.word	0x08008b6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	7c12      	ldrb	r2, [r2, #16]
 800897c:	f107 0108 	add.w	r1, r7, #8
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	60f8      	str	r0, [r7, #12]
      break;
 8008986:	e112      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	7c1b      	ldrb	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10d      	bne.n	80089ac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	f107 0208 	add.w	r2, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3301      	adds	r3, #1
 80089a6:	2202      	movs	r2, #2
 80089a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089aa:	e100      	b.n	8008bae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	f107 0208 	add.w	r2, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	2202      	movs	r2, #2
 80089c4:	701a      	strb	r2, [r3, #0]
      break;
 80089c6:	e0f2      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	885b      	ldrh	r3, [r3, #2]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	f200 80ac 	bhi.w	8008b2c <USBD_GetDescriptor+0x204>
 80089d4:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <USBD_GetDescriptor+0xb4>)
 80089d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089da:	bf00      	nop
 80089dc:	080089f5 	.word	0x080089f5
 80089e0:	08008a29 	.word	0x08008a29
 80089e4:	08008a5d 	.word	0x08008a5d
 80089e8:	08008a91 	.word	0x08008a91
 80089ec:	08008ac5 	.word	0x08008ac5
 80089f0:	08008af9 	.word	0x08008af9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a16:	e091      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 facb 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
          break;
 8008a26:	e089      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4a:	e077      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fab1 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5a:	e06f      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7c12      	ldrb	r2, [r2, #16]
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a7e:	e05d      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa97 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a8e:	e055      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7c12      	ldrb	r2, [r2, #16]
 8008aa8:	f107 0108 	add.w	r1, r7, #8
 8008aac:	4610      	mov	r0, r2
 8008aae:	4798      	blx	r3
 8008ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab2:	e043      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa7d 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac2:	e03b      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	7c12      	ldrb	r2, [r2, #16]
 8008adc:	f107 0108 	add.w	r1, r7, #8
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4798      	blx	r3
 8008ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ae6:	e029      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa63 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008af0:	7afb      	ldrb	r3, [r7, #11]
 8008af2:	3301      	adds	r3, #1
 8008af4:	72fb      	strb	r3, [r7, #11]
          break;
 8008af6:	e021      	b.n	8008b3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7c12      	ldrb	r2, [r2, #16]
 8008b10:	f107 0108 	add.w	r1, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b1a:	e00f      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fa49 	bl	8008fb6 <USBD_CtlError>
            err++;
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	3301      	adds	r3, #1
 8008b28:	72fb      	strb	r3, [r7, #11]
          break;
 8008b2a:	e007      	b.n	8008b3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa41 	bl	8008fb6 <USBD_CtlError>
          err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b3a:	bf00      	nop
      }
      break;
 8008b3c:	e037      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7c1b      	ldrb	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4e:	f107 0208 	add.w	r2, r7, #8
 8008b52:	4610      	mov	r0, r2
 8008b54:	4798      	blx	r3
 8008b56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b58:	e029      	b.n	8008bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa2a 	bl	8008fb6 <USBD_CtlError>
        err++;
 8008b62:	7afb      	ldrb	r3, [r7, #11]
 8008b64:	3301      	adds	r3, #1
 8008b66:	72fb      	strb	r3, [r7, #11]
      break;
 8008b68:	e021      	b.n	8008bae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	7c1b      	ldrb	r3, [r3, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10d      	bne.n	8008b8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	f107 0208 	add.w	r2, r7, #8
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4798      	blx	r3
 8008b82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	2207      	movs	r2, #7
 8008b8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b8c:	e00f      	b.n	8008bae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa10 	bl	8008fb6 <USBD_CtlError>
        err++;
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b9c:	e007      	b.n	8008bae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fa08 	bl	8008fb6 <USBD_CtlError>
      err++;
 8008ba6:	7afb      	ldrb	r3, [r7, #11]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	72fb      	strb	r3, [r7, #11]
      break;
 8008bac:	bf00      	nop
  }

  if (err != 0U)
 8008bae:	7afb      	ldrb	r3, [r7, #11]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11e      	bne.n	8008bf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	88db      	ldrh	r3, [r3, #6]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d016      	beq.n	8008bea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008bbc:	893b      	ldrh	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00e      	beq.n	8008be0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	88da      	ldrh	r2, [r3, #6]
 8008bc6:	893b      	ldrh	r3, [r7, #8]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	bf28      	it	cs
 8008bcc:	4613      	movcs	r3, r2
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bd2:	893b      	ldrh	r3, [r7, #8]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fa5d 	bl	8009098 <USBD_CtlSendData>
 8008bde:	e009      	b.n	8008bf4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f9e7 	bl	8008fb6 <USBD_CtlError>
 8008be8:	e004      	b.n	8008bf4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fa91 	bl	8009112 <USBD_CtlSendStatus>
 8008bf0:	e000      	b.n	8008bf4 <USBD_GetDescriptor+0x2cc>
    return;
 8008bf2:	bf00      	nop
  }
}
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop

08008bfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	889b      	ldrh	r3, [r3, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d131      	bne.n	8008c72 <USBD_SetAddress+0x76>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	88db      	ldrh	r3, [r3, #6]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d12d      	bne.n	8008c72 <USBD_SetAddress+0x76>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	885b      	ldrh	r3, [r3, #2]
 8008c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c1c:	d829      	bhi.n	8008c72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	885b      	ldrh	r3, [r3, #2]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d104      	bne.n	8008c40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9bc 	bl	8008fb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3e:	e01d      	b.n	8008c7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7bfa      	ldrb	r2, [r7, #15]
 8008c44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f003 fc72 	bl	800c536 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fa5d 	bl	8009112 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d004      	beq.n	8008c68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2202      	movs	r2, #2
 8008c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c66:	e009      	b.n	8008c7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c70:	e004      	b.n	8008c7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f99e 	bl	8008fb6 <USBD_CtlError>
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	bf00      	nop
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	885b      	ldrh	r3, [r3, #2]
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	4b4e      	ldr	r3, [pc, #312]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008c9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c9c:	4b4d      	ldr	r3, [pc, #308]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d905      	bls.n	8008cb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f985 	bl	8008fb6 <USBD_CtlError>
    return USBD_FAIL;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e08c      	b.n	8008dca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d002      	beq.n	8008cc2 <USBD_SetConfig+0x3e>
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d029      	beq.n	8008d14 <USBD_SetConfig+0x90>
 8008cc0:	e075      	b.n	8008dae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008cc2:	4b44      	ldr	r3, [pc, #272]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d020      	beq.n	8008d0c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008cca:	4b42      	ldr	r3, [pc, #264]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cd4:	4b3f      	ldr	r3, [pc, #252]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fe ffe6 	bl	8007cac <USBD_SetClassConfig>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d008      	beq.n	8008cfc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f962 	bl	8008fb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cfa:	e065      	b.n	8008dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fa08 	bl	8009112 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2203      	movs	r2, #3
 8008d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d0a:	e05d      	b.n	8008dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fa00 	bl	8009112 <USBD_CtlSendStatus>
      break;
 8008d12:	e059      	b.n	8008dc8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d14:	4b2f      	ldr	r3, [pc, #188]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d112      	bne.n	8008d42 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d24:	4b2b      	ldr	r3, [pc, #172]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d2e:	4b29      	ldr	r3, [pc, #164]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fe ffd5 	bl	8007ce4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f9e9 	bl	8009112 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d40:	e042      	b.n	8008dc8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d42:	4b24      	ldr	r3, [pc, #144]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d02a      	beq.n	8008da6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7fe ffc3 	bl	8007ce4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d5e:	4b1d      	ldr	r3, [pc, #116]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d68:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fe ff9c 	bl	8007cac <USBD_SetClassConfig>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00f      	beq.n	8008d9e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f918 	bl	8008fb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe ffa8 	bl	8007ce4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d9c:	e014      	b.n	8008dc8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f9b7 	bl	8009112 <USBD_CtlSendStatus>
      break;
 8008da4:	e010      	b.n	8008dc8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f9b3 	bl	8009112 <USBD_CtlSendStatus>
      break;
 8008dac:	e00c      	b.n	8008dc8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f900 	bl	8008fb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008db6:	4b07      	ldr	r3, [pc, #28]	; (8008dd4 <USBD_SetConfig+0x150>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7fe ff91 	bl	8007ce4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc6:	bf00      	nop
  }

  return ret;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000460 	.word	0x20000460

08008dd8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88db      	ldrh	r3, [r3, #6]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d004      	beq.n	8008df4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8e2 	bl	8008fb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008df2:	e023      	b.n	8008e3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	dc02      	bgt.n	8008e06 <USBD_GetConfig+0x2e>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dc03      	bgt.n	8008e0c <USBD_GetConfig+0x34>
 8008e04:	e015      	b.n	8008e32 <USBD_GetConfig+0x5a>
 8008e06:	2b03      	cmp	r3, #3
 8008e08:	d00b      	beq.n	8008e22 <USBD_GetConfig+0x4a>
 8008e0a:	e012      	b.n	8008e32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3308      	adds	r3, #8
 8008e16:	2201      	movs	r2, #1
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f93c 	bl	8009098 <USBD_CtlSendData>
        break;
 8008e20:	e00c      	b.n	8008e3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3304      	adds	r3, #4
 8008e26:	2201      	movs	r2, #1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f934 	bl	8009098 <USBD_CtlSendData>
        break;
 8008e30:	e004      	b.n	8008e3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f8be 	bl	8008fb6 <USBD_CtlError>
        break;
 8008e3a:	bf00      	nop
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d81e      	bhi.n	8008e9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	88db      	ldrh	r3, [r3, #6]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d004      	beq.n	8008e6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8a5 	bl	8008fb6 <USBD_CtlError>
        break;
 8008e6c:	e01a      	b.n	8008ea4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f043 0202 	orr.w	r2, r3, #2
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	330c      	adds	r3, #12
 8008e8e:	2202      	movs	r2, #2
 8008e90:	4619      	mov	r1, r3
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f900 	bl	8009098 <USBD_CtlSendData>
      break;
 8008e98:	e004      	b.n	8008ea4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f88a 	bl	8008fb6 <USBD_CtlError>
      break;
 8008ea2:	bf00      	nop
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d107      	bne.n	8008ece <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f923 	bl	8009112 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ecc:	e013      	b.n	8008ef6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	885b      	ldrh	r3, [r3, #2]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d10b      	bne.n	8008eee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	889b      	ldrh	r3, [r3, #4]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f913 	bl	8009112 <USBD_CtlSendStatus>
}
 8008eec:	e003      	b.n	8008ef6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f860 	bl	8008fb6 <USBD_CtlError>
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b082      	sub	sp, #8
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d80b      	bhi.n	8008f2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	885b      	ldrh	r3, [r3, #2]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d10c      	bne.n	8008f38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f8f3 	bl	8009112 <USBD_CtlSendStatus>
      }
      break;
 8008f2c:	e004      	b.n	8008f38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f840 	bl	8008fb6 <USBD_CtlError>
      break;
 8008f36:	e000      	b.n	8008f3a <USBD_ClrFeature+0x3c>
      break;
 8008f38:	bf00      	nop
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	781a      	ldrb	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff fa40 	bl	80083f2 <SWAPBYTE>
 8008f72:	4603      	mov	r3, r0
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f86:	68f8      	ldr	r0, [r7, #12]
 8008f88:	f7ff fa33 	bl	80083f2 <SWAPBYTE>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff fa26 	bl	80083f2 <SWAPBYTE>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	461a      	mov	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	80da      	strh	r2, [r3, #6]
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b082      	sub	sp, #8
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fc0:	2180      	movs	r1, #128	; 0x80
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f003 fa4d 	bl	800c462 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fc8:	2100      	movs	r1, #0
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f003 fa49 	bl	800c462 <USBD_LL_StallEP>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d036      	beq.n	800905c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ff2:	6938      	ldr	r0, [r7, #16]
 8008ff4:	f000 f836 	bl	8009064 <USBD_GetLen>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7812      	ldrb	r2, [r2, #0]
 8009010:	701a      	strb	r2, [r3, #0]
  idx++;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	3301      	adds	r3, #1
 8009016:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	2203      	movs	r2, #3
 8009020:	701a      	strb	r2, [r3, #0]
  idx++;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	3301      	adds	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009028:	e013      	b.n	8009052 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800902a:	7dfb      	ldrb	r3, [r7, #23]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	4413      	add	r3, r2
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3301      	adds	r3, #1
 800903a:	613b      	str	r3, [r7, #16]
    idx++;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	3301      	adds	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	4413      	add	r3, r2
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
    idx++;
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	3301      	adds	r3, #1
 8009050:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e7      	bne.n	800902a <USBD_GetString+0x52>
 800905a:	e000      	b.n	800905e <USBD_GetString+0x86>
    return;
 800905c:	bf00      	nop
  }
}
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009074:	e005      	b.n	8009082 <USBD_GetLen+0x1e>
  {
    len++;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	3301      	adds	r3, #1
 800907a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3301      	adds	r3, #1
 8009080:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1f5      	bne.n	8009076 <USBD_GetLen+0x12>
  }

  return len;
 800908a:	7bfb      	ldrb	r3, [r7, #15]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	2100      	movs	r1, #0
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f003 fa58 	bl	800c574 <USBD_LL_Transmit>

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	2100      	movs	r1, #0
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f003 fa47 	bl	800c574 <USBD_LL_Transmit>

  return USBD_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	2100      	movs	r1, #0
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f003 fa57 	bl	800c5b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2204      	movs	r2, #4
 800911e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009122:	2300      	movs	r3, #0
 8009124:	2200      	movs	r2, #0
 8009126:	2100      	movs	r1, #0
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f003 fa23 	bl	800c574 <USBD_LL_Transmit>

  return USBD_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2205      	movs	r2, #5
 8009144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009148:	2300      	movs	r3, #0
 800914a:	2200      	movs	r2, #0
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f003 fa31 	bl	800c5b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <__NVIC_SetPriority>:
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	4603      	mov	r3, r0
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800916c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009170:	2b00      	cmp	r3, #0
 8009172:	db0a      	blt.n	800918a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	b2da      	uxtb	r2, r3
 8009178:	490c      	ldr	r1, [pc, #48]	; (80091ac <__NVIC_SetPriority+0x4c>)
 800917a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800917e:	0112      	lsls	r2, r2, #4
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	440b      	add	r3, r1
 8009184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009188:	e00a      	b.n	80091a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	b2da      	uxtb	r2, r3
 800918e:	4908      	ldr	r1, [pc, #32]	; (80091b0 <__NVIC_SetPriority+0x50>)
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	f003 030f 	and.w	r3, r3, #15
 8009196:	3b04      	subs	r3, #4
 8009198:	0112      	lsls	r2, r2, #4
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	440b      	add	r3, r1
 800919e:	761a      	strb	r2, [r3, #24]
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr
 80091ac:	e000e100 	.word	0xe000e100
 80091b0:	e000ed00 	.word	0xe000ed00

080091b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <SysTick_Handler+0x1c>)
 80091ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091bc:	f001 fd28 	bl	800ac10 <xTaskGetSchedulerState>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d001      	beq.n	80091ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091c6:	f002 fb0f 	bl	800b7e8 <xPortSysTickHandler>
  }
}
 80091ca:	bf00      	nop
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	e000e010 	.word	0xe000e010

080091d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091d8:	2100      	movs	r1, #0
 80091da:	f06f 0004 	mvn.w	r0, #4
 80091de:	f7ff ffbf 	bl	8009160 <__NVIC_SetPriority>
#endif
}
 80091e2:	bf00      	nop
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ee:	f3ef 8305 	mrs	r3, IPSR
 80091f2:	603b      	str	r3, [r7, #0]
  return(result);
 80091f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80091fa:	f06f 0305 	mvn.w	r3, #5
 80091fe:	607b      	str	r3, [r7, #4]
 8009200:	e00c      	b.n	800921c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009202:	4b0a      	ldr	r3, [pc, #40]	; (800922c <osKernelInitialize+0x44>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d105      	bne.n	8009216 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800920a:	4b08      	ldr	r3, [pc, #32]	; (800922c <osKernelInitialize+0x44>)
 800920c:	2201      	movs	r2, #1
 800920e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009210:	2300      	movs	r3, #0
 8009212:	607b      	str	r3, [r7, #4]
 8009214:	e002      	b.n	800921c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009216:	f04f 33ff 	mov.w	r3, #4294967295
 800921a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800921c:	687b      	ldr	r3, [r7, #4]
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	20000464 	.word	0x20000464

08009230 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009236:	f3ef 8305 	mrs	r3, IPSR
 800923a:	603b      	str	r3, [r7, #0]
  return(result);
 800923c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009242:	f06f 0305 	mvn.w	r3, #5
 8009246:	607b      	str	r3, [r7, #4]
 8009248:	e010      	b.n	800926c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800924a:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <osKernelStart+0x48>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d109      	bne.n	8009266 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009252:	f7ff ffbf 	bl	80091d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <osKernelStart+0x48>)
 8009258:	2202      	movs	r2, #2
 800925a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800925c:	f001 f87c 	bl	800a358 <vTaskStartScheduler>
      stat = osOK;
 8009260:	2300      	movs	r3, #0
 8009262:	607b      	str	r3, [r7, #4]
 8009264:	e002      	b.n	800926c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009266:	f04f 33ff 	mov.w	r3, #4294967295
 800926a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800926c:	687b      	ldr	r3, [r7, #4]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000464 	.word	0x20000464

0800927c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b08e      	sub	sp, #56	; 0x38
 8009280:	af04      	add	r7, sp, #16
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800928c:	f3ef 8305 	mrs	r3, IPSR
 8009290:	617b      	str	r3, [r7, #20]
  return(result);
 8009292:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009294:	2b00      	cmp	r3, #0
 8009296:	d17e      	bne.n	8009396 <osThreadNew+0x11a>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d07b      	beq.n	8009396 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800929e:	2380      	movs	r3, #128	; 0x80
 80092a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092a2:	2318      	movs	r3, #24
 80092a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80092aa:	f04f 33ff 	mov.w	r3, #4294967295
 80092ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d045      	beq.n	8009342 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <osThreadNew+0x48>
        name = attr->name;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d008      	beq.n	80092ea <osThreadNew+0x6e>
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	2b38      	cmp	r3, #56	; 0x38
 80092dc:	d805      	bhi.n	80092ea <osThreadNew+0x6e>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <osThreadNew+0x72>
        return (NULL);
 80092ea:	2300      	movs	r3, #0
 80092ec:	e054      	b.n	8009398 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	089b      	lsrs	r3, r3, #2
 80092fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00e      	beq.n	8009324 <osThreadNew+0xa8>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	2ba7      	cmp	r3, #167	; 0xa7
 800930c:	d90a      	bls.n	8009324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <osThreadNew+0xa8>
        mem = 1;
 800931e:	2301      	movs	r3, #1
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	e010      	b.n	8009346 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10c      	bne.n	8009346 <osThreadNew+0xca>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d108      	bne.n	8009346 <osThreadNew+0xca>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d104      	bne.n	8009346 <osThreadNew+0xca>
          mem = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	61bb      	str	r3, [r7, #24]
 8009340:	e001      	b.n	8009346 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d110      	bne.n	800936e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009354:	9202      	str	r2, [sp, #8]
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6a3a      	ldr	r2, [r7, #32]
 8009360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fe0c 	bl	8009f80 <xTaskCreateStatic>
 8009368:	4603      	mov	r3, r0
 800936a:	613b      	str	r3, [r7, #16]
 800936c:	e013      	b.n	8009396 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d110      	bne.n	8009396 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	b29a      	uxth	r2, r3
 8009378:	f107 0310 	add.w	r3, r7, #16
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 fe57 	bl	800a03a <xTaskCreate>
 800938c:	4603      	mov	r3, r0
 800938e:	2b01      	cmp	r3, #1
 8009390:	d001      	beq.n	8009396 <osThreadNew+0x11a>
            hTask = NULL;
 8009392:	2300      	movs	r3, #0
 8009394:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009396:	693b      	ldr	r3, [r7, #16]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3728      	adds	r7, #40	; 0x28
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093a8:	f3ef 8305 	mrs	r3, IPSR
 80093ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80093ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d003      	beq.n	80093bc <osDelay+0x1c>
    stat = osErrorISR;
 80093b4:	f06f 0305 	mvn.w	r3, #5
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	e007      	b.n	80093cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 ff92 	bl	800a2f0 <vTaskDelay>
    }
  }

  return (stat);
 80093cc:	68fb      	ldr	r3, [r7, #12]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
	...

080093d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4a07      	ldr	r2, [pc, #28]	; (8009404 <vApplicationGetIdleTaskMemory+0x2c>)
 80093e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	4a06      	ldr	r2, [pc, #24]	; (8009408 <vApplicationGetIdleTaskMemory+0x30>)
 80093ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2280      	movs	r2, #128	; 0x80
 80093f4:	601a      	str	r2, [r3, #0]
}
 80093f6:	bf00      	nop
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000468 	.word	0x20000468
 8009408:	20000510 	.word	0x20000510

0800940c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4a07      	ldr	r2, [pc, #28]	; (8009438 <vApplicationGetTimerTaskMemory+0x2c>)
 800941c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4a06      	ldr	r2, [pc, #24]	; (800943c <vApplicationGetTimerTaskMemory+0x30>)
 8009422:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800942a:	601a      	str	r2, [r3, #0]
}
 800942c:	bf00      	nop
 800942e:	3714      	adds	r7, #20
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	20000710 	.word	0x20000710
 800943c:	200007b8 	.word	0x200007b8

08009440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f103 0208 	add.w	r2, r3, #8
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f04f 32ff 	mov.w	r2, #4294967295
 8009458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f103 0208 	add.w	r2, r3, #8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f103 0208 	add.w	r2, r3, #8
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800948e:	bf00      	nop
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
}
 80094d6:	bf00      	nop
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094e2:	b480      	push	{r7}
 80094e4:	b085      	sub	sp, #20
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f8:	d103      	bne.n	8009502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	e00c      	b.n	800951c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3308      	adds	r3, #8
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	e002      	b.n	8009510 <vListInsert+0x2e>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	429a      	cmp	r2, r3
 800951a:	d2f6      	bcs.n	800950a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
}
 8009548:	bf00      	nop
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6892      	ldr	r2, [r2, #8]
 800956a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6852      	ldr	r2, [r2, #4]
 8009574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	429a      	cmp	r2, r3
 800957e:	d103      	bne.n	8009588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	1e5a      	subs	r2, r3, #1
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095d2:	f002 f877 	bl	800b6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095de:	68f9      	ldr	r1, [r7, #12]
 80095e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095e2:	fb01 f303 	mul.w	r3, r1, r3
 80095e6:	441a      	add	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	3b01      	subs	r3, #1
 8009604:	68f9      	ldr	r1, [r7, #12]
 8009606:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009608:	fb01 f303 	mul.w	r3, r1, r3
 800960c:	441a      	add	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	22ff      	movs	r2, #255	; 0xff
 8009616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	22ff      	movs	r2, #255	; 0xff
 800961e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d114      	bne.n	8009652 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d01a      	beq.n	8009666 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3310      	adds	r3, #16
 8009634:	4618      	mov	r0, r3
 8009636:	f001 f929 	bl	800a88c <xTaskRemoveFromEventList>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d012      	beq.n	8009666 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <xQueueGenericReset+0xcc>)
 8009642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	e009      	b.n	8009666 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3310      	adds	r3, #16
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fef2 	bl	8009440 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3324      	adds	r3, #36	; 0x24
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff feed 	bl	8009440 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009666:	f002 f85d 	bl	800b724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800966a:	2301      	movs	r3, #1
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	e000ed04 	.word	0xe000ed04

08009678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08e      	sub	sp, #56	; 0x38
 800967c:	af02      	add	r7, sp, #8
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10a      	bne.n	80096a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800969e:	bf00      	nop
 80096a0:	e7fe      	b.n	80096a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10a      	bne.n	80096be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096ba:	bf00      	nop
 80096bc:	e7fe      	b.n	80096bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <xQueueGenericCreateStatic+0x52>
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <xQueueGenericCreateStatic+0x56>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <xQueueGenericCreateStatic+0x58>
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	623b      	str	r3, [r7, #32]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <xQueueGenericCreateStatic+0x7e>
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <xQueueGenericCreateStatic+0x82>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <xQueueGenericCreateStatic+0x84>
 80096fa:	2300      	movs	r3, #0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	61fb      	str	r3, [r7, #28]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009716:	2350      	movs	r3, #80	; 0x50
 8009718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b50      	cmp	r3, #80	; 0x50
 800971e:	d00a      	beq.n	8009736 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	61bb      	str	r3, [r7, #24]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009736:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00d      	beq.n	800975e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800974a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	4613      	mov	r3, r2
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f805 	bl	8009768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009760:	4618      	mov	r0, r3
 8009762:	3730      	adds	r7, #48	; 0x30
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e002      	b.n	800978a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009796:	2101      	movs	r1, #1
 8009798:	69b8      	ldr	r0, [r7, #24]
 800979a:	f7ff ff05 	bl	80095a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08e      	sub	sp, #56	; 0x38
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097be:	2300      	movs	r3, #0
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10a      	bne.n	80097e2 <xQueueGenericSend+0x32>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d103      	bne.n	80097f0 <xQueueGenericSend+0x40>
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <xQueueGenericSend+0x44>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <xQueueGenericSend+0x46>
 80097f4:	2300      	movs	r3, #0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10a      	bne.n	8009810 <xQueueGenericSend+0x60>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2b02      	cmp	r3, #2
 8009814:	d103      	bne.n	800981e <xQueueGenericSend+0x6e>
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <xQueueGenericSend+0x72>
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <xQueueGenericSend+0x74>
 8009822:	2300      	movs	r3, #0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <xQueueGenericSend+0x8e>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	623b      	str	r3, [r7, #32]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800983e:	f001 f9e7 	bl	800ac10 <xTaskGetSchedulerState>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <xQueueGenericSend+0x9e>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <xQueueGenericSend+0xa2>
 800984e:	2301      	movs	r3, #1
 8009850:	e000      	b.n	8009854 <xQueueGenericSend+0xa4>
 8009852:	2300      	movs	r3, #0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <xQueueGenericSend+0xbe>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	61fb      	str	r3, [r7, #28]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800986e:	f001 ff29 	bl	800b6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987a:	429a      	cmp	r2, r3
 800987c:	d302      	bcc.n	8009884 <xQueueGenericSend+0xd4>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b02      	cmp	r3, #2
 8009882:	d129      	bne.n	80098d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800988a:	f000 fa0b 	bl	8009ca4 <prvCopyDataToQueue>
 800988e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	d010      	beq.n	80098ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989a:	3324      	adds	r3, #36	; 0x24
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fff5 	bl	800a88c <xTaskRemoveFromEventList>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d013      	beq.n	80098d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098a8:	4b3f      	ldr	r3, [pc, #252]	; (80099a8 <xQueueGenericSend+0x1f8>)
 80098aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ae:	601a      	str	r2, [r3, #0]
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	e00a      	b.n	80098d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d007      	beq.n	80098d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098c0:	4b39      	ldr	r3, [pc, #228]	; (80099a8 <xQueueGenericSend+0x1f8>)
 80098c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098d0:	f001 ff28 	bl	800b724 <vPortExitCritical>
				return pdPASS;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e063      	b.n	80099a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098de:	f001 ff21 	bl	800b724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	e05c      	b.n	80099a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d106      	bne.n	80098fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098ec:	f107 0314 	add.w	r3, r7, #20
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 f82f 	bl	800a954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098f6:	2301      	movs	r3, #1
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098fa:	f001 ff13 	bl	800b724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098fe:	f000 fd9b 	bl	800a438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009902:	f001 fedf 	bl	800b6c4 <vPortEnterCritical>
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800990c:	b25b      	sxtb	r3, r3
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d103      	bne.n	800991c <xQueueGenericSend+0x16c>
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800991c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009922:	b25b      	sxtb	r3, r3
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d103      	bne.n	8009932 <xQueueGenericSend+0x182>
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009932:	f001 fef7 	bl	800b724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009936:	1d3a      	adds	r2, r7, #4
 8009938:	f107 0314 	add.w	r3, r7, #20
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f001 f81e 	bl	800a980 <xTaskCheckForTimeOut>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d124      	bne.n	8009994 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800994a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800994c:	f000 faa2 	bl	8009e94 <prvIsQueueFull>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d018      	beq.n	8009988 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	3310      	adds	r3, #16
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f000 ff44 	bl	800a7ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009966:	f000 fa2d 	bl	8009dc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800996a:	f000 fd73 	bl	800a454 <xTaskResumeAll>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	f47f af7c 	bne.w	800986e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <xQueueGenericSend+0x1f8>)
 8009978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	e772      	b.n	800986e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800998a:	f000 fa1b 	bl	8009dc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800998e:	f000 fd61 	bl	800a454 <xTaskResumeAll>
 8009992:	e76c      	b.n	800986e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009996:	f000 fa15 	bl	8009dc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800999a:	f000 fd5b 	bl	800a454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800999e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3738      	adds	r7, #56	; 0x38
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed04 	.word	0xe000ed04

080099ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b090      	sub	sp, #64	; 0x40
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80099c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c8:	f383 8811 	msr	BASEPRI, r3
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099d6:	bf00      	nop
 80099d8:	e7fe      	b.n	80099d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <xQueueGenericSendFromISR+0x3c>
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <xQueueGenericSendFromISR+0x40>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e000      	b.n	80099ee <xQueueGenericSendFromISR+0x42>
 80099ec:	2300      	movs	r3, #0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d103      	bne.n	8009a16 <xQueueGenericSendFromISR+0x6a>
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d101      	bne.n	8009a1a <xQueueGenericSendFromISR+0x6e>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e000      	b.n	8009a1c <xQueueGenericSendFromISR+0x70>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	623b      	str	r3, [r7, #32]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a36:	f001 ff27 	bl	800b888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	61fa      	str	r2, [r7, #28]
 8009a50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d302      	bcc.n	8009a68 <xQueueGenericSendFromISR+0xbc>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d12f      	bne.n	8009ac8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	68b9      	ldr	r1, [r7, #8]
 8009a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a7e:	f000 f911 	bl	8009ca4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8a:	d112      	bne.n	8009ab2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d016      	beq.n	8009ac2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	3324      	adds	r3, #36	; 0x24
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 fef7 	bl	800a88c <xTaskRemoveFromEventList>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00e      	beq.n	8009ac2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00b      	beq.n	8009ac2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	e007      	b.n	8009ac2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ab2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	b25a      	sxtb	r2, r3
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009ac6:	e001      	b.n	8009acc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ace:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ad6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3740      	adds	r7, #64	; 0x40
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08c      	sub	sp, #48	; 0x30
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10a      	bne.n	8009b14 <xQueueReceive+0x30>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	623b      	str	r3, [r7, #32]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <xQueueReceive+0x3e>
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <xQueueReceive+0x42>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e000      	b.n	8009b28 <xQueueReceive+0x44>
 8009b26:	2300      	movs	r3, #0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <xQueueReceive+0x5e>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	61fb      	str	r3, [r7, #28]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b42:	f001 f865 	bl	800ac10 <xTaskGetSchedulerState>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d102      	bne.n	8009b52 <xQueueReceive+0x6e>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <xQueueReceive+0x72>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <xQueueReceive+0x74>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10a      	bne.n	8009b72 <xQueueReceive+0x8e>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	61bb      	str	r3, [r7, #24]
}
 8009b6e:	bf00      	nop
 8009b70:	e7fe      	b.n	8009b70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b72:	f001 fda7 	bl	800b6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01f      	beq.n	8009bc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b86:	f000 f8f7 	bl	8009d78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	1e5a      	subs	r2, r3, #1
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00f      	beq.n	8009bba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	3310      	adds	r3, #16
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fe74 	bl	800a88c <xTaskRemoveFromEventList>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d007      	beq.n	8009bba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009baa:	4b3d      	ldr	r3, [pc, #244]	; (8009ca0 <xQueueReceive+0x1bc>)
 8009bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bba:	f001 fdb3 	bl	800b724 <vPortExitCritical>
				return pdPASS;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e069      	b.n	8009c96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bc8:	f001 fdac 	bl	800b724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e062      	b.n	8009c96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bd6:	f107 0310 	add.w	r3, r7, #16
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 feba 	bl	800a954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009be0:	2301      	movs	r3, #1
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009be4:	f001 fd9e 	bl	800b724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009be8:	f000 fc26 	bl	800a438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bec:	f001 fd6a 	bl	800b6c4 <vPortEnterCritical>
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bf6:	b25b      	sxtb	r3, r3
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfc:	d103      	bne.n	8009c06 <xQueueReceive+0x122>
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c0c:	b25b      	sxtb	r3, r3
 8009c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c12:	d103      	bne.n	8009c1c <xQueueReceive+0x138>
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c1c:	f001 fd82 	bl	800b724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c20:	1d3a      	adds	r2, r7, #4
 8009c22:	f107 0310 	add.w	r3, r7, #16
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 fea9 	bl	800a980 <xTaskCheckForTimeOut>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d123      	bne.n	8009c7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c36:	f000 f917 	bl	8009e68 <prvIsQueueEmpty>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d017      	beq.n	8009c70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	3324      	adds	r3, #36	; 0x24
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	4611      	mov	r1, r2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fdcf 	bl	800a7ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c50:	f000 f8b8 	bl	8009dc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c54:	f000 fbfe 	bl	800a454 <xTaskResumeAll>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d189      	bne.n	8009b72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c5e:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <xQueueReceive+0x1bc>)
 8009c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c64:	601a      	str	r2, [r3, #0]
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	e780      	b.n	8009b72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c72:	f000 f8a7 	bl	8009dc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c76:	f000 fbed 	bl	800a454 <xTaskResumeAll>
 8009c7a:	e77a      	b.n	8009b72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7e:	f000 f8a1 	bl	8009dc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c82:	f000 fbe7 	bl	800a454 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c88:	f000 f8ee 	bl	8009e68 <prvIsQueueEmpty>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f43f af6f 	beq.w	8009b72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3730      	adds	r7, #48	; 0x30
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10d      	bne.n	8009cde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d14d      	bne.n	8009d66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 ffbc 	bl	800ac4c <xTaskPriorityDisinherit>
 8009cd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	609a      	str	r2, [r3, #8]
 8009cdc:	e043      	b.n	8009d66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d119      	bne.n	8009d18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6858      	ldr	r0, [r3, #4]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	461a      	mov	r2, r3
 8009cee:	68b9      	ldr	r1, [r7, #8]
 8009cf0:	f002 fd5e 	bl	800c7b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfc:	441a      	add	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d32b      	bcc.n	8009d66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	605a      	str	r2, [r3, #4]
 8009d16:	e026      	b.n	8009d66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	68d8      	ldr	r0, [r3, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	461a      	mov	r2, r3
 8009d22:	68b9      	ldr	r1, [r7, #8]
 8009d24:	f002 fd44 	bl	800c7b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68da      	ldr	r2, [r3, #12]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	425b      	negs	r3, r3
 8009d32:	441a      	add	r2, r3
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d207      	bcs.n	8009d54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4c:	425b      	negs	r3, r3
 8009d4e:	441a      	add	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	d105      	bne.n	8009d66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	3b01      	subs	r3, #1
 8009d64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d6e:	697b      	ldr	r3, [r7, #20]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3718      	adds	r7, #24
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d018      	beq.n	8009dbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68da      	ldr	r2, [r3, #12]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	441a      	add	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d303      	bcc.n	8009dac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68d9      	ldr	r1, [r3, #12]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	461a      	mov	r2, r3
 8009db6:	6838      	ldr	r0, [r7, #0]
 8009db8:	f002 fcfa 	bl	800c7b0 <memcpy>
	}
}
 8009dbc:	bf00      	nop
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dcc:	f001 fc7a 	bl	800b6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dd8:	e011      	b.n	8009dfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d012      	beq.n	8009e08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3324      	adds	r3, #36	; 0x24
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 fd50 	bl	800a88c <xTaskRemoveFromEventList>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009df2:	f000 fe27 	bl	800aa44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dce9      	bgt.n	8009dda <prvUnlockQueue+0x16>
 8009e06:	e000      	b.n	8009e0a <prvUnlockQueue+0x46>
					break;
 8009e08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	22ff      	movs	r2, #255	; 0xff
 8009e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e12:	f001 fc87 	bl	800b724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e16:	f001 fc55 	bl	800b6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e22:	e011      	b.n	8009e48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d012      	beq.n	8009e52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3310      	adds	r3, #16
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 fd2b 	bl	800a88c <xTaskRemoveFromEventList>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e3c:	f000 fe02 	bl	800aa44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dce9      	bgt.n	8009e24 <prvUnlockQueue+0x60>
 8009e50:	e000      	b.n	8009e54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	22ff      	movs	r2, #255	; 0xff
 8009e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e5c:	f001 fc62 	bl	800b724 <vPortExitCritical>
}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e70:	f001 fc28 	bl	800b6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	e001      	b.n	8009e86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e82:	2300      	movs	r3, #0
 8009e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e86:	f001 fc4d 	bl	800b724 <vPortExitCritical>

	return xReturn;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e9c:	f001 fc12 	bl	800b6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d102      	bne.n	8009eb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009eac:	2301      	movs	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e001      	b.n	8009eb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eb6:	f001 fc35 	bl	800b724 <vPortExitCritical>

	return xReturn;
 8009eba:	68fb      	ldr	r3, [r7, #12]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e014      	b.n	8009efe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ed4:	4a0f      	ldr	r2, [pc, #60]	; (8009f14 <vQueueAddToRegistry+0x50>)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10b      	bne.n	8009ef8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ee0:	490c      	ldr	r1, [pc, #48]	; (8009f14 <vQueueAddToRegistry+0x50>)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009eea:	4a0a      	ldr	r2, [pc, #40]	; (8009f14 <vQueueAddToRegistry+0x50>)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ef6:	e006      	b.n	8009f06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b07      	cmp	r3, #7
 8009f02:	d9e7      	bls.n	8009ed4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20000bb8 	.word	0x20000bb8

08009f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f28:	f001 fbcc 	bl	800b6c4 <vPortEnterCritical>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f32:	b25b      	sxtb	r3, r3
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d103      	bne.n	8009f42 <vQueueWaitForMessageRestricted+0x2a>
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f48:	b25b      	sxtb	r3, r3
 8009f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4e:	d103      	bne.n	8009f58 <vQueueWaitForMessageRestricted+0x40>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f58:	f001 fbe4 	bl	800b724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	3324      	adds	r3, #36	; 0x24
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 fc61 	bl	800a834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f72:	6978      	ldr	r0, [r7, #20]
 8009f74:	f7ff ff26 	bl	8009dc4 <prvUnlockQueue>
	}
 8009f78:	bf00      	nop
 8009f7a:	3718      	adds	r7, #24
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08e      	sub	sp, #56	; 0x38
 8009f84:	af04      	add	r7, sp, #16
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	623b      	str	r3, [r7, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	61fb      	str	r3, [r7, #28]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fc6:	23a8      	movs	r3, #168	; 0xa8
 8009fc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	2ba8      	cmp	r3, #168	; 0xa8
 8009fce:	d00a      	beq.n	8009fe6 <xTaskCreateStatic+0x66>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	61bb      	str	r3, [r7, #24]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009fe6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d01e      	beq.n	800a02c <xTaskCreateStatic+0xac>
 8009fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01b      	beq.n	800a02c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ffc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	2202      	movs	r2, #2
 800a002:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a006:	2300      	movs	r3, #0
 800a008:	9303      	str	r3, [sp, #12]
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	9302      	str	r3, [sp, #8]
 800a00e:	f107 0314 	add.w	r3, r7, #20
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 f850 	bl	800a0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a026:	f000 f8f3 	bl	800a210 <prvAddNewTaskToReadyList>
 800a02a:	e001      	b.n	800a030 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a02c:	2300      	movs	r3, #0
 800a02e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a030:	697b      	ldr	r3, [r7, #20]
	}
 800a032:	4618      	mov	r0, r3
 800a034:	3728      	adds	r7, #40	; 0x28
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b08c      	sub	sp, #48	; 0x30
 800a03e:	af04      	add	r7, sp, #16
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	603b      	str	r3, [r7, #0]
 800a046:	4613      	mov	r3, r2
 800a048:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 fc5a 	bl	800b908 <pvPortMalloc>
 800a054:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00e      	beq.n	800a07a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a05c:	20a8      	movs	r0, #168	; 0xa8
 800a05e:	f001 fc53 	bl	800b908 <pvPortMalloc>
 800a062:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d003      	beq.n	800a072 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	631a      	str	r2, [r3, #48]	; 0x30
 800a070:	e005      	b.n	800a07e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a072:	6978      	ldr	r0, [r7, #20]
 800a074:	f001 fd14 	bl	800baa0 <vPortFree>
 800a078:	e001      	b.n	800a07e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d017      	beq.n	800a0b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a08c:	88fa      	ldrh	r2, [r7, #6]
 800a08e:	2300      	movs	r3, #0
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	9302      	str	r3, [sp, #8]
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 f80e 	bl	800a0c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0a8:	69f8      	ldr	r0, [r7, #28]
 800a0aa:	f000 f8b1 	bl	800a210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	61bb      	str	r3, [r7, #24]
 800a0b2:	e002      	b.n	800a0ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3720      	adds	r7, #32
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b088      	sub	sp, #32
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	461a      	mov	r2, r3
 800a0dc:	21a5      	movs	r1, #165	; 0xa5
 800a0de:	f002 fae3 	bl	800c6a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f023 0307 	bic.w	r3, r3, #7
 800a0fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	617b      	str	r3, [r7, #20]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d01f      	beq.n	800a162 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a122:	2300      	movs	r3, #0
 800a124:	61fb      	str	r3, [r7, #28]
 800a126:	e012      	b.n	800a14e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	4413      	add	r3, r2
 800a12e:	7819      	ldrb	r1, [r3, #0]
 800a130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	4413      	add	r3, r2
 800a136:	3334      	adds	r3, #52	; 0x34
 800a138:	460a      	mov	r2, r1
 800a13a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	4413      	add	r3, r2
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d006      	beq.n	800a156 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	3301      	adds	r3, #1
 800a14c:	61fb      	str	r3, [r7, #28]
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	2b0f      	cmp	r3, #15
 800a152:	d9e9      	bls.n	800a128 <prvInitialiseNewTask+0x64>
 800a154:	e000      	b.n	800a158 <prvInitialiseNewTask+0x94>
			{
				break;
 800a156:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a160:	e003      	b.n	800a16a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	2b37      	cmp	r3, #55	; 0x37
 800a16e:	d901      	bls.n	800a174 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a170:	2337      	movs	r3, #55	; 0x37
 800a172:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a178:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a17e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	2200      	movs	r2, #0
 800a184:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	3304      	adds	r3, #4
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff f978 	bl	8009480 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	3318      	adds	r3, #24
 800a194:	4618      	mov	r0, r3
 800a196:	f7ff f973 	bl	8009480 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a19e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	3354      	adds	r3, #84	; 0x54
 800a1c4:	224c      	movs	r2, #76	; 0x4c
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f002 fa6d 	bl	800c6a8 <memset>
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	4a0c      	ldr	r2, [pc, #48]	; (800a204 <prvInitialiseNewTask+0x140>)
 800a1d2:	659a      	str	r2, [r3, #88]	; 0x58
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	4a0c      	ldr	r2, [pc, #48]	; (800a208 <prvInitialiseNewTask+0x144>)
 800a1d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	4a0b      	ldr	r2, [pc, #44]	; (800a20c <prvInitialiseNewTask+0x148>)
 800a1de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	68f9      	ldr	r1, [r7, #12]
 800a1e4:	69b8      	ldr	r0, [r7, #24]
 800a1e6:	f001 f941 	bl	800b46c <pxPortInitialiseStack>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1fc:	bf00      	nop
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20005aac 	.word	0x20005aac
 800a208:	20005b14 	.word	0x20005b14
 800a20c:	20005b7c 	.word	0x20005b7c

0800a210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a218:	f001 fa54 	bl	800b6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a21c:	4b2d      	ldr	r3, [pc, #180]	; (800a2d4 <prvAddNewTaskToReadyList+0xc4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	4a2c      	ldr	r2, [pc, #176]	; (800a2d4 <prvAddNewTaskToReadyList+0xc4>)
 800a224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a226:	4b2c      	ldr	r3, [pc, #176]	; (800a2d8 <prvAddNewTaskToReadyList+0xc8>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d109      	bne.n	800a242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a22e:	4a2a      	ldr	r2, [pc, #168]	; (800a2d8 <prvAddNewTaskToReadyList+0xc8>)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a234:	4b27      	ldr	r3, [pc, #156]	; (800a2d4 <prvAddNewTaskToReadyList+0xc4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d110      	bne.n	800a25e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a23c:	f000 fc26 	bl	800aa8c <prvInitialiseTaskLists>
 800a240:	e00d      	b.n	800a25e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a242:	4b26      	ldr	r3, [pc, #152]	; (800a2dc <prvAddNewTaskToReadyList+0xcc>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a24a:	4b23      	ldr	r3, [pc, #140]	; (800a2d8 <prvAddNewTaskToReadyList+0xc8>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a254:	429a      	cmp	r2, r3
 800a256:	d802      	bhi.n	800a25e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a258:	4a1f      	ldr	r2, [pc, #124]	; (800a2d8 <prvAddNewTaskToReadyList+0xc8>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a25e:	4b20      	ldr	r3, [pc, #128]	; (800a2e0 <prvAddNewTaskToReadyList+0xd0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a1e      	ldr	r2, [pc, #120]	; (800a2e0 <prvAddNewTaskToReadyList+0xd0>)
 800a266:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a268:	4b1d      	ldr	r3, [pc, #116]	; (800a2e0 <prvAddNewTaskToReadyList+0xd0>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a274:	4b1b      	ldr	r3, [pc, #108]	; (800a2e4 <prvAddNewTaskToReadyList+0xd4>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d903      	bls.n	800a284 <prvAddNewTaskToReadyList+0x74>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	4a18      	ldr	r2, [pc, #96]	; (800a2e4 <prvAddNewTaskToReadyList+0xd4>)
 800a282:	6013      	str	r3, [r2, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a288:	4613      	mov	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	4a15      	ldr	r2, [pc, #84]	; (800a2e8 <prvAddNewTaskToReadyList+0xd8>)
 800a292:	441a      	add	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f7ff f8fd 	bl	800949a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2a0:	f001 fa40 	bl	800b724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2a4:	4b0d      	ldr	r3, [pc, #52]	; (800a2dc <prvAddNewTaskToReadyList+0xcc>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00e      	beq.n	800a2ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <prvAddNewTaskToReadyList+0xc8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d207      	bcs.n	800a2ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2ba:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <prvAddNewTaskToReadyList+0xdc>)
 800a2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	200010cc 	.word	0x200010cc
 800a2d8:	20000bf8 	.word	0x20000bf8
 800a2dc:	200010d8 	.word	0x200010d8
 800a2e0:	200010e8 	.word	0x200010e8
 800a2e4:	200010d4 	.word	0x200010d4
 800a2e8:	20000bfc 	.word	0x20000bfc
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d017      	beq.n	800a332 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a302:	4b13      	ldr	r3, [pc, #76]	; (800a350 <vTaskDelay+0x60>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <vTaskDelay+0x30>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	60bb      	str	r3, [r7, #8]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a320:	f000 f88a 	bl	800a438 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a324:	2100      	movs	r1, #0
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fcfe 	bl	800ad28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a32c:	f000 f892 	bl	800a454 <xTaskResumeAll>
 800a330:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d107      	bne.n	800a348 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a338:	4b06      	ldr	r3, [pc, #24]	; (800a354 <vTaskDelay+0x64>)
 800a33a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a348:	bf00      	nop
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	200010f4 	.word	0x200010f4
 800a354:	e000ed04 	.word	0xe000ed04

0800a358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	; 0x28
 800a35c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a366:	463a      	mov	r2, r7
 800a368:	1d39      	adds	r1, r7, #4
 800a36a:	f107 0308 	add.w	r3, r7, #8
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff f832 	bl	80093d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	9202      	str	r2, [sp, #8]
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	2300      	movs	r3, #0
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	2300      	movs	r3, #0
 800a384:	460a      	mov	r2, r1
 800a386:	4924      	ldr	r1, [pc, #144]	; (800a418 <vTaskStartScheduler+0xc0>)
 800a388:	4824      	ldr	r0, [pc, #144]	; (800a41c <vTaskStartScheduler+0xc4>)
 800a38a:	f7ff fdf9 	bl	8009f80 <xTaskCreateStatic>
 800a38e:	4603      	mov	r3, r0
 800a390:	4a23      	ldr	r2, [pc, #140]	; (800a420 <vTaskStartScheduler+0xc8>)
 800a392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a394:	4b22      	ldr	r3, [pc, #136]	; (800a420 <vTaskStartScheduler+0xc8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a39c:	2301      	movs	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e001      	b.n	800a3a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d102      	bne.n	800a3b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3ac:	f000 fd10 	bl	800add0 <xTimerCreateTimerTask>
 800a3b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d11b      	bne.n	800a3f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	613b      	str	r3, [r7, #16]
}
 800a3ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3cc:	4b15      	ldr	r3, [pc, #84]	; (800a424 <vTaskStartScheduler+0xcc>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3354      	adds	r3, #84	; 0x54
 800a3d2:	4a15      	ldr	r2, [pc, #84]	; (800a428 <vTaskStartScheduler+0xd0>)
 800a3d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3d6:	4b15      	ldr	r3, [pc, #84]	; (800a42c <vTaskStartScheduler+0xd4>)
 800a3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3de:	4b14      	ldr	r3, [pc, #80]	; (800a430 <vTaskStartScheduler+0xd8>)
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3e4:	4b13      	ldr	r3, [pc, #76]	; (800a434 <vTaskStartScheduler+0xdc>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3ea:	f001 f8c9 	bl	800b580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3ee:	e00e      	b.n	800a40e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f6:	d10a      	bne.n	800a40e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	60fb      	str	r3, [r7, #12]
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <vTaskStartScheduler+0xb4>
}
 800a40e:	bf00      	nop
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	0800c8b8 	.word	0x0800c8b8
 800a41c:	0800aa5d 	.word	0x0800aa5d
 800a420:	200010f0 	.word	0x200010f0
 800a424:	20000bf8 	.word	0x20000bf8
 800a428:	20000174 	.word	0x20000174
 800a42c:	200010ec 	.word	0x200010ec
 800a430:	200010d8 	.word	0x200010d8
 800a434:	200010d0 	.word	0x200010d0

0800a438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a438:	b480      	push	{r7}
 800a43a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a43c:	4b04      	ldr	r3, [pc, #16]	; (800a450 <vTaskSuspendAll+0x18>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3301      	adds	r3, #1
 800a442:	4a03      	ldr	r2, [pc, #12]	; (800a450 <vTaskSuspendAll+0x18>)
 800a444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a446:	bf00      	nop
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	200010f4 	.word	0x200010f4

0800a454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a462:	4b42      	ldr	r3, [pc, #264]	; (800a56c <xTaskResumeAll+0x118>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <xTaskResumeAll+0x2c>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	603b      	str	r3, [r7, #0]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a480:	f001 f920 	bl	800b6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a484:	4b39      	ldr	r3, [pc, #228]	; (800a56c <xTaskResumeAll+0x118>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	3b01      	subs	r3, #1
 800a48a:	4a38      	ldr	r2, [pc, #224]	; (800a56c <xTaskResumeAll+0x118>)
 800a48c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a48e:	4b37      	ldr	r3, [pc, #220]	; (800a56c <xTaskResumeAll+0x118>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d162      	bne.n	800a55c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a496:	4b36      	ldr	r3, [pc, #216]	; (800a570 <xTaskResumeAll+0x11c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d05e      	beq.n	800a55c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a49e:	e02f      	b.n	800a500 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4a0:	4b34      	ldr	r3, [pc, #208]	; (800a574 <xTaskResumeAll+0x120>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3318      	adds	r3, #24
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff f851 	bl	8009554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff f84c 	bl	8009554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c0:	4b2d      	ldr	r3, [pc, #180]	; (800a578 <xTaskResumeAll+0x124>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d903      	bls.n	800a4d0 <xTaskResumeAll+0x7c>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	4a2a      	ldr	r2, [pc, #168]	; (800a578 <xTaskResumeAll+0x124>)
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4413      	add	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4a27      	ldr	r2, [pc, #156]	; (800a57c <xTaskResumeAll+0x128>)
 800a4de:	441a      	add	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f7fe ffd7 	bl	800949a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f0:	4b23      	ldr	r3, [pc, #140]	; (800a580 <xTaskResumeAll+0x12c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d302      	bcc.n	800a500 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a4fa:	4b22      	ldr	r3, [pc, #136]	; (800a584 <xTaskResumeAll+0x130>)
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a500:	4b1c      	ldr	r3, [pc, #112]	; (800a574 <xTaskResumeAll+0x120>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1cb      	bne.n	800a4a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a50e:	f000 fb5f 	bl	800abd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a512:	4b1d      	ldr	r3, [pc, #116]	; (800a588 <xTaskResumeAll+0x134>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d010      	beq.n	800a540 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a51e:	f000 f847 	bl	800a5b0 <xTaskIncrementTick>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a528:	4b16      	ldr	r3, [pc, #88]	; (800a584 <xTaskResumeAll+0x130>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3b01      	subs	r3, #1
 800a532:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f1      	bne.n	800a51e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a53a:	4b13      	ldr	r3, [pc, #76]	; (800a588 <xTaskResumeAll+0x134>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a540:	4b10      	ldr	r3, [pc, #64]	; (800a584 <xTaskResumeAll+0x130>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a548:	2301      	movs	r3, #1
 800a54a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a54c:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <xTaskResumeAll+0x138>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a55c:	f001 f8e2 	bl	800b724 <vPortExitCritical>

	return xAlreadyYielded;
 800a560:	68bb      	ldr	r3, [r7, #8]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	200010f4 	.word	0x200010f4
 800a570:	200010cc 	.word	0x200010cc
 800a574:	2000108c 	.word	0x2000108c
 800a578:	200010d4 	.word	0x200010d4
 800a57c:	20000bfc 	.word	0x20000bfc
 800a580:	20000bf8 	.word	0x20000bf8
 800a584:	200010e0 	.word	0x200010e0
 800a588:	200010dc 	.word	0x200010dc
 800a58c:	e000ed04 	.word	0xe000ed04

0800a590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a596:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <xTaskGetTickCount+0x1c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a59c:	687b      	ldr	r3, [r7, #4]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	200010d0 	.word	0x200010d0

0800a5b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ba:	4b4f      	ldr	r3, [pc, #316]	; (800a6f8 <xTaskIncrementTick+0x148>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f040 808f 	bne.w	800a6e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5c4:	4b4d      	ldr	r3, [pc, #308]	; (800a6fc <xTaskIncrementTick+0x14c>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5cc:	4a4b      	ldr	r2, [pc, #300]	; (800a6fc <xTaskIncrementTick+0x14c>)
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d120      	bne.n	800a61a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5d8:	4b49      	ldr	r3, [pc, #292]	; (800a700 <xTaskIncrementTick+0x150>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	603b      	str	r3, [r7, #0]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <xTaskIncrementTick+0x46>
 800a5f8:	4b41      	ldr	r3, [pc, #260]	; (800a700 <xTaskIncrementTick+0x150>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	4b41      	ldr	r3, [pc, #260]	; (800a704 <xTaskIncrementTick+0x154>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a3f      	ldr	r2, [pc, #252]	; (800a700 <xTaskIncrementTick+0x150>)
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	4a3f      	ldr	r2, [pc, #252]	; (800a704 <xTaskIncrementTick+0x154>)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	4b3e      	ldr	r3, [pc, #248]	; (800a708 <xTaskIncrementTick+0x158>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3301      	adds	r3, #1
 800a612:	4a3d      	ldr	r2, [pc, #244]	; (800a708 <xTaskIncrementTick+0x158>)
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	f000 fadb 	bl	800abd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a61a:	4b3c      	ldr	r3, [pc, #240]	; (800a70c <xTaskIncrementTick+0x15c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	429a      	cmp	r2, r3
 800a622:	d349      	bcc.n	800a6b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a624:	4b36      	ldr	r3, [pc, #216]	; (800a700 <xTaskIncrementTick+0x150>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d104      	bne.n	800a638 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a62e:	4b37      	ldr	r3, [pc, #220]	; (800a70c <xTaskIncrementTick+0x15c>)
 800a630:	f04f 32ff 	mov.w	r2, #4294967295
 800a634:	601a      	str	r2, [r3, #0]
					break;
 800a636:	e03f      	b.n	800a6b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a638:	4b31      	ldr	r3, [pc, #196]	; (800a700 <xTaskIncrementTick+0x150>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d203      	bcs.n	800a658 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a650:	4a2e      	ldr	r2, [pc, #184]	; (800a70c <xTaskIncrementTick+0x15c>)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a656:	e02f      	b.n	800a6b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	3304      	adds	r3, #4
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe ff79 	bl	8009554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	3318      	adds	r3, #24
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe ff70 	bl	8009554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a678:	4b25      	ldr	r3, [pc, #148]	; (800a710 <xTaskIncrementTick+0x160>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d903      	bls.n	800a688 <xTaskIncrementTick+0xd8>
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	4a22      	ldr	r2, [pc, #136]	; (800a710 <xTaskIncrementTick+0x160>)
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4a1f      	ldr	r2, [pc, #124]	; (800a714 <xTaskIncrementTick+0x164>)
 800a696:	441a      	add	r2, r3
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	3304      	adds	r3, #4
 800a69c:	4619      	mov	r1, r3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	f7fe fefb 	bl	800949a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a8:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <xTaskIncrementTick+0x168>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d3b8      	bcc.n	800a624 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6b6:	e7b5      	b.n	800a624 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6b8:	4b17      	ldr	r3, [pc, #92]	; (800a718 <xTaskIncrementTick+0x168>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6be:	4915      	ldr	r1, [pc, #84]	; (800a714 <xTaskIncrementTick+0x164>)
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d901      	bls.n	800a6d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6d4:	4b11      	ldr	r3, [pc, #68]	; (800a71c <xTaskIncrementTick+0x16c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d007      	beq.n	800a6ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	e004      	b.n	800a6ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6e2:	4b0f      	ldr	r3, [pc, #60]	; (800a720 <xTaskIncrementTick+0x170>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	4a0d      	ldr	r2, [pc, #52]	; (800a720 <xTaskIncrementTick+0x170>)
 800a6ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a6ec:	697b      	ldr	r3, [r7, #20]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	200010f4 	.word	0x200010f4
 800a6fc:	200010d0 	.word	0x200010d0
 800a700:	20001084 	.word	0x20001084
 800a704:	20001088 	.word	0x20001088
 800a708:	200010e4 	.word	0x200010e4
 800a70c:	200010ec 	.word	0x200010ec
 800a710:	200010d4 	.word	0x200010d4
 800a714:	20000bfc 	.word	0x20000bfc
 800a718:	20000bf8 	.word	0x20000bf8
 800a71c:	200010e0 	.word	0x200010e0
 800a720:	200010dc 	.word	0x200010dc

0800a724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a72a:	4b2a      	ldr	r3, [pc, #168]	; (800a7d4 <vTaskSwitchContext+0xb0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d003      	beq.n	800a73a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a732:	4b29      	ldr	r3, [pc, #164]	; (800a7d8 <vTaskSwitchContext+0xb4>)
 800a734:	2201      	movs	r2, #1
 800a736:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a738:	e046      	b.n	800a7c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a73a:	4b27      	ldr	r3, [pc, #156]	; (800a7d8 <vTaskSwitchContext+0xb4>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a740:	4b26      	ldr	r3, [pc, #152]	; (800a7dc <vTaskSwitchContext+0xb8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	e010      	b.n	800a76a <vTaskSwitchContext+0x46>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10a      	bne.n	800a764 <vTaskSwitchContext+0x40>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	607b      	str	r3, [r7, #4]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <vTaskSwitchContext+0x3e>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3b01      	subs	r3, #1
 800a768:	60fb      	str	r3, [r7, #12]
 800a76a:	491d      	ldr	r1, [pc, #116]	; (800a7e0 <vTaskSwitchContext+0xbc>)
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0e4      	beq.n	800a748 <vTaskSwitchContext+0x24>
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	4613      	mov	r3, r2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	4a15      	ldr	r2, [pc, #84]	; (800a7e0 <vTaskSwitchContext+0xbc>)
 800a78a:	4413      	add	r3, r2
 800a78c:	60bb      	str	r3, [r7, #8]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	605a      	str	r2, [r3, #4]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	3308      	adds	r3, #8
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d104      	bne.n	800a7ae <vTaskSwitchContext+0x8a>
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	605a      	str	r2, [r3, #4]
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	4a0b      	ldr	r2, [pc, #44]	; (800a7e4 <vTaskSwitchContext+0xc0>)
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <vTaskSwitchContext+0xb8>)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <vTaskSwitchContext+0xc0>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	3354      	adds	r3, #84	; 0x54
 800a7c4:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <vTaskSwitchContext+0xc4>)
 800a7c6:	6013      	str	r3, [r2, #0]
}
 800a7c8:	bf00      	nop
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	200010f4 	.word	0x200010f4
 800a7d8:	200010e0 	.word	0x200010e0
 800a7dc:	200010d4 	.word	0x200010d4
 800a7e0:	20000bfc 	.word	0x20000bfc
 800a7e4:	20000bf8 	.word	0x20000bf8
 800a7e8:	20000174 	.word	0x20000174

0800a7ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	60fb      	str	r3, [r7, #12]
}
 800a80e:	bf00      	nop
 800a810:	e7fe      	b.n	800a810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a812:	4b07      	ldr	r3, [pc, #28]	; (800a830 <vTaskPlaceOnEventList+0x44>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3318      	adds	r3, #24
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7fe fe61 	bl	80094e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a820:	2101      	movs	r1, #1
 800a822:	6838      	ldr	r0, [r7, #0]
 800a824:	f000 fa80 	bl	800ad28 <prvAddCurrentTaskToDelayedList>
}
 800a828:	bf00      	nop
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20000bf8 	.word	0x20000bf8

0800a834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10a      	bne.n	800a85c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	617b      	str	r3, [r7, #20]
}
 800a858:	bf00      	nop
 800a85a:	e7fe      	b.n	800a85a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <vTaskPlaceOnEventListRestricted+0x54>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3318      	adds	r3, #24
 800a862:	4619      	mov	r1, r3
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7fe fe18 	bl	800949a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a870:	f04f 33ff 	mov.w	r3, #4294967295
 800a874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a876:	6879      	ldr	r1, [r7, #4]
 800a878:	68b8      	ldr	r0, [r7, #8]
 800a87a:	f000 fa55 	bl	800ad28 <prvAddCurrentTaskToDelayedList>
	}
 800a87e:	bf00      	nop
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000bf8 	.word	0x20000bf8

0800a88c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10a      	bne.n	800a8b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	60fb      	str	r3, [r7, #12]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3318      	adds	r3, #24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fe49 	bl	8009554 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8c2:	4b1e      	ldr	r3, [pc, #120]	; (800a93c <xTaskRemoveFromEventList+0xb0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d11d      	bne.n	800a906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fe40 	bl	8009554 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d8:	4b19      	ldr	r3, [pc, #100]	; (800a940 <xTaskRemoveFromEventList+0xb4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d903      	bls.n	800a8e8 <xTaskRemoveFromEventList+0x5c>
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	4a16      	ldr	r2, [pc, #88]	; (800a940 <xTaskRemoveFromEventList+0xb4>)
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4a13      	ldr	r2, [pc, #76]	; (800a944 <xTaskRemoveFromEventList+0xb8>)
 800a8f6:	441a      	add	r2, r3
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	4610      	mov	r0, r2
 800a900:	f7fe fdcb 	bl	800949a <vListInsertEnd>
 800a904:	e005      	b.n	800a912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	3318      	adds	r3, #24
 800a90a:	4619      	mov	r1, r3
 800a90c:	480e      	ldr	r0, [pc, #56]	; (800a948 <xTaskRemoveFromEventList+0xbc>)
 800a90e:	f7fe fdc4 	bl	800949a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	4b0d      	ldr	r3, [pc, #52]	; (800a94c <xTaskRemoveFromEventList+0xc0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d905      	bls.n	800a92c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a920:	2301      	movs	r3, #1
 800a922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a924:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <xTaskRemoveFromEventList+0xc4>)
 800a926:	2201      	movs	r2, #1
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	e001      	b.n	800a930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a930:	697b      	ldr	r3, [r7, #20]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	200010f4 	.word	0x200010f4
 800a940:	200010d4 	.word	0x200010d4
 800a944:	20000bfc 	.word	0x20000bfc
 800a948:	2000108c 	.word	0x2000108c
 800a94c:	20000bf8 	.word	0x20000bf8
 800a950:	200010e0 	.word	0x200010e0

0800a954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <vTaskInternalSetTimeOutState+0x24>)
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <vTaskInternalSetTimeOutState+0x28>)
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	605a      	str	r2, [r3, #4]
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	200010e4 	.word	0x200010e4
 800a97c:	200010d0 	.word	0x200010d0

0800a980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10a      	bne.n	800a9a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	613b      	str	r3, [r7, #16]
}
 800a9a2:	bf00      	nop
 800a9a4:	e7fe      	b.n	800a9a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	60fb      	str	r3, [r7, #12]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9c2:	f000 fe7f 	bl	800b6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9c6:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <xTaskCheckForTimeOut+0xbc>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9de:	d102      	bne.n	800a9e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	61fb      	str	r3, [r7, #28]
 800a9e4:	e023      	b.n	800aa2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <xTaskCheckForTimeOut+0xc0>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d007      	beq.n	800aa02 <xTaskCheckForTimeOut+0x82>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d302      	bcc.n	800aa02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	61fb      	str	r3, [r7, #28]
 800aa00:	e015      	b.n	800aa2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d20b      	bcs.n	800aa24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	1ad2      	subs	r2, r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff ff9b 	bl	800a954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	61fb      	str	r3, [r7, #28]
 800aa22:	e004      	b.n	800aa2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2200      	movs	r2, #0
 800aa28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa2e:	f000 fe79 	bl	800b724 <vPortExitCritical>

	return xReturn;
 800aa32:	69fb      	ldr	r3, [r7, #28]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3720      	adds	r7, #32
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	200010d0 	.word	0x200010d0
 800aa40:	200010e4 	.word	0x200010e4

0800aa44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa48:	4b03      	ldr	r3, [pc, #12]	; (800aa58 <vTaskMissedYield+0x14>)
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]
}
 800aa4e:	bf00      	nop
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	200010e0 	.word	0x200010e0

0800aa5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa64:	f000 f852 	bl	800ab0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa68:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <prvIdleTask+0x28>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d9f9      	bls.n	800aa64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa70:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <prvIdleTask+0x2c>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa80:	e7f0      	b.n	800aa64 <prvIdleTask+0x8>
 800aa82:	bf00      	nop
 800aa84:	20000bfc 	.word	0x20000bfc
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa92:	2300      	movs	r3, #0
 800aa94:	607b      	str	r3, [r7, #4]
 800aa96:	e00c      	b.n	800aab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4a12      	ldr	r2, [pc, #72]	; (800aaec <prvInitialiseTaskLists+0x60>)
 800aaa4:	4413      	add	r3, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fcca 	bl	8009440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3301      	adds	r3, #1
 800aab0:	607b      	str	r3, [r7, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b37      	cmp	r3, #55	; 0x37
 800aab6:	d9ef      	bls.n	800aa98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aab8:	480d      	ldr	r0, [pc, #52]	; (800aaf0 <prvInitialiseTaskLists+0x64>)
 800aaba:	f7fe fcc1 	bl	8009440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aabe:	480d      	ldr	r0, [pc, #52]	; (800aaf4 <prvInitialiseTaskLists+0x68>)
 800aac0:	f7fe fcbe 	bl	8009440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aac4:	480c      	ldr	r0, [pc, #48]	; (800aaf8 <prvInitialiseTaskLists+0x6c>)
 800aac6:	f7fe fcbb 	bl	8009440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aaca:	480c      	ldr	r0, [pc, #48]	; (800aafc <prvInitialiseTaskLists+0x70>)
 800aacc:	f7fe fcb8 	bl	8009440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aad0:	480b      	ldr	r0, [pc, #44]	; (800ab00 <prvInitialiseTaskLists+0x74>)
 800aad2:	f7fe fcb5 	bl	8009440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aad6:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <prvInitialiseTaskLists+0x78>)
 800aad8:	4a05      	ldr	r2, [pc, #20]	; (800aaf0 <prvInitialiseTaskLists+0x64>)
 800aada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <prvInitialiseTaskLists+0x7c>)
 800aade:	4a05      	ldr	r2, [pc, #20]	; (800aaf4 <prvInitialiseTaskLists+0x68>)
 800aae0:	601a      	str	r2, [r3, #0]
}
 800aae2:	bf00      	nop
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	20000bfc 	.word	0x20000bfc
 800aaf0:	2000105c 	.word	0x2000105c
 800aaf4:	20001070 	.word	0x20001070
 800aaf8:	2000108c 	.word	0x2000108c
 800aafc:	200010a0 	.word	0x200010a0
 800ab00:	200010b8 	.word	0x200010b8
 800ab04:	20001084 	.word	0x20001084
 800ab08:	20001088 	.word	0x20001088

0800ab0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab12:	e019      	b.n	800ab48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab14:	f000 fdd6 	bl	800b6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab18:	4b10      	ldr	r3, [pc, #64]	; (800ab5c <prvCheckTasksWaitingTermination+0x50>)
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3304      	adds	r3, #4
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7fe fd15 	bl	8009554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	; (800ab60 <prvCheckTasksWaitingTermination+0x54>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	4a0b      	ldr	r2, [pc, #44]	; (800ab60 <prvCheckTasksWaitingTermination+0x54>)
 800ab32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab34:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <prvCheckTasksWaitingTermination+0x58>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	4a0a      	ldr	r2, [pc, #40]	; (800ab64 <prvCheckTasksWaitingTermination+0x58>)
 800ab3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab3e:	f000 fdf1 	bl	800b724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f810 	bl	800ab68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab48:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <prvCheckTasksWaitingTermination+0x58>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1e1      	bne.n	800ab14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab50:	bf00      	nop
 800ab52:	bf00      	nop
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	200010a0 	.word	0x200010a0
 800ab60:	200010cc 	.word	0x200010cc
 800ab64:	200010b4 	.word	0x200010b4

0800ab68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3354      	adds	r3, #84	; 0x54
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 fd9f 	bl	800c6b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d108      	bne.n	800ab96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 ff89 	bl	800baa0 <vPortFree>
				vPortFree( pxTCB );
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 ff86 	bl	800baa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab94:	e018      	b.n	800abc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d103      	bne.n	800aba8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 ff7d 	bl	800baa0 <vPortFree>
	}
 800aba6:	e00f      	b.n	800abc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d00a      	beq.n	800abc8 <prvDeleteTCB+0x60>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	60fb      	str	r3, [r7, #12]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <prvDeleteTCB+0x5e>
	}
 800abc8:	bf00      	nop
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abd6:	4b0c      	ldr	r3, [pc, #48]	; (800ac08 <prvResetNextTaskUnblockTime+0x38>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abe0:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <prvResetNextTaskUnblockTime+0x3c>)
 800abe2:	f04f 32ff 	mov.w	r2, #4294967295
 800abe6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abe8:	e008      	b.n	800abfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <prvResetNextTaskUnblockTime+0x38>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	4a04      	ldr	r2, [pc, #16]	; (800ac0c <prvResetNextTaskUnblockTime+0x3c>)
 800abfa:	6013      	str	r3, [r2, #0]
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	20001084 	.word	0x20001084
 800ac0c:	200010ec 	.word	0x200010ec

0800ac10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac16:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <xTaskGetSchedulerState+0x34>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d102      	bne.n	800ac24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	607b      	str	r3, [r7, #4]
 800ac22:	e008      	b.n	800ac36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac24:	4b08      	ldr	r3, [pc, #32]	; (800ac48 <xTaskGetSchedulerState+0x38>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d102      	bne.n	800ac32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	607b      	str	r3, [r7, #4]
 800ac30:	e001      	b.n	800ac36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac32:	2300      	movs	r3, #0
 800ac34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac36:	687b      	ldr	r3, [r7, #4]
	}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	200010d8 	.word	0x200010d8
 800ac48:	200010f4 	.word	0x200010f4

0800ac4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d056      	beq.n	800ad10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac62:	4b2e      	ldr	r3, [pc, #184]	; (800ad1c <xTaskPriorityDisinherit+0xd0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d00a      	beq.n	800ac82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	60fb      	str	r3, [r7, #12]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10a      	bne.n	800aca0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	60bb      	str	r3, [r7, #8]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca4:	1e5a      	subs	r2, r3, #1
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d02c      	beq.n	800ad10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d128      	bne.n	800ad10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	3304      	adds	r3, #4
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fc46 	bl	8009554 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <xTaskPriorityDisinherit+0xd4>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d903      	bls.n	800acf0 <xTaskPriorityDisinherit+0xa4>
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	4a0c      	ldr	r2, [pc, #48]	; (800ad20 <xTaskPriorityDisinherit+0xd4>)
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4a09      	ldr	r2, [pc, #36]	; (800ad24 <xTaskPriorityDisinherit+0xd8>)
 800acfe:	441a      	add	r2, r3
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fe fbc7 	bl	800949a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad10:	697b      	ldr	r3, [r7, #20]
	}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20000bf8 	.word	0x20000bf8
 800ad20:	200010d4 	.word	0x200010d4
 800ad24:	20000bfc 	.word	0x20000bfc

0800ad28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad32:	4b21      	ldr	r3, [pc, #132]	; (800adb8 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad38:	4b20      	ldr	r3, [pc, #128]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fc08 	bl	8009554 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4a:	d10a      	bne.n	800ad62 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d007      	beq.n	800ad62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad52:	4b1a      	ldr	r3, [pc, #104]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3304      	adds	r3, #4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4819      	ldr	r0, [pc, #100]	; (800adc0 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad5c:	f7fe fb9d 	bl	800949a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad60:	e026      	b.n	800adb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4413      	add	r3, r2
 800ad68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad6a:	4b14      	ldr	r3, [pc, #80]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d209      	bcs.n	800ad8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad7a:	4b12      	ldr	r3, [pc, #72]	; (800adc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4619      	mov	r1, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	f7fe fbab 	bl	80094e2 <vListInsert>
}
 800ad8c:	e010      	b.n	800adb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad8e:	4b0e      	ldr	r3, [pc, #56]	; (800adc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <prvAddCurrentTaskToDelayedList+0x94>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7fe fba1 	bl	80094e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d202      	bcs.n	800adb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adaa:	4a08      	ldr	r2, [pc, #32]	; (800adcc <prvAddCurrentTaskToDelayedList+0xa4>)
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6013      	str	r3, [r2, #0]
}
 800adb0:	bf00      	nop
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	200010d0 	.word	0x200010d0
 800adbc:	20000bf8 	.word	0x20000bf8
 800adc0:	200010b8 	.word	0x200010b8
 800adc4:	20001088 	.word	0x20001088
 800adc8:	20001084 	.word	0x20001084
 800adcc:	200010ec 	.word	0x200010ec

0800add0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08a      	sub	sp, #40	; 0x28
 800add4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800add6:	2300      	movs	r3, #0
 800add8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adda:	f000 fb07 	bl	800b3ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adde:	4b1c      	ldr	r3, [pc, #112]	; (800ae50 <xTimerCreateTimerTask+0x80>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d021      	beq.n	800ae2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adee:	1d3a      	adds	r2, r7, #4
 800adf0:	f107 0108 	add.w	r1, r7, #8
 800adf4:	f107 030c 	add.w	r3, r7, #12
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fe fb07 	bl	800940c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800adfe:	6879      	ldr	r1, [r7, #4]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	9202      	str	r2, [sp, #8]
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	2302      	movs	r3, #2
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	460a      	mov	r2, r1
 800ae10:	4910      	ldr	r1, [pc, #64]	; (800ae54 <xTimerCreateTimerTask+0x84>)
 800ae12:	4811      	ldr	r0, [pc, #68]	; (800ae58 <xTimerCreateTimerTask+0x88>)
 800ae14:	f7ff f8b4 	bl	8009f80 <xTaskCreateStatic>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	4a10      	ldr	r2, [pc, #64]	; (800ae5c <xTimerCreateTimerTask+0x8c>)
 800ae1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <xTimerCreateTimerTask+0x8c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae26:	2301      	movs	r3, #1
 800ae28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	613b      	str	r3, [r7, #16]
}
 800ae42:	bf00      	nop
 800ae44:	e7fe      	b.n	800ae44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae46:	697b      	ldr	r3, [r7, #20]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	20001128 	.word	0x20001128
 800ae54:	0800c8c0 	.word	0x0800c8c0
 800ae58:	0800af95 	.word	0x0800af95
 800ae5c:	2000112c 	.word	0x2000112c

0800ae60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08a      	sub	sp, #40	; 0x28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d10a      	bne.n	800ae8e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	623b      	str	r3, [r7, #32]
}
 800ae8a:	bf00      	nop
 800ae8c:	e7fe      	b.n	800ae8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae8e:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <xTimerGenericCommand+0x98>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d02a      	beq.n	800aeec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b05      	cmp	r3, #5
 800aea6:	dc18      	bgt.n	800aeda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aea8:	f7ff feb2 	bl	800ac10 <xTaskGetSchedulerState>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d109      	bne.n	800aec6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aeb2:	4b11      	ldr	r3, [pc, #68]	; (800aef8 <xTimerGenericCommand+0x98>)
 800aeb4:	6818      	ldr	r0, [r3, #0]
 800aeb6:	f107 0110 	add.w	r1, r7, #16
 800aeba:	2300      	movs	r3, #0
 800aebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aebe:	f7fe fc77 	bl	80097b0 <xQueueGenericSend>
 800aec2:	6278      	str	r0, [r7, #36]	; 0x24
 800aec4:	e012      	b.n	800aeec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aec6:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <xTimerGenericCommand+0x98>)
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	f107 0110 	add.w	r1, r7, #16
 800aece:	2300      	movs	r3, #0
 800aed0:	2200      	movs	r2, #0
 800aed2:	f7fe fc6d 	bl	80097b0 <xQueueGenericSend>
 800aed6:	6278      	str	r0, [r7, #36]	; 0x24
 800aed8:	e008      	b.n	800aeec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aeda:	4b07      	ldr	r3, [pc, #28]	; (800aef8 <xTimerGenericCommand+0x98>)
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f107 0110 	add.w	r1, r7, #16
 800aee2:	2300      	movs	r3, #0
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	f7fe fd61 	bl	80099ac <xQueueGenericSendFromISR>
 800aeea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3728      	adds	r7, #40	; 0x28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20001128 	.word	0x20001128

0800aefc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af02      	add	r7, sp, #8
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af06:	4b22      	ldr	r3, [pc, #136]	; (800af90 <prvProcessExpiredTimer+0x94>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	3304      	adds	r3, #4
 800af14:	4618      	mov	r0, r3
 800af16:	f7fe fb1d 	bl	8009554 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af20:	f003 0304 	and.w	r3, r3, #4
 800af24:	2b00      	cmp	r3, #0
 800af26:	d022      	beq.n	800af6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	699a      	ldr	r2, [r3, #24]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	18d1      	adds	r1, r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	6978      	ldr	r0, [r7, #20]
 800af36:	f000 f8d1 	bl	800b0dc <prvInsertTimerInActiveList>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01f      	beq.n	800af80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af40:	2300      	movs	r3, #0
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	2300      	movs	r3, #0
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	2100      	movs	r1, #0
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f7ff ff88 	bl	800ae60 <xTimerGenericCommand>
 800af50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d113      	bne.n	800af80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	60fb      	str	r3, [r7, #12]
}
 800af6a:	bf00      	nop
 800af6c:	e7fe      	b.n	800af6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	6978      	ldr	r0, [r7, #20]
 800af86:	4798      	blx	r3
}
 800af88:	bf00      	nop
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20001120 	.word	0x20001120

0800af94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af9c:	f107 0308 	add.w	r3, r7, #8
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 f857 	bl	800b054 <prvGetNextExpireTime>
 800afa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	4619      	mov	r1, r3
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f803 	bl	800afb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afb2:	f000 f8d5 	bl	800b160 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afb6:	e7f1      	b.n	800af9c <prvTimerTask+0x8>

0800afb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afc2:	f7ff fa39 	bl	800a438 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afc6:	f107 0308 	add.w	r3, r7, #8
 800afca:	4618      	mov	r0, r3
 800afcc:	f000 f866 	bl	800b09c <prvSampleTimeNow>
 800afd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d130      	bne.n	800b03a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10a      	bne.n	800aff4 <prvProcessTimerOrBlockTask+0x3c>
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d806      	bhi.n	800aff4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afe6:	f7ff fa35 	bl	800a454 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afea:	68f9      	ldr	r1, [r7, #12]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff ff85 	bl	800aefc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aff2:	e024      	b.n	800b03e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d008      	beq.n	800b00c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800affa:	4b13      	ldr	r3, [pc, #76]	; (800b048 <prvProcessTimerOrBlockTask+0x90>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <prvProcessTimerOrBlockTask+0x50>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <prvProcessTimerOrBlockTask+0x52>
 800b008:	2300      	movs	r3, #0
 800b00a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b00c:	4b0f      	ldr	r3, [pc, #60]	; (800b04c <prvProcessTimerOrBlockTask+0x94>)
 800b00e:	6818      	ldr	r0, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	4619      	mov	r1, r3
 800b01a:	f7fe ff7d 	bl	8009f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b01e:	f7ff fa19 	bl	800a454 <xTaskResumeAll>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b028:	4b09      	ldr	r3, [pc, #36]	; (800b050 <prvProcessTimerOrBlockTask+0x98>)
 800b02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	f3bf 8f6f 	isb	sy
}
 800b038:	e001      	b.n	800b03e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b03a:	f7ff fa0b 	bl	800a454 <xTaskResumeAll>
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20001124 	.word	0x20001124
 800b04c:	20001128 	.word	0x20001128
 800b050:	e000ed04 	.word	0xe000ed04

0800b054 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b05c:	4b0e      	ldr	r3, [pc, #56]	; (800b098 <prvGetNextExpireTime+0x44>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d101      	bne.n	800b06a <prvGetNextExpireTime+0x16>
 800b066:	2201      	movs	r2, #1
 800b068:	e000      	b.n	800b06c <prvGetNextExpireTime+0x18>
 800b06a:	2200      	movs	r2, #0
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d105      	bne.n	800b084 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b078:	4b07      	ldr	r3, [pc, #28]	; (800b098 <prvGetNextExpireTime+0x44>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	e001      	b.n	800b088 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b088:	68fb      	ldr	r3, [r7, #12]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	20001120 	.word	0x20001120

0800b09c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0a4:	f7ff fa74 	bl	800a590 <xTaskGetTickCount>
 800b0a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0aa:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <prvSampleTimeNow+0x3c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d205      	bcs.n	800b0c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0b4:	f000 f936 	bl	800b324 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	e002      	b.n	800b0c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0c6:	4a04      	ldr	r2, [pc, #16]	; (800b0d8 <prvSampleTimeNow+0x3c>)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20001130 	.word	0x20001130

0800b0dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d812      	bhi.n	800b128 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	1ad2      	subs	r2, r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d302      	bcc.n	800b116 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b110:	2301      	movs	r3, #1
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	e01b      	b.n	800b14e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b116:	4b10      	ldr	r3, [pc, #64]	; (800b158 <prvInsertTimerInActiveList+0x7c>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3304      	adds	r3, #4
 800b11e:	4619      	mov	r1, r3
 800b120:	4610      	mov	r0, r2
 800b122:	f7fe f9de 	bl	80094e2 <vListInsert>
 800b126:	e012      	b.n	800b14e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d206      	bcs.n	800b13e <prvInsertTimerInActiveList+0x62>
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d302      	bcc.n	800b13e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b138:	2301      	movs	r3, #1
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	e007      	b.n	800b14e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b13e:	4b07      	ldr	r3, [pc, #28]	; (800b15c <prvInsertTimerInActiveList+0x80>)
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3304      	adds	r3, #4
 800b146:	4619      	mov	r1, r3
 800b148:	4610      	mov	r0, r2
 800b14a:	f7fe f9ca 	bl	80094e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b14e:	697b      	ldr	r3, [r7, #20]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	20001124 	.word	0x20001124
 800b15c:	20001120 	.word	0x20001120

0800b160 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08e      	sub	sp, #56	; 0x38
 800b164:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b166:	e0ca      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	da18      	bge.n	800b1a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b16e:	1d3b      	adds	r3, r7, #4
 800b170:	3304      	adds	r3, #4
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	61fb      	str	r3, [r7, #28]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b196:	6850      	ldr	r0, [r2, #4]
 800b198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b19a:	6892      	ldr	r2, [r2, #8]
 800b19c:	4611      	mov	r1, r2
 800b19e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f2c0 80ab 	blt.w	800b2fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d004      	beq.n	800b1be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe f9cb 	bl	8009554 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1be:	463b      	mov	r3, r7
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ff6b 	bl	800b09c <prvSampleTimeNow>
 800b1c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b09      	cmp	r3, #9
 800b1cc:	f200 8096 	bhi.w	800b2fc <prvProcessReceivedCommands+0x19c>
 800b1d0:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <prvProcessReceivedCommands+0x78>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b201 	.word	0x0800b201
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b201 	.word	0x0800b201
 800b1e4:	0800b275 	.word	0x0800b275
 800b1e8:	0800b289 	.word	0x0800b289
 800b1ec:	0800b2d3 	.word	0x0800b2d3
 800b1f0:	0800b201 	.word	0x0800b201
 800b1f4:	0800b201 	.word	0x0800b201
 800b1f8:	0800b275 	.word	0x0800b275
 800b1fc:	0800b289 	.word	0x0800b289
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	18d1      	adds	r1, r2, r3
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b220:	f7ff ff5c 	bl	800b0dc <prvInsertTimerInActiveList>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d069      	beq.n	800b2fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b230:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d05e      	beq.n	800b2fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	441a      	add	r2, r3
 800b248:	2300      	movs	r3, #0
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	2300      	movs	r3, #0
 800b24e:	2100      	movs	r1, #0
 800b250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b252:	f7ff fe05 	bl	800ae60 <xTimerGenericCommand>
 800b256:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b258:	6a3b      	ldr	r3, [r7, #32]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d14f      	bne.n	800b2fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	61bb      	str	r3, [r7, #24]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b27a:	f023 0301 	bic.w	r3, r3, #1
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b286:	e03a      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b28e:	f043 0301 	orr.w	r3, r3, #1
 800b292:	b2da      	uxtb	r2, r3
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	699b      	ldr	r3, [r3, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10a      	bne.n	800b2be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	617b      	str	r3, [r7, #20]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	699a      	ldr	r2, [r3, #24]
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	18d1      	adds	r1, r2, r3
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2cc:	f7ff ff06 	bl	800b0dc <prvInsertTimerInActiveList>
					break;
 800b2d0:	e015      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d103      	bne.n	800b2e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e2:	f000 fbdd 	bl	800baa0 <vPortFree>
 800b2e6:	e00a      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ee:	f023 0301 	bic.w	r3, r3, #1
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2fa:	e000      	b.n	800b2fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b2fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2fe:	4b08      	ldr	r3, [pc, #32]	; (800b320 <prvProcessReceivedCommands+0x1c0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	1d39      	adds	r1, r7, #4
 800b304:	2200      	movs	r2, #0
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe fbec 	bl	8009ae4 <xQueueReceive>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f47f af2a 	bne.w	800b168 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop
 800b318:	3730      	adds	r7, #48	; 0x30
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20001128 	.word	0x20001128

0800b324 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b32a:	e048      	b.n	800b3be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b32c:	4b2d      	ldr	r3, [pc, #180]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b336:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	3304      	adds	r3, #4
 800b344:	4618      	mov	r0, r3
 800b346:	f7fe f905 	bl	8009554 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d02e      	beq.n	800b3be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	4413      	add	r3, r2
 800b368:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d90e      	bls.n	800b390 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b37e:	4b19      	ldr	r3, [pc, #100]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3304      	adds	r3, #4
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f7fe f8aa 	bl	80094e2 <vListInsert>
 800b38e:	e016      	b.n	800b3be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b390:	2300      	movs	r3, #0
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	2300      	movs	r3, #0
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	2100      	movs	r1, #0
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7ff fd60 	bl	800ae60 <xTimerGenericCommand>
 800b3a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	603b      	str	r3, [r7, #0]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3be:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1b1      	bne.n	800b32c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3c8:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3ce:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <prvSwitchTimerLists+0xc4>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a04      	ldr	r2, [pc, #16]	; (800b3e4 <prvSwitchTimerLists+0xc0>)
 800b3d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3d6:	4a04      	ldr	r2, [pc, #16]	; (800b3e8 <prvSwitchTimerLists+0xc4>)
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	6013      	str	r3, [r2, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	20001120 	.word	0x20001120
 800b3e8:	20001124 	.word	0x20001124

0800b3ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3f2:	f000 f967 	bl	800b6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3f6:	4b15      	ldr	r3, [pc, #84]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d120      	bne.n	800b440 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3fe:	4814      	ldr	r0, [pc, #80]	; (800b450 <prvCheckForValidListAndQueue+0x64>)
 800b400:	f7fe f81e 	bl	8009440 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b404:	4813      	ldr	r0, [pc, #76]	; (800b454 <prvCheckForValidListAndQueue+0x68>)
 800b406:	f7fe f81b 	bl	8009440 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b40a:	4b13      	ldr	r3, [pc, #76]	; (800b458 <prvCheckForValidListAndQueue+0x6c>)
 800b40c:	4a10      	ldr	r2, [pc, #64]	; (800b450 <prvCheckForValidListAndQueue+0x64>)
 800b40e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b410:	4b12      	ldr	r3, [pc, #72]	; (800b45c <prvCheckForValidListAndQueue+0x70>)
 800b412:	4a10      	ldr	r2, [pc, #64]	; (800b454 <prvCheckForValidListAndQueue+0x68>)
 800b414:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b416:	2300      	movs	r3, #0
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	4b11      	ldr	r3, [pc, #68]	; (800b460 <prvCheckForValidListAndQueue+0x74>)
 800b41c:	4a11      	ldr	r2, [pc, #68]	; (800b464 <prvCheckForValidListAndQueue+0x78>)
 800b41e:	2110      	movs	r1, #16
 800b420:	200a      	movs	r0, #10
 800b422:	f7fe f929 	bl	8009678 <xQueueGenericCreateStatic>
 800b426:	4603      	mov	r3, r0
 800b428:	4a08      	ldr	r2, [pc, #32]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b42a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <prvCheckForValidListAndQueue+0x60>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	490b      	ldr	r1, [pc, #44]	; (800b468 <prvCheckForValidListAndQueue+0x7c>)
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fd42 	bl	8009ec4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b440:	f000 f970 	bl	800b724 <vPortExitCritical>
}
 800b444:	bf00      	nop
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20001128 	.word	0x20001128
 800b450:	200010f8 	.word	0x200010f8
 800b454:	2000110c 	.word	0x2000110c
 800b458:	20001120 	.word	0x20001120
 800b45c:	20001124 	.word	0x20001124
 800b460:	200011d4 	.word	0x200011d4
 800b464:	20001134 	.word	0x20001134
 800b468:	0800c8c8 	.word	0x0800c8c8

0800b46c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3b04      	subs	r3, #4
 800b47c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3b04      	subs	r3, #4
 800b48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	f023 0201 	bic.w	r2, r3, #1
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3b04      	subs	r3, #4
 800b49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b49c:	4a0c      	ldr	r2, [pc, #48]	; (800b4d0 <pxPortInitialiseStack+0x64>)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3b14      	subs	r3, #20
 800b4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f06f 0202 	mvn.w	r2, #2
 800b4ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3b20      	subs	r3, #32
 800b4c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	0800b4d5 	.word	0x0800b4d5

0800b4d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4de:	4b12      	ldr	r3, [pc, #72]	; (800b528 <prvTaskExitError+0x54>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e6:	d00a      	beq.n	800b4fe <prvTaskExitError+0x2a>
	__asm volatile
 800b4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ec:	f383 8811 	msr	BASEPRI, r3
 800b4f0:	f3bf 8f6f 	isb	sy
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	60fb      	str	r3, [r7, #12]
}
 800b4fa:	bf00      	nop
 800b4fc:	e7fe      	b.n	800b4fc <prvTaskExitError+0x28>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	60bb      	str	r3, [r7, #8]
}
 800b510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b512:	bf00      	nop
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0fc      	beq.n	800b514 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b51a:	bf00      	nop
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	200000b4 	.word	0x200000b4
 800b52c:	00000000 	.word	0x00000000

0800b530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b530:	4b07      	ldr	r3, [pc, #28]	; (800b550 <pxCurrentTCBConst2>)
 800b532:	6819      	ldr	r1, [r3, #0]
 800b534:	6808      	ldr	r0, [r1, #0]
 800b536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53a:	f380 8809 	msr	PSP, r0
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f04f 0000 	mov.w	r0, #0
 800b546:	f380 8811 	msr	BASEPRI, r0
 800b54a:	4770      	bx	lr
 800b54c:	f3af 8000 	nop.w

0800b550 <pxCurrentTCBConst2>:
 800b550:	20000bf8 	.word	0x20000bf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop

0800b558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b558:	4808      	ldr	r0, [pc, #32]	; (800b57c <prvPortStartFirstTask+0x24>)
 800b55a:	6800      	ldr	r0, [r0, #0]
 800b55c:	6800      	ldr	r0, [r0, #0]
 800b55e:	f380 8808 	msr	MSP, r0
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8814 	msr	CONTROL, r0
 800b56a:	b662      	cpsie	i
 800b56c:	b661      	cpsie	f
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	df00      	svc	0
 800b578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b57a:	bf00      	nop
 800b57c:	e000ed08 	.word	0xe000ed08

0800b580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b586:	4b46      	ldr	r3, [pc, #280]	; (800b6a0 <xPortStartScheduler+0x120>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a46      	ldr	r2, [pc, #280]	; (800b6a4 <xPortStartScheduler+0x124>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d10a      	bne.n	800b5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	613b      	str	r3, [r7, #16]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5a6:	4b3e      	ldr	r3, [pc, #248]	; (800b6a0 <xPortStartScheduler+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a3f      	ldr	r2, [pc, #252]	; (800b6a8 <xPortStartScheduler+0x128>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10a      	bne.n	800b5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	60fb      	str	r3, [r7, #12]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5c6:	4b39      	ldr	r3, [pc, #228]	; (800b6ac <xPortStartScheduler+0x12c>)
 800b5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	22ff      	movs	r2, #255	; 0xff
 800b5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5e0:	78fb      	ldrb	r3, [r7, #3]
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	4b31      	ldr	r3, [pc, #196]	; (800b6b0 <xPortStartScheduler+0x130>)
 800b5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5ee:	4b31      	ldr	r3, [pc, #196]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b5f0:	2207      	movs	r2, #7
 800b5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5f4:	e009      	b.n	800b60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b5f6:	4b2f      	ldr	r3, [pc, #188]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	4a2d      	ldr	r2, [pc, #180]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	b2db      	uxtb	r3, r3
 800b608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b60a:	78fb      	ldrb	r3, [r7, #3]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b612:	2b80      	cmp	r3, #128	; 0x80
 800b614:	d0ef      	beq.n	800b5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b616:	4b27      	ldr	r3, [pc, #156]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f1c3 0307 	rsb	r3, r3, #7
 800b61e:	2b04      	cmp	r3, #4
 800b620:	d00a      	beq.n	800b638 <xPortStartScheduler+0xb8>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60bb      	str	r3, [r7, #8]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b638:	4b1e      	ldr	r3, [pc, #120]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	4a1d      	ldr	r2, [pc, #116]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b642:	4b1c      	ldr	r3, [pc, #112]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b64a:	4a1a      	ldr	r2, [pc, #104]	; (800b6b4 <xPortStartScheduler+0x134>)
 800b64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	b2da      	uxtb	r2, r3
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b656:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a17      	ldr	r2, [pc, #92]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a14      	ldr	r2, [pc, #80]	; (800b6b8 <xPortStartScheduler+0x138>)
 800b668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b66e:	f000 f8dd 	bl	800b82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b672:	4b12      	ldr	r3, [pc, #72]	; (800b6bc <xPortStartScheduler+0x13c>)
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b678:	f000 f8fc 	bl	800b874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b67c:	4b10      	ldr	r3, [pc, #64]	; (800b6c0 <xPortStartScheduler+0x140>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a0f      	ldr	r2, [pc, #60]	; (800b6c0 <xPortStartScheduler+0x140>)
 800b682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b688:	f7ff ff66 	bl	800b558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b68c:	f7ff f84a 	bl	800a724 <vTaskSwitchContext>
	prvTaskExitError();
 800b690:	f7ff ff20 	bl	800b4d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	e000ed00 	.word	0xe000ed00
 800b6a4:	410fc271 	.word	0x410fc271
 800b6a8:	410fc270 	.word	0x410fc270
 800b6ac:	e000e400 	.word	0xe000e400
 800b6b0:	20001224 	.word	0x20001224
 800b6b4:	20001228 	.word	0x20001228
 800b6b8:	e000ed20 	.word	0xe000ed20
 800b6bc:	200000b4 	.word	0x200000b4
 800b6c0:	e000ef34 	.word	0xe000ef34

0800b6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	607b      	str	r3, [r7, #4]
}
 800b6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6de:	4b0f      	ldr	r3, [pc, #60]	; (800b71c <vPortEnterCritical+0x58>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	4a0d      	ldr	r2, [pc, #52]	; (800b71c <vPortEnterCritical+0x58>)
 800b6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	; (800b71c <vPortEnterCritical+0x58>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d10f      	bne.n	800b710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	; (800b720 <vPortEnterCritical+0x5c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <vPortEnterCritical+0x4c>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	603b      	str	r3, [r7, #0]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <vPortEnterCritical+0x4a>
	}
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	200000b4 	.word	0x200000b4
 800b720:	e000ed04 	.word	0xe000ed04

0800b724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b72a:	4b12      	ldr	r3, [pc, #72]	; (800b774 <vPortExitCritical+0x50>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10a      	bne.n	800b748 <vPortExitCritical+0x24>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	607b      	str	r3, [r7, #4]
}
 800b744:	bf00      	nop
 800b746:	e7fe      	b.n	800b746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b748:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <vPortExitCritical+0x50>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	4a09      	ldr	r2, [pc, #36]	; (800b774 <vPortExitCritical+0x50>)
 800b750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b752:	4b08      	ldr	r3, [pc, #32]	; (800b774 <vPortExitCritical+0x50>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d105      	bne.n	800b766 <vPortExitCritical+0x42>
 800b75a:	2300      	movs	r3, #0
 800b75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	f383 8811 	msr	BASEPRI, r3
}
 800b764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b766:	bf00      	nop
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	200000b4 	.word	0x200000b4
	...

0800b780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b780:	f3ef 8009 	mrs	r0, PSP
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	4b15      	ldr	r3, [pc, #84]	; (800b7e0 <pxCurrentTCBConst>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	f01e 0f10 	tst.w	lr, #16
 800b790:	bf08      	it	eq
 800b792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79a:	6010      	str	r0, [r2, #0]
 800b79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7a4:	f380 8811 	msr	BASEPRI, r0
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f7fe ffb8 	bl	800a724 <vTaskSwitchContext>
 800b7b4:	f04f 0000 	mov.w	r0, #0
 800b7b8:	f380 8811 	msr	BASEPRI, r0
 800b7bc:	bc09      	pop	{r0, r3}
 800b7be:	6819      	ldr	r1, [r3, #0]
 800b7c0:	6808      	ldr	r0, [r1, #0]
 800b7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c6:	f01e 0f10 	tst.w	lr, #16
 800b7ca:	bf08      	it	eq
 800b7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7d0:	f380 8809 	msr	PSP, r0
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	f3af 8000 	nop.w

0800b7e0 <pxCurrentTCBConst>:
 800b7e0:	20000bf8 	.word	0x20000bf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop

0800b7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	607b      	str	r3, [r7, #4]
}
 800b800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b802:	f7fe fed5 	bl	800a5b0 <xTaskIncrementTick>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d003      	beq.n	800b814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b80c:	4b06      	ldr	r3, [pc, #24]	; (800b828 <xPortSysTickHandler+0x40>)
 800b80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	2300      	movs	r3, #0
 800b816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	f383 8811 	msr	BASEPRI, r3
}
 800b81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b820:	bf00      	nop
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b830:	4b0b      	ldr	r3, [pc, #44]	; (800b860 <vPortSetupTimerInterrupt+0x34>)
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b836:	4b0b      	ldr	r3, [pc, #44]	; (800b864 <vPortSetupTimerInterrupt+0x38>)
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b83c:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <vPortSetupTimerInterrupt+0x3c>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <vPortSetupTimerInterrupt+0x40>)
 800b842:	fba2 2303 	umull	r2, r3, r2, r3
 800b846:	099b      	lsrs	r3, r3, #6
 800b848:	4a09      	ldr	r2, [pc, #36]	; (800b870 <vPortSetupTimerInterrupt+0x44>)
 800b84a:	3b01      	subs	r3, #1
 800b84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b84e:	4b04      	ldr	r3, [pc, #16]	; (800b860 <vPortSetupTimerInterrupt+0x34>)
 800b850:	2207      	movs	r2, #7
 800b852:	601a      	str	r2, [r3, #0]
}
 800b854:	bf00      	nop
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	e000e010 	.word	0xe000e010
 800b864:	e000e018 	.word	0xe000e018
 800b868:	20000000 	.word	0x20000000
 800b86c:	10624dd3 	.word	0x10624dd3
 800b870:	e000e014 	.word	0xe000e014

0800b874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b884 <vPortEnableVFP+0x10>
 800b878:	6801      	ldr	r1, [r0, #0]
 800b87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b87e:	6001      	str	r1, [r0, #0]
 800b880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b882:	bf00      	nop
 800b884:	e000ed88 	.word	0xe000ed88

0800b888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b88e:	f3ef 8305 	mrs	r3, IPSR
 800b892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b0f      	cmp	r3, #15
 800b898:	d914      	bls.n	800b8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b89a:	4a17      	ldr	r2, [pc, #92]	; (800b8f8 <vPortValidateInterruptPriority+0x70>)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	4413      	add	r3, r2
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8a4:	4b15      	ldr	r3, [pc, #84]	; (800b8fc <vPortValidateInterruptPriority+0x74>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	7afa      	ldrb	r2, [r7, #11]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d20a      	bcs.n	800b8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	607b      	str	r3, [r7, #4]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	; (800b900 <vPortValidateInterruptPriority+0x78>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <vPortValidateInterruptPriority+0x7c>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d90a      	bls.n	800b8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	603b      	str	r3, [r7, #0]
}
 800b8e6:	bf00      	nop
 800b8e8:	e7fe      	b.n	800b8e8 <vPortValidateInterruptPriority+0x60>
	}
 800b8ea:	bf00      	nop
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	e000e3f0 	.word	0xe000e3f0
 800b8fc:	20001224 	.word	0x20001224
 800b900:	e000ed0c 	.word	0xe000ed0c
 800b904:	20001228 	.word	0x20001228

0800b908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	; 0x28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b914:	f7fe fd90 	bl	800a438 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b918:	4b5b      	ldr	r3, [pc, #364]	; (800ba88 <pvPortMalloc+0x180>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b920:	f000 f920 	bl	800bb64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b924:	4b59      	ldr	r3, [pc, #356]	; (800ba8c <pvPortMalloc+0x184>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4013      	ands	r3, r2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f040 8093 	bne.w	800ba58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d01d      	beq.n	800b974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b938:	2208      	movs	r2, #8
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4413      	add	r3, r2
 800b93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	2b00      	cmp	r3, #0
 800b948:	d014      	beq.n	800b974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f023 0307 	bic.w	r3, r3, #7
 800b950:	3308      	adds	r3, #8
 800b952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f003 0307 	and.w	r3, r3, #7
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <pvPortMalloc+0x6c>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	617b      	str	r3, [r7, #20]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d06e      	beq.n	800ba58 <pvPortMalloc+0x150>
 800b97a:	4b45      	ldr	r3, [pc, #276]	; (800ba90 <pvPortMalloc+0x188>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	429a      	cmp	r2, r3
 800b982:	d869      	bhi.n	800ba58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b984:	4b43      	ldr	r3, [pc, #268]	; (800ba94 <pvPortMalloc+0x18c>)
 800b986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b988:	4b42      	ldr	r3, [pc, #264]	; (800ba94 <pvPortMalloc+0x18c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b98e:	e004      	b.n	800b99a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d903      	bls.n	800b9ac <pvPortMalloc+0xa4>
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f1      	bne.n	800b990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9ac:	4b36      	ldr	r3, [pc, #216]	; (800ba88 <pvPortMalloc+0x180>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d050      	beq.n	800ba58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2208      	movs	r2, #8
 800b9bc:	4413      	add	r3, r2
 800b9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	2308      	movs	r3, #8
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d91f      	bls.n	800ba18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00a      	beq.n	800ba00 <pvPortMalloc+0xf8>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	613b      	str	r3, [r7, #16]
}
 800b9fc:	bf00      	nop
 800b9fe:	e7fe      	b.n	800b9fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	1ad2      	subs	r2, r2, r3
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba12:	69b8      	ldr	r0, [r7, #24]
 800ba14:	f000 f908 	bl	800bc28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba18:	4b1d      	ldr	r3, [pc, #116]	; (800ba90 <pvPortMalloc+0x188>)
 800ba1a:	681a      	ldr	r2, [r3, #0]
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	4a1b      	ldr	r2, [pc, #108]	; (800ba90 <pvPortMalloc+0x188>)
 800ba24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba26:	4b1a      	ldr	r3, [pc, #104]	; (800ba90 <pvPortMalloc+0x188>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	4b1b      	ldr	r3, [pc, #108]	; (800ba98 <pvPortMalloc+0x190>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d203      	bcs.n	800ba3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba32:	4b17      	ldr	r3, [pc, #92]	; (800ba90 <pvPortMalloc+0x188>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a18      	ldr	r2, [pc, #96]	; (800ba98 <pvPortMalloc+0x190>)
 800ba38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <pvPortMalloc+0x184>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	431a      	orrs	r2, r3
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <pvPortMalloc+0x194>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	3301      	adds	r3, #1
 800ba54:	4a11      	ldr	r2, [pc, #68]	; (800ba9c <pvPortMalloc+0x194>)
 800ba56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba58:	f7fe fcfc 	bl	800a454 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	f003 0307 	and.w	r3, r3, #7
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <pvPortMalloc+0x174>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	60fb      	str	r3, [r7, #12]
}
 800ba78:	bf00      	nop
 800ba7a:	e7fe      	b.n	800ba7a <pvPortMalloc+0x172>
	return pvReturn;
 800ba7c:	69fb      	ldr	r3, [r7, #28]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3728      	adds	r7, #40	; 0x28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20004e34 	.word	0x20004e34
 800ba8c:	20004e48 	.word	0x20004e48
 800ba90:	20004e38 	.word	0x20004e38
 800ba94:	20004e2c 	.word	0x20004e2c
 800ba98:	20004e3c 	.word	0x20004e3c
 800ba9c:	20004e40 	.word	0x20004e40

0800baa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d04d      	beq.n	800bb4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bab2:	2308      	movs	r3, #8
 800bab4:	425b      	negs	r3, r3
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	4413      	add	r3, r2
 800baba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	4b24      	ldr	r3, [pc, #144]	; (800bb58 <vPortFree+0xb8>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4013      	ands	r3, r2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d10a      	bne.n	800bae4 <vPortFree+0x44>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	60fb      	str	r3, [r7, #12]
}
 800bae0:	bf00      	nop
 800bae2:	e7fe      	b.n	800bae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00a      	beq.n	800bb02 <vPortFree+0x62>
	__asm volatile
 800baec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf0:	f383 8811 	msr	BASEPRI, r3
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	f3bf 8f4f 	dsb	sy
 800bafc:	60bb      	str	r3, [r7, #8]
}
 800bafe:	bf00      	nop
 800bb00:	e7fe      	b.n	800bb00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	4b14      	ldr	r3, [pc, #80]	; (800bb58 <vPortFree+0xb8>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d01e      	beq.n	800bb4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d11a      	bne.n	800bb4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	4b0e      	ldr	r3, [pc, #56]	; (800bb58 <vPortFree+0xb8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	43db      	mvns	r3, r3
 800bb22:	401a      	ands	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb28:	f7fe fc86 	bl	800a438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <vPortFree+0xbc>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	4a09      	ldr	r2, [pc, #36]	; (800bb5c <vPortFree+0xbc>)
 800bb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f000 f874 	bl	800bc28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <vPortFree+0xc0>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3301      	adds	r3, #1
 800bb46:	4a06      	ldr	r2, [pc, #24]	; (800bb60 <vPortFree+0xc0>)
 800bb48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb4a:	f7fe fc83 	bl	800a454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb4e:	bf00      	nop
 800bb50:	3718      	adds	r7, #24
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20004e48 	.word	0x20004e48
 800bb5c:	20004e38 	.word	0x20004e38
 800bb60:	20004e44 	.word	0x20004e44

0800bb64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb70:	4b27      	ldr	r3, [pc, #156]	; (800bc10 <prvHeapInit+0xac>)
 800bb72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f003 0307 	and.w	r3, r3, #7
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00c      	beq.n	800bb98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	3307      	adds	r3, #7
 800bb82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 0307 	bic.w	r3, r3, #7
 800bb8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb8c:	68ba      	ldr	r2, [r7, #8]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	4a1f      	ldr	r2, [pc, #124]	; (800bc10 <prvHeapInit+0xac>)
 800bb94:	4413      	add	r3, r2
 800bb96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb9c:	4a1d      	ldr	r2, [pc, #116]	; (800bc14 <prvHeapInit+0xb0>)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bba2:	4b1c      	ldr	r3, [pc, #112]	; (800bc14 <prvHeapInit+0xb0>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	4413      	add	r3, r2
 800bbae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbb0:	2208      	movs	r2, #8
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	1a9b      	subs	r3, r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f023 0307 	bic.w	r3, r3, #7
 800bbbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4a15      	ldr	r2, [pc, #84]	; (800bc18 <prvHeapInit+0xb4>)
 800bbc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbc6:	4b14      	ldr	r3, [pc, #80]	; (800bc18 <prvHeapInit+0xb4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbce:	4b12      	ldr	r3, [pc, #72]	; (800bc18 <prvHeapInit+0xb4>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	1ad2      	subs	r2, r2, r3
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbe4:	4b0c      	ldr	r3, [pc, #48]	; (800bc18 <prvHeapInit+0xb4>)
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	4a0a      	ldr	r2, [pc, #40]	; (800bc1c <prvHeapInit+0xb8>)
 800bbf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	4a09      	ldr	r2, [pc, #36]	; (800bc20 <prvHeapInit+0xbc>)
 800bbfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbfc:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <prvHeapInit+0xc0>)
 800bbfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc02:	601a      	str	r2, [r3, #0]
}
 800bc04:	bf00      	nop
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	2000122c 	.word	0x2000122c
 800bc14:	20004e2c 	.word	0x20004e2c
 800bc18:	20004e34 	.word	0x20004e34
 800bc1c:	20004e3c 	.word	0x20004e3c
 800bc20:	20004e38 	.word	0x20004e38
 800bc24:	20004e48 	.word	0x20004e48

0800bc28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc30:	4b28      	ldr	r3, [pc, #160]	; (800bcd4 <prvInsertBlockIntoFreeList+0xac>)
 800bc32:	60fb      	str	r3, [r7, #12]
 800bc34:	e002      	b.n	800bc3c <prvInsertBlockIntoFreeList+0x14>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d8f7      	bhi.n	800bc36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	4413      	add	r3, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d108      	bne.n	800bc6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	441a      	add	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	441a      	add	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d118      	bne.n	800bcb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	4b15      	ldr	r3, [pc, #84]	; (800bcd8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d00d      	beq.n	800bca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	441a      	add	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	e008      	b.n	800bcb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bca6:	4b0c      	ldr	r3, [pc, #48]	; (800bcd8 <prvInsertBlockIntoFreeList+0xb0>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	e003      	b.n	800bcb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d002      	beq.n	800bcc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcc6:	bf00      	nop
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	20004e2c 	.word	0x20004e2c
 800bcd8:	20004e34 	.word	0x20004e34

0800bcdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bce0:	2200      	movs	r2, #0
 800bce2:	4912      	ldr	r1, [pc, #72]	; (800bd2c <MX_USB_DEVICE_Init+0x50>)
 800bce4:	4812      	ldr	r0, [pc, #72]	; (800bd30 <MX_USB_DEVICE_Init+0x54>)
 800bce6:	f7fb ff64 	bl	8007bb2 <USBD_Init>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d001      	beq.n	800bcf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bcf0:	f7f4 fe06 	bl	8000900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800bcf4:	490f      	ldr	r1, [pc, #60]	; (800bd34 <MX_USB_DEVICE_Init+0x58>)
 800bcf6:	480e      	ldr	r0, [pc, #56]	; (800bd30 <MX_USB_DEVICE_Init+0x54>)
 800bcf8:	f7fb ff8b 	bl	8007c12 <USBD_RegisterClass>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bd02:	f7f4 fdfd 	bl	8000900 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800bd06:	490c      	ldr	r1, [pc, #48]	; (800bd38 <MX_USB_DEVICE_Init+0x5c>)
 800bd08:	4809      	ldr	r0, [pc, #36]	; (800bd30 <MX_USB_DEVICE_Init+0x54>)
 800bd0a:	f7fa fa35 	bl	8006178 <USBD_MSC_RegisterStorage>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bd14:	f7f4 fdf4 	bl	8000900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bd18:	4805      	ldr	r0, [pc, #20]	; (800bd30 <MX_USB_DEVICE_Init+0x54>)
 800bd1a:	f7fb ffb0 	bl	8007c7e <USBD_Start>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bd24:	f7f4 fdec 	bl	8000900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bd28:	bf00      	nop
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	200000b8 	.word	0x200000b8
 800bd30:	20004e4c 	.word	0x20004e4c
 800bd34:	2000000c 	.word	0x2000000c
 800bd38:	20000108 	.word	0x20000108

0800bd3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	6039      	str	r1, [r7, #0]
 800bd46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2212      	movs	r2, #18
 800bd4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd4e:	4b03      	ldr	r3, [pc, #12]	; (800bd5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	200000d4 	.word	0x200000d4

0800bd60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	4603      	mov	r3, r0
 800bd68:	6039      	str	r1, [r7, #0]
 800bd6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2204      	movs	r2, #4
 800bd70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd72:	4b03      	ldr	r3, [pc, #12]	; (800bd80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	200000e8 	.word	0x200000e8

0800bd84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	6039      	str	r1, [r7, #0]
 800bd8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd90:	79fb      	ldrb	r3, [r7, #7]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d105      	bne.n	800bda2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	4907      	ldr	r1, [pc, #28]	; (800bdb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bd9a:	4808      	ldr	r0, [pc, #32]	; (800bdbc <USBD_FS_ProductStrDescriptor+0x38>)
 800bd9c:	f7fd f91c 	bl	8008fd8 <USBD_GetString>
 800bda0:	e004      	b.n	800bdac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	4904      	ldr	r1, [pc, #16]	; (800bdb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bda6:	4805      	ldr	r0, [pc, #20]	; (800bdbc <USBD_FS_ProductStrDescriptor+0x38>)
 800bda8:	f7fd f916 	bl	8008fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdac:	4b02      	ldr	r3, [pc, #8]	; (800bdb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	20005128 	.word	0x20005128
 800bdbc:	0800c8d0 	.word	0x0800c8d0

0800bdc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	6039      	str	r1, [r7, #0]
 800bdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	4904      	ldr	r1, [pc, #16]	; (800bde0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdd0:	4804      	ldr	r0, [pc, #16]	; (800bde4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdd2:	f7fd f901 	bl	8008fd8 <USBD_GetString>
  return USBD_StrDesc;
 800bdd6:	4b02      	ldr	r3, [pc, #8]	; (800bde0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	20005128 	.word	0x20005128
 800bde4:	0800c8e4 	.word	0x0800c8e4

0800bde8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	6039      	str	r1, [r7, #0]
 800bdf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	221a      	movs	r2, #26
 800bdf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bdfa:	f000 f843 	bl	800be84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bdfe:	4b02      	ldr	r3, [pc, #8]	; (800be08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be00:	4618      	mov	r0, r3
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	200000ec 	.word	0x200000ec

0800be0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be18:	79fb      	ldrb	r3, [r7, #7]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d105      	bne.n	800be2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	4907      	ldr	r1, [pc, #28]	; (800be40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be22:	4808      	ldr	r0, [pc, #32]	; (800be44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be24:	f7fd f8d8 	bl	8008fd8 <USBD_GetString>
 800be28:	e004      	b.n	800be34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	4904      	ldr	r1, [pc, #16]	; (800be40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be2e:	4805      	ldr	r0, [pc, #20]	; (800be44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be30:	f7fd f8d2 	bl	8008fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be34:	4b02      	ldr	r3, [pc, #8]	; (800be40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be36:	4618      	mov	r0, r3
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	20005128 	.word	0x20005128
 800be44:	0800c8f8 	.word	0x0800c8f8

0800be48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	6039      	str	r1, [r7, #0]
 800be52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be54:	79fb      	ldrb	r3, [r7, #7]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	4907      	ldr	r1, [pc, #28]	; (800be7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be5e:	4808      	ldr	r0, [pc, #32]	; (800be80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be60:	f7fd f8ba 	bl	8008fd8 <USBD_GetString>
 800be64:	e004      	b.n	800be70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	4904      	ldr	r1, [pc, #16]	; (800be7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be6a:	4805      	ldr	r0, [pc, #20]	; (800be80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be6c:	f7fd f8b4 	bl	8008fd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be70:	4b02      	ldr	r3, [pc, #8]	; (800be7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20005128 	.word	0x20005128
 800be80:	0800c904 	.word	0x0800c904

0800be84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be8a:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <Get_SerialNum+0x44>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be90:	4b0e      	ldr	r3, [pc, #56]	; (800becc <Get_SerialNum+0x48>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be96:	4b0e      	ldr	r3, [pc, #56]	; (800bed0 <Get_SerialNum+0x4c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4413      	add	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d009      	beq.n	800bebe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800beaa:	2208      	movs	r2, #8
 800beac:	4909      	ldr	r1, [pc, #36]	; (800bed4 <Get_SerialNum+0x50>)
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f000 f814 	bl	800bedc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800beb4:	2204      	movs	r2, #4
 800beb6:	4908      	ldr	r1, [pc, #32]	; (800bed8 <Get_SerialNum+0x54>)
 800beb8:	68b8      	ldr	r0, [r7, #8]
 800beba:	f000 f80f 	bl	800bedc <IntToUnicode>
  }
}
 800bebe:	bf00      	nop
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	1fff7a10 	.word	0x1fff7a10
 800becc:	1fff7a14 	.word	0x1fff7a14
 800bed0:	1fff7a18 	.word	0x1fff7a18
 800bed4:	200000ee 	.word	0x200000ee
 800bed8:	200000fe 	.word	0x200000fe

0800bedc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bedc:	b480      	push	{r7}
 800bede:	b087      	sub	sp, #28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	4613      	mov	r3, r2
 800bee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800beee:	2300      	movs	r3, #0
 800bef0:	75fb      	strb	r3, [r7, #23]
 800bef2:	e027      	b.n	800bf44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	0f1b      	lsrs	r3, r3, #28
 800bef8:	2b09      	cmp	r3, #9
 800befa:	d80b      	bhi.n	800bf14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	0f1b      	lsrs	r3, r3, #28
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	7dfb      	ldrb	r3, [r7, #23]
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	4619      	mov	r1, r3
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	440b      	add	r3, r1
 800bf0c:	3230      	adds	r2, #48	; 0x30
 800bf0e:	b2d2      	uxtb	r2, r2
 800bf10:	701a      	strb	r2, [r3, #0]
 800bf12:	e00a      	b.n	800bf2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	0f1b      	lsrs	r3, r3, #28
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	7dfb      	ldrb	r3, [r7, #23]
 800bf1c:	005b      	lsls	r3, r3, #1
 800bf1e:	4619      	mov	r1, r3
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	440b      	add	r3, r1
 800bf24:	3237      	adds	r2, #55	; 0x37
 800bf26:	b2d2      	uxtb	r2, r2
 800bf28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	011b      	lsls	r3, r3, #4
 800bf2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	3301      	adds	r3, #1
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	4413      	add	r3, r2
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	3301      	adds	r3, #1
 800bf42:	75fb      	strb	r3, [r7, #23]
 800bf44:	7dfa      	ldrb	r2, [r7, #23]
 800bf46:	79fb      	ldrb	r3, [r7, #7]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d3d3      	bcc.n	800bef4 <IntToUnicode+0x18>
  }
}
 800bf4c:	bf00      	nop
 800bf4e:	bf00      	nop
 800bf50:	371c      	adds	r7, #28
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	4603      	mov	r3, r0
 800bf62:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800bf64:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b085      	sub	sp, #20
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	4603      	mov	r3, r0
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	607a      	str	r2, [r7, #4]
 800bf7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf86:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf8e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800bf90:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b083      	sub	sp, #12
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800bfa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b083      	sub	sp, #12
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800bfc0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	4603      	mov	r3, r0
 800bfdc:	73fb      	strb	r3, [r7, #15]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800bfe2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60b9      	str	r1, [r7, #8]
 800bff8:	607a      	str	r2, [r7, #4]
 800bffa:	461a      	mov	r2, r3
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]
 800c000:	4613      	mov	r3, r2
 800c002:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800c004:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800c006:	4618      	mov	r0, r3
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800c012:	b480      	push	{r7}
 800c014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800c016:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c018:	4618      	mov	r0, r3
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
	...

0800c024 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08a      	sub	sp, #40	; 0x28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c02c:	f107 0314 	add.w	r3, r7, #20
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	605a      	str	r2, [r3, #4]
 800c036:	609a      	str	r2, [r3, #8]
 800c038:	60da      	str	r2, [r3, #12]
 800c03a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c044:	d147      	bne.n	800c0d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c046:	2300      	movs	r3, #0
 800c048:	613b      	str	r3, [r7, #16]
 800c04a:	4b25      	ldr	r3, [pc, #148]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04e:	4a24      	ldr	r2, [pc, #144]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c050:	f043 0301 	orr.w	r3, r3, #1
 800c054:	6313      	str	r3, [r2, #48]	; 0x30
 800c056:	4b22      	ldr	r3, [pc, #136]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	613b      	str	r3, [r7, #16]
 800c060:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c062:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c068:	2302      	movs	r3, #2
 800c06a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c06c:	2300      	movs	r3, #0
 800c06e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c070:	2303      	movs	r3, #3
 800c072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c074:	230a      	movs	r3, #10
 800c076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c078:	f107 0314 	add.w	r3, r7, #20
 800c07c:	4619      	mov	r1, r3
 800c07e:	4819      	ldr	r0, [pc, #100]	; (800c0e4 <HAL_PCD_MspInit+0xc0>)
 800c080:	f7f5 fad0 	bl	8001624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c084:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c08a:	2300      	movs	r3, #0
 800c08c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c08e:	2300      	movs	r3, #0
 800c090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c092:	f107 0314 	add.w	r3, r7, #20
 800c096:	4619      	mov	r1, r3
 800c098:	4812      	ldr	r0, [pc, #72]	; (800c0e4 <HAL_PCD_MspInit+0xc0>)
 800c09a:	f7f5 fac3 	bl	8001624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c09e:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a2:	4a0f      	ldr	r2, [pc, #60]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a8:	6353      	str	r3, [r2, #52]	; 0x34
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	60fb      	str	r3, [r7, #12]
 800c0ae:	4b0c      	ldr	r3, [pc, #48]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b2:	4a0b      	ldr	r2, [pc, #44]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c0b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0b8:	6453      	str	r3, [r2, #68]	; 0x44
 800c0ba:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <HAL_PCD_MspInit+0xbc>)
 800c0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	2105      	movs	r1, #5
 800c0ca:	2043      	movs	r0, #67	; 0x43
 800c0cc:	f7f4 ff58 	bl	8000f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0d0:	2043      	movs	r0, #67	; 0x43
 800c0d2:	f7f4 ff71 	bl	8000fb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	3728      	adds	r7, #40	; 0x28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	40023800 	.word	0x40023800
 800c0e4:	40020000 	.word	0x40020000

0800c0e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fb fe0a 	bl	8007d18 <USBD_LL_SetupStage>
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	460b      	mov	r3, r1
 800c116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	4613      	mov	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	440b      	add	r3, r1
 800c12c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	4619      	mov	r1, r3
 800c136:	f7fb fe44 	bl	8007dc2 <USBD_LL_DataOutStage>
}
 800c13a:	bf00      	nop
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b082      	sub	sp, #8
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	460b      	mov	r3, r1
 800c14c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c154:	78fa      	ldrb	r2, [r7, #3]
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	00db      	lsls	r3, r3, #3
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	334c      	adds	r3, #76	; 0x4c
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	4619      	mov	r1, r3
 800c16a:	f7fb fedd 	bl	8007f28 <USBD_LL_DataInStage>
}
 800c16e:	bf00      	nop
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c184:	4618      	mov	r0, r3
 800c186:	f7fc f811 	bl	80081ac <USBD_LL_SOF>
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c19a:	2301      	movs	r3, #1
 800c19c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d102      	bne.n	800c1ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73fb      	strb	r3, [r7, #15]
 800c1aa:	e008      	b.n	800c1be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d102      	bne.n	800c1ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	73fb      	strb	r3, [r7, #15]
 800c1b8:	e001      	b.n	800c1be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c1ba:	f7f4 fba1 	bl	8000900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1c4:	7bfa      	ldrb	r2, [r7, #15]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fb ffb1 	bl	8008130 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fb ff59 	bl	800808c <USBD_LL_Reset>
}
 800c1da:	bf00      	nop
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fb ffac 	bl	8008150 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	6812      	ldr	r2, [r2, #0]
 800c206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c20a:	f043 0301 	orr.w	r3, r3, #1
 800c20e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a1b      	ldr	r3, [r3, #32]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d005      	beq.n	800c224 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c218:	4b04      	ldr	r3, [pc, #16]	; (800c22c <HAL_PCD_SuspendCallback+0x48>)
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	4a03      	ldr	r2, [pc, #12]	; (800c22c <HAL_PCD_SuspendCallback+0x48>)
 800c21e:	f043 0306 	orr.w	r3, r3, #6
 800c222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	e000ed00 	.word	0xe000ed00

0800c230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fb ff9c 	bl	800817c <USBD_LL_Resume>
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c25e:	78fa      	ldrb	r2, [r7, #3]
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7fb fff4 	bl	8008250 <USBD_LL_IsoOUTIncomplete>
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c282:	78fa      	ldrb	r2, [r7, #3]
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7fb ffb0 	bl	80081ec <USBD_LL_IsoINIncomplete>
}
 800c28c:	bf00      	nop
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fc f806 	bl	80082b4 <USBD_LL_DevConnected>
}
 800c2a8:	bf00      	nop
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}

0800c2b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fc f803 	bl	80082ca <USBD_LL_DevDisconnected>
}
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d13c      	bne.n	800c356 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c2dc:	4a20      	ldr	r2, [pc, #128]	; (800c360 <USBD_LL_Init+0x94>)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a1e      	ldr	r2, [pc, #120]	; (800c360 <USBD_LL_Init+0x94>)
 800c2e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2ec:	4b1c      	ldr	r3, [pc, #112]	; (800c360 <USBD_LL_Init+0x94>)
 800c2ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c2f4:	4b1a      	ldr	r3, [pc, #104]	; (800c360 <USBD_LL_Init+0x94>)
 800c2f6:	2204      	movs	r2, #4
 800c2f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2fa:	4b19      	ldr	r3, [pc, #100]	; (800c360 <USBD_LL_Init+0x94>)
 800c2fc:	2202      	movs	r2, #2
 800c2fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c300:	4b17      	ldr	r3, [pc, #92]	; (800c360 <USBD_LL_Init+0x94>)
 800c302:	2200      	movs	r2, #0
 800c304:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c306:	4b16      	ldr	r3, [pc, #88]	; (800c360 <USBD_LL_Init+0x94>)
 800c308:	2202      	movs	r2, #2
 800c30a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c30c:	4b14      	ldr	r3, [pc, #80]	; (800c360 <USBD_LL_Init+0x94>)
 800c30e:	2200      	movs	r2, #0
 800c310:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c312:	4b13      	ldr	r3, [pc, #76]	; (800c360 <USBD_LL_Init+0x94>)
 800c314:	2200      	movs	r2, #0
 800c316:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c318:	4b11      	ldr	r3, [pc, #68]	; (800c360 <USBD_LL_Init+0x94>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c31e:	4b10      	ldr	r3, [pc, #64]	; (800c360 <USBD_LL_Init+0x94>)
 800c320:	2201      	movs	r2, #1
 800c322:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c324:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <USBD_LL_Init+0x94>)
 800c326:	2200      	movs	r2, #0
 800c328:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c32a:	480d      	ldr	r0, [pc, #52]	; (800c360 <USBD_LL_Init+0x94>)
 800c32c:	f7f5 fb59 	bl	80019e2 <HAL_PCD_Init>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d001      	beq.n	800c33a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c336:	f7f4 fae3 	bl	8000900 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c33a:	2180      	movs	r1, #128	; 0x80
 800c33c:	4808      	ldr	r0, [pc, #32]	; (800c360 <USBD_LL_Init+0x94>)
 800c33e:	f7f6 fdde 	bl	8002efe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c342:	2240      	movs	r2, #64	; 0x40
 800c344:	2100      	movs	r1, #0
 800c346:	4806      	ldr	r0, [pc, #24]	; (800c360 <USBD_LL_Init+0x94>)
 800c348:	f7f6 fd92 	bl	8002e70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c34c:	2280      	movs	r2, #128	; 0x80
 800c34e:	2101      	movs	r1, #1
 800c350:	4803      	ldr	r0, [pc, #12]	; (800c360 <USBD_LL_Init+0x94>)
 800c352:	f7f6 fd8d 	bl	8002e70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20005328 	.word	0x20005328

0800c364 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7f5 fc4e 	bl	8001c1c <HAL_PCD_Start>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f962 	bl	800c650 <USBD_Get_USB_Status>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c390:	7bbb      	ldrb	r3, [r7, #14]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	70fb      	strb	r3, [r7, #3]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70bb      	strb	r3, [r7, #2]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3c2:	78bb      	ldrb	r3, [r7, #2]
 800c3c4:	883a      	ldrh	r2, [r7, #0]
 800c3c6:	78f9      	ldrb	r1, [r7, #3]
 800c3c8:	f7f6 f91f 	bl	800260a <HAL_PCD_EP_Open>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 f93c 	bl	800c650 <USBD_Get_USB_Status>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c400:	78fa      	ldrb	r2, [r7, #3]
 800c402:	4611      	mov	r1, r2
 800c404:	4618      	mov	r0, r3
 800c406:	f7f6 f968 	bl	80026da <HAL_PCD_EP_Close>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	4618      	mov	r0, r3
 800c412:	f000 f91d 	bl	800c650 <USBD_Get_USB_Status>
 800c416:	4603      	mov	r3, r0
 800c418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c430:	2300      	movs	r3, #0
 800c432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c43e:	78fa      	ldrb	r2, [r7, #3]
 800c440:	4611      	mov	r1, r2
 800c442:	4618      	mov	r0, r3
 800c444:	f7f6 fb2b 	bl	8002a9e <HAL_PCD_EP_Flush>
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 f8fe 	bl	800c650 <USBD_Get_USB_Status>
 800c454:	4603      	mov	r3, r0
 800c456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c458:	7bbb      	ldrb	r3, [r7, #14]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	460b      	mov	r3, r1
 800c46c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c47c:	78fa      	ldrb	r2, [r7, #3]
 800c47e:	4611      	mov	r1, r2
 800c480:	4618      	mov	r0, r3
 800c482:	f7f6 fa21 	bl	80028c8 <HAL_PCD_EP_SetStall>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 f8df 	bl	800c650 <USBD_Get_USB_Status>
 800c492:	4603      	mov	r3, r0
 800c494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c496:	7bbb      	ldrb	r3, [r7, #14]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4ba:	78fa      	ldrb	r2, [r7, #3]
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7f6 fa66 	bl	8002990 <HAL_PCD_EP_ClrStall>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 f8c0 	bl	800c650 <USBD_Get_USB_Status>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4f0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	da0b      	bge.n	800c512 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4fa:	78fb      	ldrb	r3, [r7, #3]
 800c4fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c500:	68f9      	ldr	r1, [r7, #12]
 800c502:	4613      	mov	r3, r2
 800c504:	00db      	lsls	r3, r3, #3
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	440b      	add	r3, r1
 800c50c:	333e      	adds	r3, #62	; 0x3e
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	e00b      	b.n	800c52a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c512:	78fb      	ldrb	r3, [r7, #3]
 800c514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c518:	68f9      	ldr	r1, [r7, #12]
 800c51a:	4613      	mov	r3, r2
 800c51c:	00db      	lsls	r3, r3, #3
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	440b      	add	r3, r1
 800c524:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c528:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	460b      	mov	r3, r1
 800c540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c550:	78fa      	ldrb	r2, [r7, #3]
 800c552:	4611      	mov	r1, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7f6 f833 	bl	80025c0 <HAL_PCD_SetAddress>
 800c55a:	4603      	mov	r3, r0
 800c55c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	4618      	mov	r0, r3
 800c562:	f000 f875 	bl	800c650 <USBD_Get_USB_Status>
 800c566:	4603      	mov	r3, r0
 800c568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	607a      	str	r2, [r7, #4]
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	460b      	mov	r3, r1
 800c582:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c592:	7af9      	ldrb	r1, [r7, #11]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	f7f6 f94c 	bl	8002834 <HAL_PCD_EP_Transmit>
 800c59c:	4603      	mov	r3, r0
 800c59e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 f854 	bl	800c650 <USBD_Get_USB_Status>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b086      	sub	sp, #24
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	607a      	str	r2, [r7, #4]
 800c5c0:	603b      	str	r3, [r7, #0]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c5d4:	7af9      	ldrb	r1, [r7, #11]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	f7f6 f8c8 	bl	800276e <HAL_PCD_EP_Receive>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 f833 	bl	800c650 <USBD_Get_USB_Status>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	460b      	mov	r3, r1
 800c602:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c60a:	78fa      	ldrb	r2, [r7, #3]
 800c60c:	4611      	mov	r1, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f7f6 f8f8 	bl	8002804 <HAL_PCD_EP_GetRxCount>
 800c614:	4603      	mov	r3, r0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
	...

0800c620 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c620:	b480      	push	{r7}
 800c622:	b083      	sub	sp, #12
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c628:	4b03      	ldr	r3, [pc, #12]	; (800c638 <USBD_static_malloc+0x18>)
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	20005834 	.word	0x20005834

0800c63c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]

}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	2b03      	cmp	r3, #3
 800c662:	d817      	bhi.n	800c694 <USBD_Get_USB_Status+0x44>
 800c664:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <USBD_Get_USB_Status+0x1c>)
 800c666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66a:	bf00      	nop
 800c66c:	0800c67d 	.word	0x0800c67d
 800c670:	0800c683 	.word	0x0800c683
 800c674:	0800c689 	.word	0x0800c689
 800c678:	0800c68f 	.word	0x0800c68f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c67c:	2300      	movs	r3, #0
 800c67e:	73fb      	strb	r3, [r7, #15]
    break;
 800c680:	e00b      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c682:	2303      	movs	r3, #3
 800c684:	73fb      	strb	r3, [r7, #15]
    break;
 800c686:	e008      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c688:	2301      	movs	r3, #1
 800c68a:	73fb      	strb	r3, [r7, #15]
    break;
 800c68c:	e005      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c68e:	2303      	movs	r3, #3
 800c690:	73fb      	strb	r3, [r7, #15]
    break;
 800c692:	e002      	b.n	800c69a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c694:	2303      	movs	r3, #3
 800c696:	73fb      	strb	r3, [r7, #15]
    break;
 800c698:	bf00      	nop
  }
  return usb_status;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3714      	adds	r7, #20
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <memset>:
 800c6a8:	4402      	add	r2, r0
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d100      	bne.n	800c6b2 <memset+0xa>
 800c6b0:	4770      	bx	lr
 800c6b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6b6:	e7f9      	b.n	800c6ac <memset+0x4>

0800c6b8 <_reclaim_reent>:
 800c6b8:	4b29      	ldr	r3, [pc, #164]	; (800c760 <_reclaim_reent+0xa8>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4283      	cmp	r3, r0
 800c6be:	b570      	push	{r4, r5, r6, lr}
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	d04b      	beq.n	800c75c <_reclaim_reent+0xa4>
 800c6c4:	69c3      	ldr	r3, [r0, #28]
 800c6c6:	b143      	cbz	r3, 800c6da <_reclaim_reent+0x22>
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d144      	bne.n	800c758 <_reclaim_reent+0xa0>
 800c6ce:	69e3      	ldr	r3, [r4, #28]
 800c6d0:	6819      	ldr	r1, [r3, #0]
 800c6d2:	b111      	cbz	r1, 800c6da <_reclaim_reent+0x22>
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 f879 	bl	800c7cc <_free_r>
 800c6da:	6961      	ldr	r1, [r4, #20]
 800c6dc:	b111      	cbz	r1, 800c6e4 <_reclaim_reent+0x2c>
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f000 f874 	bl	800c7cc <_free_r>
 800c6e4:	69e1      	ldr	r1, [r4, #28]
 800c6e6:	b111      	cbz	r1, 800c6ee <_reclaim_reent+0x36>
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 f86f 	bl	800c7cc <_free_r>
 800c6ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c6f0:	b111      	cbz	r1, 800c6f8 <_reclaim_reent+0x40>
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	f000 f86a 	bl	800c7cc <_free_r>
 800c6f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6fa:	b111      	cbz	r1, 800c702 <_reclaim_reent+0x4a>
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f000 f865 	bl	800c7cc <_free_r>
 800c702:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c704:	b111      	cbz	r1, 800c70c <_reclaim_reent+0x54>
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f860 	bl	800c7cc <_free_r>
 800c70c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c70e:	b111      	cbz	r1, 800c716 <_reclaim_reent+0x5e>
 800c710:	4620      	mov	r0, r4
 800c712:	f000 f85b 	bl	800c7cc <_free_r>
 800c716:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c718:	b111      	cbz	r1, 800c720 <_reclaim_reent+0x68>
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 f856 	bl	800c7cc <_free_r>
 800c720:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c722:	b111      	cbz	r1, 800c72a <_reclaim_reent+0x72>
 800c724:	4620      	mov	r0, r4
 800c726:	f000 f851 	bl	800c7cc <_free_r>
 800c72a:	6a23      	ldr	r3, [r4, #32]
 800c72c:	b1b3      	cbz	r3, 800c75c <_reclaim_reent+0xa4>
 800c72e:	4620      	mov	r0, r4
 800c730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c734:	4718      	bx	r3
 800c736:	5949      	ldr	r1, [r1, r5]
 800c738:	b941      	cbnz	r1, 800c74c <_reclaim_reent+0x94>
 800c73a:	3504      	adds	r5, #4
 800c73c:	69e3      	ldr	r3, [r4, #28]
 800c73e:	2d80      	cmp	r5, #128	; 0x80
 800c740:	68d9      	ldr	r1, [r3, #12]
 800c742:	d1f8      	bne.n	800c736 <_reclaim_reent+0x7e>
 800c744:	4620      	mov	r0, r4
 800c746:	f000 f841 	bl	800c7cc <_free_r>
 800c74a:	e7c0      	b.n	800c6ce <_reclaim_reent+0x16>
 800c74c:	680e      	ldr	r6, [r1, #0]
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 f83c 	bl	800c7cc <_free_r>
 800c754:	4631      	mov	r1, r6
 800c756:	e7ef      	b.n	800c738 <_reclaim_reent+0x80>
 800c758:	2500      	movs	r5, #0
 800c75a:	e7ef      	b.n	800c73c <_reclaim_reent+0x84>
 800c75c:	bd70      	pop	{r4, r5, r6, pc}
 800c75e:	bf00      	nop
 800c760:	20000174 	.word	0x20000174

0800c764 <__libc_init_array>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	4d0d      	ldr	r5, [pc, #52]	; (800c79c <__libc_init_array+0x38>)
 800c768:	4c0d      	ldr	r4, [pc, #52]	; (800c7a0 <__libc_init_array+0x3c>)
 800c76a:	1b64      	subs	r4, r4, r5
 800c76c:	10a4      	asrs	r4, r4, #2
 800c76e:	2600      	movs	r6, #0
 800c770:	42a6      	cmp	r6, r4
 800c772:	d109      	bne.n	800c788 <__libc_init_array+0x24>
 800c774:	4d0b      	ldr	r5, [pc, #44]	; (800c7a4 <__libc_init_array+0x40>)
 800c776:	4c0c      	ldr	r4, [pc, #48]	; (800c7a8 <__libc_init_array+0x44>)
 800c778:	f000 f880 	bl	800c87c <_init>
 800c77c:	1b64      	subs	r4, r4, r5
 800c77e:	10a4      	asrs	r4, r4, #2
 800c780:	2600      	movs	r6, #0
 800c782:	42a6      	cmp	r6, r4
 800c784:	d105      	bne.n	800c792 <__libc_init_array+0x2e>
 800c786:	bd70      	pop	{r4, r5, r6, pc}
 800c788:	f855 3b04 	ldr.w	r3, [r5], #4
 800c78c:	4798      	blx	r3
 800c78e:	3601      	adds	r6, #1
 800c790:	e7ee      	b.n	800c770 <__libc_init_array+0xc>
 800c792:	f855 3b04 	ldr.w	r3, [r5], #4
 800c796:	4798      	blx	r3
 800c798:	3601      	adds	r6, #1
 800c79a:	e7f2      	b.n	800c782 <__libc_init_array+0x1e>
 800c79c:	0800c9c4 	.word	0x0800c9c4
 800c7a0:	0800c9c4 	.word	0x0800c9c4
 800c7a4:	0800c9c4 	.word	0x0800c9c4
 800c7a8:	0800c9c8 	.word	0x0800c9c8

0800c7ac <__retarget_lock_acquire_recursive>:
 800c7ac:	4770      	bx	lr

0800c7ae <__retarget_lock_release_recursive>:
 800c7ae:	4770      	bx	lr

0800c7b0 <memcpy>:
 800c7b0:	440a      	add	r2, r1
 800c7b2:	4291      	cmp	r1, r2
 800c7b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7b8:	d100      	bne.n	800c7bc <memcpy+0xc>
 800c7ba:	4770      	bx	lr
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7c6:	4291      	cmp	r1, r2
 800c7c8:	d1f9      	bne.n	800c7be <memcpy+0xe>
 800c7ca:	bd10      	pop	{r4, pc}

0800c7cc <_free_r>:
 800c7cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ce:	2900      	cmp	r1, #0
 800c7d0:	d044      	beq.n	800c85c <_free_r+0x90>
 800c7d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7d6:	9001      	str	r0, [sp, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f1a1 0404 	sub.w	r4, r1, #4
 800c7de:	bfb8      	it	lt
 800c7e0:	18e4      	addlt	r4, r4, r3
 800c7e2:	f000 f83f 	bl	800c864 <__malloc_lock>
 800c7e6:	4a1e      	ldr	r2, [pc, #120]	; (800c860 <_free_r+0x94>)
 800c7e8:	9801      	ldr	r0, [sp, #4]
 800c7ea:	6813      	ldr	r3, [r2, #0]
 800c7ec:	b933      	cbnz	r3, 800c7fc <_free_r+0x30>
 800c7ee:	6063      	str	r3, [r4, #4]
 800c7f0:	6014      	str	r4, [r2, #0]
 800c7f2:	b003      	add	sp, #12
 800c7f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7f8:	f000 b83a 	b.w	800c870 <__malloc_unlock>
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	d908      	bls.n	800c812 <_free_r+0x46>
 800c800:	6825      	ldr	r5, [r4, #0]
 800c802:	1961      	adds	r1, r4, r5
 800c804:	428b      	cmp	r3, r1
 800c806:	bf01      	itttt	eq
 800c808:	6819      	ldreq	r1, [r3, #0]
 800c80a:	685b      	ldreq	r3, [r3, #4]
 800c80c:	1949      	addeq	r1, r1, r5
 800c80e:	6021      	streq	r1, [r4, #0]
 800c810:	e7ed      	b.n	800c7ee <_free_r+0x22>
 800c812:	461a      	mov	r2, r3
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	b10b      	cbz	r3, 800c81c <_free_r+0x50>
 800c818:	42a3      	cmp	r3, r4
 800c81a:	d9fa      	bls.n	800c812 <_free_r+0x46>
 800c81c:	6811      	ldr	r1, [r2, #0]
 800c81e:	1855      	adds	r5, r2, r1
 800c820:	42a5      	cmp	r5, r4
 800c822:	d10b      	bne.n	800c83c <_free_r+0x70>
 800c824:	6824      	ldr	r4, [r4, #0]
 800c826:	4421      	add	r1, r4
 800c828:	1854      	adds	r4, r2, r1
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	6011      	str	r1, [r2, #0]
 800c82e:	d1e0      	bne.n	800c7f2 <_free_r+0x26>
 800c830:	681c      	ldr	r4, [r3, #0]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	6053      	str	r3, [r2, #4]
 800c836:	440c      	add	r4, r1
 800c838:	6014      	str	r4, [r2, #0]
 800c83a:	e7da      	b.n	800c7f2 <_free_r+0x26>
 800c83c:	d902      	bls.n	800c844 <_free_r+0x78>
 800c83e:	230c      	movs	r3, #12
 800c840:	6003      	str	r3, [r0, #0]
 800c842:	e7d6      	b.n	800c7f2 <_free_r+0x26>
 800c844:	6825      	ldr	r5, [r4, #0]
 800c846:	1961      	adds	r1, r4, r5
 800c848:	428b      	cmp	r3, r1
 800c84a:	bf04      	itt	eq
 800c84c:	6819      	ldreq	r1, [r3, #0]
 800c84e:	685b      	ldreq	r3, [r3, #4]
 800c850:	6063      	str	r3, [r4, #4]
 800c852:	bf04      	itt	eq
 800c854:	1949      	addeq	r1, r1, r5
 800c856:	6021      	streq	r1, [r4, #0]
 800c858:	6054      	str	r4, [r2, #4]
 800c85a:	e7ca      	b.n	800c7f2 <_free_r+0x26>
 800c85c:	b003      	add	sp, #12
 800c85e:	bd30      	pop	{r4, r5, pc}
 800c860:	20005be8 	.word	0x20005be8

0800c864 <__malloc_lock>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__malloc_lock+0x8>)
 800c866:	f7ff bfa1 	b.w	800c7ac <__retarget_lock_acquire_recursive>
 800c86a:	bf00      	nop
 800c86c:	20005be4 	.word	0x20005be4

0800c870 <__malloc_unlock>:
 800c870:	4801      	ldr	r0, [pc, #4]	; (800c878 <__malloc_unlock+0x8>)
 800c872:	f7ff bf9c 	b.w	800c7ae <__retarget_lock_release_recursive>
 800c876:	bf00      	nop
 800c878:	20005be4 	.word	0x20005be4

0800c87c <_init>:
 800c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87e:	bf00      	nop
 800c880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c882:	bc08      	pop	{r3}
 800c884:	469e      	mov	lr, r3
 800c886:	4770      	bx	lr

0800c888 <_fini>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	bf00      	nop
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr
